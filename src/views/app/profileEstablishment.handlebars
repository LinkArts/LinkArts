<div class="main-content">
  <div class="container-profile">
    <section class="profile-section">
      <div class="profile-info">
        <div class="profile-left">
          <div class="profile-img">
            <img id="profile-main-image" src="{{#if values.imageUrl}}{{values.imageUrl}}{{else}}/img/default.jpg{{/if}}" alt="{{values.name}}">
          </div>
          <div class="profile-details">
            <h1 id="profile-name">{{values.name}}</h1>
            <p class="profile-location" id="profile-location"><span class="visually-hidden"></span> {{values.city}}</p>
            <div class="profile-rating"
              aria-label="Avaliação: {{values.averageRating}} de 5 estrelas (baseado em {{values.totalRatings}} avaliações)">
              <div class="stars" aria-hidden="true">
              </div class="rating-content">
              <span style="margin-bottom: 5px;">★</span>
              <span class="rating">{{values.averageRating}}</span>
              <span class="reviews">({{values.totalRatings}} {{#if (eq values.totalRatings 1)}}avaliação{{else}}avaliações{{/if}})</span>
            </div>
          </div>
        </div>
        <div class="profile-actions">
          <a href="/agenda/{{values.id}}" class="btn btn-outline">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect width="18" height="18" x="3" y="4" rx="2"></rect>
              <line x1="16" x2="16" y1="2" y2="6"></line>
              <line x1="8" x2="8" y1="2" y2="6"></line>
              <line x1="3" x2="21" y1="10" y2="10"></line>
            </svg>
            Agenda
          </a>
          {{#if isOwner}}
          <button id="edit-profile-btn" class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
            </svg>
            Editar Perfil
          </button>
          {{else}}
          <button id="create-chat-btn" class="btn btn-primary" data-user-id="{{values.id}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
            </svg>
            Abrir Chat
          </button>
          <button id="add-favorite-btn" class="btn btn-outline" data-user-id="{{values.id}}" data-is-favorite="{{isFavorite}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              {{#if isFavorite}}
              <!-- Ícone X para remover -->
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
              {{else}}
              <!-- Ícone coração para adicionar -->
              <path
                d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
              {{/if}}
            </svg>
            {{#if isFavorite}}Remover dos Favoritos{{else}}Adicionar aos Favoritos{{/if}}
          </button>
          <button id="report-profile-btn" class="btn btn-outline" data-user-id="{{values.id}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path
                d="M3 3l18 18M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
            </svg>
            Denunciar Perfil
          </button>
          {{/if}}
        </div>
    </section>

    <section class="about-section">
      <div class="about-header">
        <h2>Sobre</h2>
        <div class="social-icons">
          {{#if values.linkedin}}
          <a href="{{values.linkedin}}" target="_blank" rel="noopener noreferrer" class="social-icon linkedin"
            aria-label="LinkedIn">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
              <rect width="4" height="12" x="2" y="9" />
              <circle cx="4" cy="4" r="2" />
            </svg>
          </a>
          {{/if}}
          {{#if values.instagram}}
          <a href="{{values.instagram}}" target="_blank" rel="noopener noreferrer" class="social-icon instagram"
            aria-label="Instagram">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect width="20" height="20" x="2" y="2" rx="5" ry="5" />
              <path d="m16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" />
              <line x1="17.5" x2="17.51" y1="6.5" y2="6.5" />
            </svg>
          </a>
          {{/if}}
          {{#if values.facebook}}
          <a href="{{values.facebook}}" target="_blank" rel="noopener noreferrer" class="social-icon facebook"
            aria-label="Facebook">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
            </svg>
          </a>
          {{/if}}
        </div>
      </div>
      <p id="profile-about">
        {{#if values.description}}{{values.description}}{{else}}Descrição não informada.{{/if}}
      </p>
      {{#if values.tags}}
      <div class="tags">
        {{#each values.tags}}
        <span class="tag">{{name}}</span>
        {{/each}}
      </div>
      {{/if}}
    </section>

    <section class="service-requests-section">
      <div class="section-header">
        <h2>Pedidos de Serviço</h2>
        {{#if isOwner}}
        <button class="btn btn-primary" id="add-service-request-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Adicionar Pedido
        </button>
        {{/if}}
      </div>
      <div class="scroll-container">
        <ul class="service-requests-container">
          {{#if values.serviceRequests}}
          {{#each values.serviceRequests}}
          <li class="service-request-card" data-id="{{id}}">
            <div class="request-content">
              <h3>{{name}}</h3>
              <p class="request-description">
                {{description}}
              </p>
              <p class="request-date-time">
                <span class="date">Data: {{date}}</span>
                <span class="time">Horário: {{startTime}} - {{endTime}}</span>
              </p>
              <div class="request-tags">
                {{#each Tags}}
                <span class="tag">{{name}}</span>
                {{/each}}
              </div>
            </div>
          </li>
          {{/each}}
          {{else}}
          {{#if isOwner}}
          <p>Nenhum pedido de serviço programado. Clique em "Adicionar Pedido" para começar!</p>
          {{else}}
          <p>Ainda não há nenhum pedido de serviço aqui.</p>
          {{/if}}
          {{/if}}
        </ul>
      </div>
    </section>

    <section class="events-section">
      <div class="section-header">
        <h2>{{#if isOwner}}Meus Eventos{{else}}Próximos Eventos{{/if}}</h2>
        {{#if isOwner}}
        <button class="btn btn-primary" id="add-event-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Adicionar Evento
        </button>
        {{/if}}
      </div>
      <div class="scroll-container">
        <ul class="events-container">
          {{#if values.events}}
          {{#each values.events}}
          <li class="event-card">
            <div class="event-img"><img src="{{#if imageUrl}}{{imageUrl}}{{else}}/img/placeholder.svg{{/if}}" alt="{{title}}" onerror="this.src='/img/placeholder.svg'"></div>
            <div class="event-content">
              <h3>{{title}}</h3>
              <p class="event-date">Data: {{date}}</p>
              <p class="event-description">{{description}}</p>
            </div>
          </li>
          {{/each}}
          {{else}}
          {{#if isOwner}}
          <p>Nenhum evento programado. Clique em "Adicionar Evento" para começar!</p>
          {{else}}
          <p>Ainda não há nenhum evento aqui.</p>
          {{/if}}
          {{/if}}
        </ul>
      </div>
    </section>

    <section class="reviews-section">
      <div class="section-header">
        <h2>Avaliações Recentes</h2>
        {{#if (gt values.totalRatings 4)}}
        <button id="view-all-reviews-btn" class="btn btn-link" data-user-id="{{values.id}}">Ver Todas Avaliações
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <path d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>
        </button>
        {{/if}}
      </div>
      <ul class="reviews-list" id="reviews-container">
        {{#each values.reviews}}
        <li class="review-card">
          <div class="review-header">
            <div class="reviewer-info">
              <a href="/profile/{{this.senderId}}" class="reviewer-link">
                <img src="{{#if this.senderImageUrl}}{{this.senderImageUrl}}{{else}}/img/default.jpg{{/if}}" 
                     alt="{{this.senderName}}" class="reviewer-avatar">
                <h3>{{this.senderName}}</h3>
              </a>
            </div>
            <div class="review-stars">
              {{#each (range 1 6)}}
              <span class="star {{#if (lte this ../rating)}}filled{{/if}}">★</span>
              {{/each}}
            </div>
          </div>
          <p class="review-text">{{this.description}}</p>
        </li>
        {{else}}
        <li><p>Ainda não há avaliações.</p></li>
        {{/each}}
      </ul>
    </section>
  </div>
  <input type="hidden" id="is-profile-owner" value="{{isOwner}}">
</div>

<script>
  document.addEventListener('DOMContentLoaded', async function ()
  {
    
    const isProfileOwner = document.getElementById('is-profile-owner')?.value === 'true';

    const API_BASE_URL = '/profile';

    const addEventButton = document.getElementById('add-event-btn');
    const eventsContainer = document.querySelector('.events-container');
    const editProfileButton = document.getElementById('edit-profile-btn');
    const reportProfileButton = document.getElementById('report-profile-btn');
    const addServiceRequestButton = document.getElementById('add-service-request-btn');
    const serviceRequestsContainer = document.querySelector('.service-requests-container');

    const profileNameElement = document.getElementById('profile-name');
    const profileLocationElement = document.getElementById('profile-location');
    const profileAboutElement = document.getElementById('profile-about');
    const profileImageElement = document.getElementById('profile-main-image');

    availableTags = [];
    let lastFocusedElement = null;

    // Só carrega via AJAX se for o próprio usuário (isOwner), 
    // caso contrário usa os dados que já vieram do servidor
    if (isProfileOwner) {
        loadEvents();
        loadServiceRequests();
    } else {
        // Para visitantes, adicionar event listeners aos cards já existentes
        setupExistingServiceRequestCards();
    }

    document.getElementById('add-favorite-btn')?.addEventListener('click', async function ()
    {
      const userId = this.dataset.userId;
      const button = this;
      
      try
      {
        const response = await fetch(`/profile/adicionar-favorito/${ userId }`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });

        const data = await response.json();
        
        if (response.ok) {
          // Atualizar o botão baseado na resposta
          updateFavoriteButton(button, !data.removed);
          
          if (data.removed) {
            showToast(data.message || 'Removido dos favoritos', 'success');
          } else {
            showToast(data.message || 'Adicionado aos favoritos', 'success');
          }
        } else {
          showToast(data.message || 'Erro ao alterar favoritos', 'error');
        }

      } catch (error)
      {
        console.error('Erro ao alterar favoritos:', error);
        showToast('Erro ao alterar favoritos', 'error');
      }
    });

    function updateFavoriteButton(button, isFavorite) {
      const svg = button.querySelector('svg');
      const textNode = button.childNodes[button.childNodes.length - 1];
      
      // Atualizar o data attribute
      button.dataset.isFavorite = isFavorite;
      
      if (isFavorite) {
        // Mudar para ícone X e texto "Remover dos Favoritos"
        svg.innerHTML = `
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        `;
        textNode.textContent = 'Remover dos Favoritos';
      } else {
        // Mudar para ícone coração e texto "Adicionar aos Favoritos"
        svg.innerHTML = `
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        `;
        textNode.textContent = 'Adicionar aos Favoritos';
      }
    }

    function showToast(message, type = 'success')
    {
      document.querySelectorAll('.toast.show').forEach(t => t.remove());
      const toast = document.createElement('div');
      toast.className = `toast ${ type }`;
      let iconSvg = '';
      if (type === 'success') iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z"/></svg>`;
      else if (type === 'warning') iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 0 0-.44 0L1.698 13.939a.25.25 0 0 0 .22.361h12.164a.25.25 0 0 0 .22-.361L8.22 1.754ZM8 11.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM8.25 6v3.5a.25.25 0 0 1-.5 0V6a.25.25 0 0 1 .5 0Z"/></svg>`;
      else if (type === 'error') iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M4.47 4.47a.75.75 0 0 1 1.06 0L8 6.94l2.47-2.47a.75.75 0 1 1 1.06 1.06L9.06 8l2.47 2.47a.75.75 0 1 1-1.06 1.06L8 9.06l-2.47 2.47a.75.75 0 0 1-1.06-1.06L6.94 8 4.47 5.53a.75.75 0 0 1 0-1.06Z"/></svg>`;
      toast.innerHTML = `${ iconSvg } <span>${ message }</span>`;
      document.body.appendChild(toast);
      toast.getBoundingClientRect();
      toast.classList.add('show');
      setTimeout(() =>
      {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => { if (document.body.contains(toast)) document.body.removeChild(toast); }, { once: true });
      }, 3500);
    }

    function closeModal(modalOverlay)
    {
      if (modalOverlay && modalOverlay.classList.contains('is-visible'))
      {
        console.log('Iniciando fechamento do modal:', modalOverlay.className);
        modalOverlay.classList.remove('is-visible');
        document.body.classList.remove('modal-open');

        const removeElementAfterTransition = () =>
        {
          console.log('Transição de fechamento concluída. Removendo modal do DOM.');
          if (modalOverlay && document.body.contains(modalOverlay))
          {
            const selectElement = modalOverlay.querySelector('.select2-hidden-accessible');
            if (selectElement && $(selectElement).data('select2'))
            {
              $(selectElement).select2('destroy');
              console.log('Select2 destruído no modal.');
            }
            modalOverlay.remove();
          }
          modalOverlay.removeEventListener('transitionend', removeElementAfterTransition);
          if (lastFocusedElement && typeof lastFocusedElement.focus === 'function')
          {
            console.log("Restaurando foco para:", lastFocusedElement);
            lastFocusedElement.focus();
            lastFocusedElement = null;
          }
        };
        modalOverlay.addEventListener('transitionend', removeElementAfterTransition, { once: true });
        setTimeout(() =>
        {
          if (modalOverlay && document.body.contains(modalOverlay))
          {
            console.warn("Fallback: Removendo modal porque transitionend não disparou a tempo.");
            removeElementAfterTransition();
          }
        }, 500);
      } else if (modalOverlay && document.body.contains(modalOverlay))
      {
        console.warn("Modal encontrado no DOM mas não visível. Removendo diretamente.");
        modalOverlay.remove();
        document.body.classList.remove('modal-open');
        if (lastFocusedElement) lastFocusedElement.focus();
        lastFocusedElement = null;
      } else
      {
        console.log("Nenhum modal ativo para fechar ou já foi removido.");
        document.body.classList.remove('modal-open');
      }
    }

    function trapFocus(modalElement)
    {
      const focusableElements = modalElement.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (focusableElements.length === 0) return { destroy: () => { } };
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      setTimeout(() => { firstElement?.focus(); }, 100);

      const handleTabKeyPress = (e) =>
      {
        if (!modalElement.contains(document.activeElement))
        {
          firstElement?.focus(); return;
        }
        if (e.key === 'Tab')
        {
          if (e.shiftKey && document.activeElement === firstElement) { lastElement.focus(); e.preventDefault(); }
          else if (!e.shiftKey && document.activeElement === lastElement) { firstElement.focus(); e.preventDefault(); }
        } else if (e.key === 'Escape')
        {
          const overlay = modalElement.closest('.modal-overlay');
          if (overlay) closeModal(overlay);
        }
      };
      modalElement.addEventListener('keydown', handleTabKeyPress);
      return {
        destroy: () => modalElement.removeEventListener('keydown', handleTabKeyPress)
      };
    }

    function openModal(overlaySelector, modalClass, modalHTMLContent, triggerButton)
    {
      lastFocusedElement = triggerButton || document.activeElement;
      const existingOverlay = document.querySelector(overlaySelector);
      if (existingOverlay)
      {
        closeModal(existingOverlay);
      }

      const modalOverlay = document.createElement('div');
      modalOverlay.className = `modal-overlay ${ overlaySelector.substring(1) }`;
      modalOverlay.setAttribute('role', 'dialog');
      modalOverlay.setAttribute('aria-modal', 'true');

      const modal = document.createElement('div');
      modal.className = modalClass;
      modal.innerHTML = modalHTMLContent;

      const titleElement = modal.querySelector('h2');
      if (titleElement && !titleElement.id)
      {
        titleElement.id = `${ modalClass }-heading`;
      }
      if (titleElement)
      {
        modalOverlay.setAttribute('aria-labelledby', titleElement.id);
      }

      modalOverlay.appendChild(modal);
      document.body.appendChild(modalOverlay);
      document.body.classList.add('modal-open');
      modalOverlay.getBoundingClientRect();
      modalOverlay.classList.add('is-visible');

      const closeButton = modal.querySelector('.modal-close-btn');
      const cancelButton = modal.querySelector('.btn-cancel');

      closeButton?.addEventListener('click', () => closeModal(modalOverlay));
      cancelButton?.addEventListener('click', () => closeModal(modalOverlay));
      modalOverlay.addEventListener('click', (e) =>
      {
        if (e.target === modalOverlay) { closeModal(modalOverlay); }
      });

      const focusTrapInstance = trapFocus(modal);
      return modal;
    }

    function formatDateForInput(dateString)
    {
      if (!dateString) return '';
      const parts = dateString.split('/');
      if (parts.length === 3)
      {
        return `${ parts[2] }-${ parts[1] }-${ parts[0] }`;
      }
      return dateString;
    }

    function formatDisplayDate(dateRaw)
    {
      if (!dateRaw) return '';
      try
      {
        const dateObj = new Date(dateRaw + 'T00:00:00');
        if (!isNaN(dateObj))
        {
          return dateObj.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
        }
      } catch (error)
      {
        console.error("Erro ao formatar data:", error);
      }
      return dateRaw;
    }

    function renderEventCard(eventData)
    {
      const eventItem = document.createElement('li');
      eventItem.className = 'event-card';
      eventItem.dataset.id = eventData.id;
      eventItem.innerHTML = `
                <div class="event-img">
                    <img src="${ eventData.imageUrl || '/img/placeholder.svg' }" alt="${ eventData.title || 'Placeholder Evento' }">
                </div>
                <div class="event-content">
                    <h3>${ eventData.title || 'Sem Título' }</h3>
                    <p class="event-date">Data: ${ formatDisplayDate(eventData.date) }</p>
                    ${ eventData.description ? `<p class="event-description">${ eventData.description }</p>` : '' }
                </div>`;

      eventItem.querySelector('img').onerror = function ()
      {
        this.src = '/img/placeholder.svg';
        this.alt = 'Placeholder Evento';
      };

      eventItem.addEventListener('click', () =>
      {
        if (isProfileOwner)
        {
          setupEditEventModal(eventItem, eventData);
        } else
        {
          setupViewEventModal(eventItem, eventData);
        }
      });
      return eventItem;
    }

    function renderServiceRequestCard(requestData)
    {
              const requestItem = document.createElement('li');
      requestItem.className = 'service-request-card';
      requestItem.dataset.id = requestData.id;

      let timeRange = requestData.startTime;
      if (requestData.endTime)
      {
        timeRange += ` - ${ requestData.endTime }`;
      }

      requestItem.innerHTML = `
                <div class="request-content">
                    <h3>${ requestData.name || 'Sem Nome' }</h3>
                    ${ requestData.description ? `<p class="request-description">${ requestData.description }</p>` : '' }
                    <p class="request-date-time">
                        <span class="date date-icon-text">Data: ${ formatDisplayDate(requestData.date) }</span>
                        <span class="time time-icon-text">Horário: ${ timeRange }</span>
                    </p>
                    <div class="request-tags"></div>
                </div>`;

      const tagsDiv = requestItem.querySelector('.request-tags');
      
      requestData.Tags.forEach(tagText =>
      {
        const tagSpan = document.createElement('span');
        tagSpan.className = 'tag';
        tagSpan.textContent = tagText.name;
        tagsDiv.appendChild(tagSpan);
      });

      requestItem.addEventListener('click', (e) =>
      {
        e.preventDefault();
        e.stopPropagation();
        
        // Sempre mostrar modal de visualização para todos os usuários
        setupViewServiceRequestModal(requestItem, requestData);
      });
      return requestItem;
    }

    function setupViewEventModal(eventCard, eventData)
    {
      const modalHTML = `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
        <h2 id="view-event-heading">${ eventData.title || 'Evento' }</h2>
        <div class="modal-content-view">
            ${ eventData.imageUrl ? `<img src="${ eventData.imageUrl }" alt="${ eventData.title }" class="modal-event-image">` : '' }
            <p><strong>Data:</strong> ${ formatDisplayDate(eventData.date) }</p>
            ${ eventData.description ? `<p><strong>Descrição:</strong> ${ eventData.description }</p>` : '' }
        </div>
        <div class="button-group">
            <button type="button" class="btn btn-primary btn-cancel">Fechar</button>
        </div>`;

      const modalElement = openModal('.view-event-overlay', 'view-event-modal', modalHTML, eventCard);
    }

    function setupExistingServiceRequestCards()
    {
      const existingCards = document.querySelectorAll('.service-request-card');
      
      existingCards.forEach((card, index) => {
        // Extrair dados do card HTML
        const name = card.querySelector('h3')?.textContent || 'Sem nome';
        const description = card.querySelector('.request-description')?.textContent || '';
        const dateText = card.querySelector('.date')?.textContent?.replace('Data: ', '') || '';
        const timeText = card.querySelector('.time')?.textContent?.replace('Horário: ', '') || '';
        const tags = Array.from(card.querySelectorAll('.tag')).map(tag => ({ name: tag.textContent }));
        
        // Separar horário de início e fim
        const timeParts = timeText.split(' - ');
        const startTime = timeParts[0] || '';
        const endTime = timeParts[1] || '';
        
        const requestData = {
          id: card.dataset.id,
          name: name,
          description: description,
          date: dateText,
          startTime: startTime,
          endTime: endTime,
          Tags: tags
        };
        
        // Adicionar event listener
        card.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          setupViewServiceRequestModal(card, requestData);
        });
      });
    }

    function setupViewServiceRequestModal(requestCard, requestData)
    {
      let timeRange = requestData.startTime;
      if (requestData.endTime)
      {
        timeRange += ` - ${ requestData.endTime }`;
      }

      const tagsHtml = requestData.Tags.map(tag => `<span class="tag">${ tag.name }</span>`).join('');

      // Botões diferentes para owner e visitante
      let actionButtons = '';
      if (isProfileOwner) {
        // Para o owner: botão Excluir + Ver Interessados
        actionButtons = `
          <button type="button" class="btn btn-delete" id="delete-service-request-btn">Excluir</button>
          <button type="button" class="btn btn-primary" id="view-interested-btn">Ver Interessados</button>
        `;
      } else {
        // Para visitantes: botão Cadastrar/Esquecer
        actionButtons = `
          <button type="button" class="btn btn-primary" id="register-interest-btn">Cadastrar</button>
        `;
      }

      const modalHTML = `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
        <h2 id="view-service-request-heading">${ requestData.name || 'Pedido de Serviço' }</h2>
        <div class="modal-content-view">
            ${ requestData.description ? `<p><strong>Descrição:</strong> ${ requestData.description }</p>` : '' }
            <p><strong>Data:</strong> ${ formatDisplayDate(requestData.date) }</p>
            <p><strong>Horário:</strong> ${ timeRange }</p>
            <p><strong>Tags:</strong> ${ tagsHtml || 'Nenhuma' }</p>
        </div>
        <div class="button-group">
            ${ actionButtons }
            <button type="button" class="btn btn-cancel">Fechar</button>
        </div>`;

      const modalElement = openModal('.view-service-request-overlay', 'view-service-request-modal', modalHTML, requestCard);
      
      // Configurar event listeners para os botões
      if (isProfileOwner) {
        setupOwnerButtons(modalElement, requestData);
      } else {
        setupVisitorButtons(modalElement, requestData);
      }
      
      return modalElement;
    }

    function setupOwnerButtons(modalElement, requestData)
    {
      const deleteBtn = modalElement.querySelector('#delete-service-request-btn');
      const viewInterestedBtn = modalElement.querySelector('#view-interested-btn');
      
      // Botão Excluir
      deleteBtn?.addEventListener('click', async () => {
        if (confirm(`Tem certeza que deseja excluir o pedido "${requestData.name}"?`)) {
          try {
            const response = await fetch(`/profile/deletar-pedido-servico/${requestData.id}`, {
              method: 'DELETE',
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.message}`);
            }

            showToast(`Pedido "${requestData.name}" excluído com sucesso!`, 'success');
            closeModal(modalElement.closest('.modal-overlay'));
            
            // Recarregar a lista de pedidos
            if (isProfileOwner) {
              loadServiceRequests();
            } else {
              // Remover o card do DOM se não for owner
              const cardElement = document.querySelector(`[data-id="${requestData.id}"]`);
              if (cardElement) {
                cardElement.remove();
              }
            }
          } catch (error) {
            console.error("Erro ao excluir pedido de serviço:", error);
            showToast('Erro ao excluir pedido de serviço. Tente novamente.', 'error');
          }
        }
      });
      
      // Botão Ver Interessados
      viewInterestedBtn?.addEventListener('click', () => {
        window.location.href = `/pedido-servico/${requestData.id}`;
      });
    }

    function setupVisitorButtons(modalElement, requestData)
    {
      const registerBtn = modalElement.querySelector('#register-interest-btn');
      
      // Verificar se o usuário já está cadastrado
      checkUserInterest(requestData.id).then(isInterested => {
        updateRegisterButton(registerBtn, isInterested, requestData.id);
      });
      
      registerBtn?.addEventListener('click', async () => {
        const isCurrentlyInterested = registerBtn.textContent.trim() === 'Esquecer';
        
        try {
          const endpoint = isCurrentlyInterested 
            ? `/pedido-servico/esquecer/${requestData.id}`
            : `/pedido-servico/inscrever/${requestData.id}`;
            
          const method = isCurrentlyInterested ? 'DELETE' : 'POST';
            
          const response = await fetch(endpoint, {
            method: method,
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include'
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Erro na operação');
          }

          const data = await response.json();
          showToast(data.message || (isCurrentlyInterested ? 'Interesse removido!' : 'Interesse cadastrado!'), 'success');
          
          // Atualizar o botão
          updateRegisterButton(registerBtn, !isCurrentlyInterested, requestData.id);
          
        } catch (error) {
          console.error('Erro ao gerenciar interesse:', error);
          showToast(error.message || 'Erro ao processar solicitação', 'error');
        }
      });
    }

    async function checkUserInterest(serviceRequestId)
    {
      try {
        const response = await fetch(`/pedido-servico/verificar-interesse/${serviceRequestId}`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          const data = await response.json();
          return data.isInterested || false;
        }
        return false;
      } catch (error) {
        console.error('Erro ao verificar interesse:', error);
        return false;
      }
    }

    function updateRegisterButton(button, isInterested, serviceRequestId)
    {
      if (isInterested) {
        button.textContent = 'Esquecer';
        button.className = 'btn btn-outline';
        button.setAttribute('onclick', `removeInterest('${serviceRequestId}')`);
      } else {
        button.textContent = 'Cadastrar';
        button.className = 'btn btn-primary';
        button.setAttribute('onclick', `registerInterest('${serviceRequestId}')`);
      }
    }

    async function loadEvents()
    {
      try
      {
        const response = await fetch(`${ API_BASE_URL }/eventos`);
        if (!response.ok) throw new Error(`HTTP error! status: ${ response.status }`);
        const events = await response.json();

        eventsContainer.innerHTML = '';
        if (events.length === 0)
        {
          const placeholderItem = document.createElement('p');
          if (isProfileOwner) {
            placeholderItem.innerHTML = 'Nenhum evento programado. Clique em "Adicionar Evento" para começar!';
          } else {
            placeholderItem.innerHTML = 'Ainda não há nenhum evento aqui.';
          }
          eventsContainer.appendChild(placeholderItem);
        } else
        {
          events.forEach(event =>
          {
            eventsContainer.appendChild(renderEventCard(event));
          });
          eventsContainer.closest('.scroll-container')?.scrollTo({ left: 0, behavior: 'smooth' });
        }
      } catch (error)
      {
        console.error("Erro ao carregar eventos:", error);
        showToast('Erro ao carregar eventos.', 'error');
      }
    }

    async function loadServiceRequests()
    {
      try
      {
        const response = await fetch(`${ API_BASE_URL }/pedidos-servico`);
        if (!response.ok) throw new Error(`HTTP error! status: ${ response.status }`);
        const requests = await response.json();

        serviceRequestsContainer.innerHTML = '';
        if (requests.length === 0)
        {
          const placeholderItem = document.createElement('p');
          if (isProfileOwner) {
            placeholderItem.innerHTML = 'Nenhum pedido de serviço programado. Clique em "Adicionar Pedido" para começar!';
          } else {
            placeholderItem.innerHTML = 'Ainda não há nenhum pedido de serviço aqui.';
          }
          serviceRequestsContainer.appendChild(placeholderItem);
        } else
        {
          requests.forEach(request =>
          {
            serviceRequestsContainer.appendChild(renderServiceRequestCard(request));
          });

          serviceRequestsContainer.closest('.scroll-container')?.scrollTo({ left: 0, behavior: 'smooth' });
        }
      } catch (error)
      {
        console.error("Erro ao carregar pedidos de serviço:", error);
        showToast('Erro ao carregar pedidos de serviço.', 'error');
      }
    }

    if (addEventButton && eventsContainer)
    {
      addEventButton.removeEventListener('click', handleAddEventClick);
      addEventButton.addEventListener('click', handleAddEventClick);
    }

    function handleAddEventClick()
    {
      const modalHTML = `
                <button type="button" class="modal-close-btn" aria-label="Fechar modal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
                <h2 id="add-event-heading">Adicionar Novo Evento</h2>
                <form id="add-event-form" novalidate>
                    <div class="form-group"> <label for="event-title">Título do Evento</label> <input type="text" id="event-title" maxlength="60" required> </div>
                    <div class="form-group"> <label for="event-date">Data do Evento</label> <input type="date" id="event-date" required> </div>
                    <div class="form-group"> <label for="event-description">Descrição (Opcional)</label> <textarea id="event-description" rows="3"></textarea> </div>
                    <div class="form-group"> 
                      <label>Imagem do Evento (Opcional)</label> 
                      <div id="event-image-uploader"></div> 
                    </div>
                    <div class="button-group"> <button type="button" class="btn btn-cancel">Cancelar</button> <button type="submit" class="btn btn-primary">Adicionar Evento</button> </div>
                </form>`;

      const modalElement = openModal('.add-event-overlay', 'add-event-modal', modalHTML, addEventButton);
      if (!modalElement) return;

      // Inicializar componente de upload de imagem de evento
      let eventImageUrl = null;
      const eventUploader = createImageUploader({
        containerId: 'event-image-uploader',
        uploadEndpoint: '/upload/event/photo',
        currentImageUrl: null,
        label: 'Escolher Imagem',
        onSuccess: (result) => {
          // Não armazenar URL aqui - será feito no upload pendente
        },
        onError: (error) => {
          console.error('💥 [EVENT DEBUG] Erro no upload de evento:', error);
        }
      });

      const addEventForm = modalElement.querySelector('#add-event-form');
      addEventForm?.addEventListener('submit', async function (e)
      {
        e.preventDefault();
        const eventTitleInput = modalElement.querySelector('#event-title');
        const eventDateInput = modalElement.querySelector('#event-date');
        const eventDescriptionInput = modalElement.querySelector('#event-description');
        const modalOverlay = modalElement.closest('.modal-overlay');

        const eventTitle = eventTitleInput.value.trim();
        const eventDate = eventDateInput.value;
        const eventDescription = eventDescriptionInput.value.trim();

        if (!eventTitle || !eventDate)
        {
          showToast('Título e Data são obrigatórios.', 'warning');
          if (!eventTitle) eventTitleInput.focus(); else eventDateInput.focus();
          return;
        }

        if (eventTitle.length > 60)
        {
          showToast('Título do evento deve ter no máximo 60 caracteres.', 'error');
          eventTitleInput.focus();
          return;
        }

        const newEventData = {
          title: eventTitle,
          date: eventDate,
          description: eventDescription,
          imageUrl: eventImageUrl
        };



        // Fazer upload da imagem se houver uma pendente
        let finalImageUrl = null;
        if (eventUploader && eventUploader.hasPendingUpload()) {
          const uploadResult = await eventUploader.uploadPendingImage();
          if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
            finalImageUrl = uploadResult.imageUrl;
          } else {
            throw new Error('Erro ao fazer upload da imagem: ' + (uploadResult.message || 'Erro desconhecido'));
          }
        }

        const eventDataToSend = {
          title: eventTitle,
          date: eventDate,
          description: eventDescription,
          imageUrl: finalImageUrl
        };



        try
        {
          const response = await fetch(`${ API_BASE_URL }/criar-evento`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(eventDataToSend),
          });

          if (!response.ok)
          {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
          }
          const addedEvent = await response.json();

          showToast(`Evento "${ addedEvent.title }" adicionado com sucesso!`);
          closeModal(modalOverlay);
          if (isProfileOwner) {
            await loadEvents();
          }
        } catch (error)
        {
          console.error("Erro ao adicionar evento:", error);
          showToast('Erro ao adicionar evento. Tente novamente.', 'error');
        }
      });
    }

    // Variável para armazenar o profileUploader no escopo da função
    let profileUploader = null;

    async function setupEditProfileModal()
    {
      const modalHTML = `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
        </button>
        <h2 id="edit-profile-heading">Editar Perfil da Empresa</h2>
        <form id="edit-profile-form" novalidate>
          <div class="form-group"> <label for="edit-profile-name">Nome da Empresa</label> <input type="text" id="edit-profile-name" maxlength="100" required> </div>
          <div class="form-group"> <label for="edit-profile-location">Localização</label> <input type="text" id="edit-profile-location" maxlength="30" required> </div>
          <div class="form-group"> <label for="edit-profile-about">Sobre a Empresa</label> <textarea id="edit-profile-about" rows="5" maxlength="500" required></textarea> </div>
          <div class="form-group"> 
            <label>Foto de Perfil</label> 
            <div id="profile-image-uploader"></div> 
          </div>
          <div class="form-group"> <label for="edit-profile-linkedin">LinkedIn</label> <input type="url" id="edit-profile-linkedin" placeholder="https://linkedin.com/in/empresa"> </div>
          <div class="form-group"> <label for="edit-profile-instagram">Instagram</label> <input type="url" id="edit-profile-instagram" placeholder="https://instagram.com/empresa"> </div>
          <div class="form-group"> <label for="edit-profile-facebook">Facebook</label> <input type="url" id="edit-profile-facebook" placeholder="https://facebook.com/empresa"> </div>
          <div class="form-group"><label for="edit-profile-tags">Tags do Perfil</label><select id="edit-profile-tags" name="tags" multiple style="width: 100%"></select></div>
          <div class="button-group"> <button type="button" class="btn btn-cancel">Cancelar</button> <button type="submit" class="btn btn-primary">Salvar Alterações</button> </div>
        </form>`;

      const modalElement = openModal('.edit-profile-overlay', 'edit-profile-modal', modalHTML, editProfileButton);
      if (!modalElement) return;

      try
      {
        const response = await fetch('/profile/user-data');
        if (!response.ok)
        {
          throw new Error('Failed to fetch user data');
        }
        const data = await response.json();
        const userData = data.userData;

        const nameInput = modalElement.querySelector('#edit-profile-name');
        const locationInput = modalElement.querySelector('#edit-profile-location');
        const aboutInput = modalElement.querySelector('#edit-profile-about');
        const linkedinInput = modalElement.querySelector('#edit-profile-linkedin');
        const instagramInput = modalElement.querySelector('#edit-profile-instagram');
        const facebookInput = modalElement.querySelector('#edit-profile-facebook');

        if (nameInput) nameInput.value = userData.name || '';
        if (locationInput) locationInput.value = userData.city || '';
        if (aboutInput) aboutInput.value = userData.description || '';
        if (linkedinInput) linkedinInput.value = userData.linkedin || '';
        if (instagramInput) instagramInput.value = userData.instagram || '';
        if (facebookInput) facebookInput.value = userData.facebook || '';

        // Inicializar componente de upload de imagem de perfil
        profileUploader = createImageUploader({
          containerId: 'profile-image-uploader',
          uploadEndpoint: '/upload/profile/photo',
          currentImageUrl: userData.imageUrl,
          onSuccess: (result) => {
            console.log('Upload de perfil bem-sucedido:', result);
            // Atualizar imagem de perfil na página imediatamente
            const profileImageElement = document.getElementById('profile-main-image');
            if (profileImageElement && result.imageUrl) {
              profileImageElement.src = result.imageUrl;
              profileImageElement.alt = `Logo de ${userData.name}`;
            }
            // Atualizar foto na navbar também
            if (window.updateNavbarProfilePhoto) {
              window.updateNavbarProfilePhoto(result.imageUrl);
            }
          },
          onError: (error) => {
            console.error('Erro no upload de perfil:', error);
          }
        });

        // Após preencher os campos, popular o select de tags
        const tagsSelect = modalElement.querySelector('#edit-profile-tags');
        if (tagsSelect) {
          tagsSelect.innerHTML = '';
          const tagsResponse = await fetch('/profile/tags');
          const tagsData = await tagsResponse.json();
          if (Array.isArray(tagsData.tags)) {
            tagsData.tags.forEach(tag => {
              const option = document.createElement('option');
              option.value = tag.id;
              option.textContent = tag.name;
              tagsSelect.appendChild(option);
            });
          }
          if (window.$ && $(tagsSelect).select2) {
            $(tagsSelect).select2({
              placeholder: 'Selecione as tags do perfil',
              allowClear: true,
            });
          }
          // Pré-selecionar as tags do usuário, se houver
          if (userData.tags && Array.isArray(userData.tags)) {
            const tagIds = userData.tags.map(t => t.id.toString());
            $(tagsSelect).val(tagIds).trigger('change');
          }
        }

      } catch (error)
      {
        console.error('Error fetching user data:', error);
        showToast('Erro ao carregar dados do perfil', 'error');
      }

      const editProfileForm = modalElement.querySelector('#edit-profile-form');
      editProfileForm?.addEventListener('submit', async function (e)
      {
        e.preventDefault();
        console.log("Salvando alterações do perfil...");
        const modalOverlay = modalElement.closest('.modal-overlay');

        const nameInput = modalElement.querySelector('#edit-profile-name');
        const locationInput = modalElement.querySelector('#edit-profile-location');
        const aboutInput = modalElement.querySelector('#edit-profile-about');
        const linkedinInput = modalElement.querySelector('#edit-profile-linkedin');
        const instagramInput = modalElement.querySelector('#edit-profile-instagram');
        const facebookInput = modalElement.querySelector('#edit-profile-facebook');
        const tagsSelect = modalElement.querySelector('#edit-profile-tags');

        const newName = nameInput.value.trim();
        const newLocation = locationInput.value.trim();
        const newAbout = aboutInput.value.trim();
        const newLinkedin = linkedinInput.value.trim();
        const newInstagram = instagramInput.value.trim();
        const newFacebook = facebookInput.value.trim();
        const selectedTags = tagsSelect && window.$ ? $(tagsSelect).val() || [] : [];

        let isValid = true;
        [nameInput, locationInput, aboutInput].forEach(input =>
        {
          if (!input.value.trim()) isValid = false;
        });

        if (!isValid)
        {
          showToast('Por favor, preencha os campos obrigatórios corretamente.', 'error');
          return;
        }

        // Validar limites de caracteres
        if (newName.length > 100)
        {
          showToast('Nome da empresa deve ter no máximo 100 caracteres.', 'error');
          nameInput.classList.add('input-error');
          nameInput.focus();
          return;
        }

        if (newLocation.length > 30)
        {
          showToast('Localização deve ter no máximo 30 caracteres.', 'error');
          locationInput.classList.add('input-error');
          locationInput.focus();
          return;
        }

        if (newAbout.length > 500)
        {
          showToast('Descrição deve ter no máximo 500 caracteres.', 'error');
          aboutInput.classList.add('input-error');
          aboutInput.focus();
          return;
        }

        try
        {
          // Fazer upload da imagem se houver uma pendente
          if (profileUploader && profileUploader.hasPendingUpload()) {
            console.log('Fazendo upload da imagem de perfil...');
            const uploadResult = await profileUploader.uploadPendingImage();
            if (!uploadResult.success) {
              throw new Error('Erro ao fazer upload da imagem: ' + uploadResult.message);
            }
          }

          const response = await fetch('/profile/alterar-perfil', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              name: newName,
              city: newLocation,
              description: newAbout,
              linkedin: newLinkedin,
              instagram: newInstagram,
              facebook: newFacebook,
              tags: selectedTags
            })
          });

          if (!response.ok)
          {
            if (response.status === 401) {
              showToast('Sua sessão expirou. Redirecionando...', 'error');
              setTimeout(() => window.location.href = '/login', 2000);
              return;
            }
            
            let errorMessage = 'Erro ao atualizar perfil';
            try {
              const errorData = await response.json();
              errorMessage = errorData.message || errorMessage;
            } catch (e) {
              // Se não conseguir fazer parse do JSON, usa mensagem padrão
            }
            
            throw new Error(errorMessage);
          }

          const res = await response.json();

          if (profileNameElement) profileNameElement.textContent = newName;
          if (profileLocationElement) profileLocationElement.innerHTML = newLocation;
          if (profileAboutElement) profileAboutElement.textContent = newAbout;

          const socialIcons = document.querySelector('.social-icons');
          if (socialIcons)
          {
            socialIcons.innerHTML = '';
            if (newLinkedin)
            {
              socialIcons.innerHTML += `
                <a href="${ newLinkedin }" target="_blank" rel="noopener noreferrer" class="social-icon linkedin" aria-label="LinkedIn">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"/>
                    <rect width="4" height="12" x="2" y="9"/>
                    <circle cx="4" cy="4" r="2"/>
                  </svg>
                </a>`;
            }
            if (newInstagram)
            {
              socialIcons.innerHTML += `
                <a href="${ newInstagram }" target="_blank" rel="noopener noreferrer" class="social-icon instagram" aria-label="Instagram">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect width="20" height="20" x="2" y="2" rx="5" ry="5"/>
                    <path d="m16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"/>
                    <line x1="17.5" x2="17.51" y1="6.5" y2="6.5"/>
                  </svg>
                </a>`;
            }
            if (newFacebook)
            {
              socialIcons.innerHTML += `
                <a href="${ newFacebook }" target="_blank" rel="noopener noreferrer" class="social-icon facebook" aria-label="Facebook">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"/>
                  </svg>
                </a>`;
            }
          }

          closeModal(modalOverlay);
          showToast('Perfil atualizado com sucesso!');
        } catch (error)
        {
          console.error('Error updating profile:', error);
          showToast(`Erro ao atualizar perfil: ${error.message}`, 'error');
        }
      });
    }

    if (editProfileButton)
    {
      editProfileButton.addEventListener('click', setupEditProfileModal);
    } else
    {
      console.warn("Botão 'Editar Perfil' (#edit-profile-btn) não encontrado.");
    }

    function setupEditEventModal(eventCard, eventData)
    {
      const eventId = eventData.id;
      const formattedDate = formatDateForInput(eventData.date);

      const modalHTML = `
                <button type="button" class="modal-close-btn" aria-label="Fechar modal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
                <h2 id="edit-event-heading">Editar Evento</h2>
                <form id="edit-event-form" novalidate>
                    <div class="form-group"> <label for="edit-event-title">Título do Evento</label> <input type="text" id="edit-event-title" value="${ eventData.title }" maxlength="60" required> </div>
                    <div class="form-group"> <label for="edit-event-date">Data do Evento</label> <input type="date" id="edit-event-date" value="${ formattedDate }" required> </div>
                    <div class="form-group"> <label for="edit-event-description">Descrição (Opcional)</label> <textarea id="edit-event-description" rows="3">${ eventData.description || '' }</textarea> </div>
                    <div class="form-group"> 
                      <label>Imagem do Evento (Opcional)</label> 
                      <div id="edit-event-image-uploader"></div> 
                    </div>
                    <div class="button-group">
                        <button type="button" class="btn btn-delete" id="delete-event-btn">Excluir</button>
                        <div>
                            <button type="button" class="btn btn-cancel">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                        </div>
                    </div>
                </form>`;

      const modalElement = openModal('.edit-event-overlay', 'edit-event-modal', modalHTML, eventCard);
      if (!modalElement) return;

      // Inicializar componente de upload de imagem de evento para edição
      let currentImageUrl = eventData.imageUrl; // Inicializar com a imagem atual
      const editEventUploader = createImageUploader({
        containerId: 'edit-event-image-uploader',
        uploadEndpoint: '/upload/event/photo',
        currentImageUrl: eventData.imageUrl,
        label: 'Escolher Imagem',
        onSuccess: (result) => {
          // Não atualizar currentImageUrl aqui - será feito no upload pendente
        },
        onError: (error) => {
          console.error('💥 [EVENT DEBUG] Erro no upload de evento:', error);
        }
      });

      const editEventForm = modalElement.querySelector('#edit-event-form');
      const editTitleInput = modalElement.querySelector('#edit-event-title');
      const editDateInput = modalElement.querySelector('#edit-event-date');
      const editDescriptionInput = modalElement.querySelector('#edit-event-description');
      const deleteEventBtn = modalElement.querySelector('#delete-event-btn');

      deleteEventBtn?.addEventListener('click', async function ()
      {
        const confirmDelete = confirm(`Tem certeza que deseja excluir o evento "${ eventData.title }"?`);
        if (confirmDelete)
        {
          try
          {
            const response = await fetch(`${ API_BASE_URL }/deletar-evento/${ eventId }`, {
              method: 'DELETE',
            });

            if (!response.ok)
            {
              const errorData = await response.json();
              throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
            }

            showToast(`Evento "${ eventData.title }" excluído com sucesso!`, 'success');
            closeModal(modalElement.closest('.modal-overlay'));
            await loadEvents();
          } catch (error)
          {
            console.error("Erro ao excluir evento:", error);
            showToast('Erro ao excluir evento. Tente novamente.', 'error');
          }
        }
      });

      editEventForm?.addEventListener('submit', async function (e)
      {
        e.preventDefault();
        const modalOverlay = modalElement.closest('.modal-overlay');

        const newTitle = editTitleInput.value.trim();
        const newDate = editDateInput.value;
        const newDescription = editDescriptionInput.value.trim();

        if (!newTitle || !newDate)
        {
          showToast('Título e Data são obrigatórios.', 'warning');
          if (!newTitle) editTitleInput.focus(); else editDateInput.focus();
          return;
        }

        if (newTitle.length > 60)
        {
          showToast('Título do evento deve ter no máximo 60 caracteres.', 'error');
          editTitleInput.focus();
          return;
        }

        const updatedEventData = {
          title: newTitle,
          date: newDate,
          description: newDescription,
          imageUrl: currentImageUrl,
          establishmentid: eventData.establishmentid
        };

        // Fazer upload da imagem se houver uma pendente
        let finalImageUrl = currentImageUrl;
        if (editEventUploader && editEventUploader.hasPendingUpload()) {
          const uploadResult = await editEventUploader.uploadPendingImage();
          if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
            finalImageUrl = uploadResult.imageUrl;
          } else {
            throw new Error('Erro ao fazer upload da imagem: ' + (uploadResult.message || 'Erro desconhecido'));
          }
        }

        const eventDataToUpdate = {
          title: newTitle,
          date: newDate,
          description: newDescription,
          imageUrl: finalImageUrl,
          establishmentid: eventData.establishmentid
        };



        try
        {
          const response = await fetch(`${ API_BASE_URL }/atualizar-evento/${ eventId }`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(eventDataToUpdate),
          });

          if (!response.ok)
          {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
          }
          const updatedEvent = await response.json();

          showToast(`Evento "${ updatedEvent.title }" atualizado com sucesso!`);
          closeModal(modalOverlay);
          if (isProfileOwner) {
            await loadEvents();
          }
        } catch (error)
        {
          console.error("Erro ao atualizar evento:", error);
          showToast('Erro ao atualizar evento. Tente novamente.', 'error');
        }
      });
    }

    const response = await fetch('/profile/tags')
    const res = await response.json()

    res.tags.forEach(tag =>
    {
      availableTags.push({ id: tag.id, name: tag.name })
    })

    if (addServiceRequestButton && serviceRequestsContainer)
    {
      addServiceRequestButton.addEventListener('click', handleAddServiceRequestClick);
    } else
    {
      console.warn("Elementos necessários para 'Adicionar Pedido de Serviço' não encontrados.");
    }

    if (reportProfileButton)
    {
      reportProfileButton.addEventListener('click', handleReportProfileClick);
    } else
    {
      console.log("Botão 'Denunciar Perfil' não encontrado (usuário é o proprietário do perfil).");
    }

    function handleAddServiceRequestClick()
    {
      const modalHTML = `
                <button type="button" class="modal-close-btn" aria-label="Fechar modal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
                <h2 id="add-service-request-heading">Adicionar Novo Pedido de Serviço</h2>
                <form id="add-service-request-form" novalidate>
                    <div class="form-group"> <label for="request-name">Nome do Pedido</label> <input type="text" id="request-name" required> </div>
                    <div class="form-group"> <label for="request-description">Descrição do Pedido (Opcional)</label> <textarea id="request-description" rows="3"></textarea> </div>
                    <div class="form-group"> <label for="request-date">Data</label> <input type="date" id="request-date" required> </div>
                    <div class="form-group"> <label for="request-start-time">Hora de Início</label> <input type="time" id="request-start-time" required> </div>
                    <div class="form-group"> <label for="request-end-time">Hora de Término (Opcional)</label> <input type="time" id="request-end-time"> </div>
                    <div class="form-group">
                        <label for="request-tags">Tags</label>
                        <select id="request-tags" class="select2-hidden-accessible" multiple="multiple" style="width: 100%;">
                            </select>
                    </div>
                    <div class="button-group"> <button type="button" class="btn btn-cancel">Cancelar</button> <button type="submit" class="btn btn-primary">Adicionar Pedido</button> </div>
                </form>`;

      const modalElement = openModal('.add-service-request-overlay', 'add-service-request-modal', modalHTML, addServiceRequestButton);
      if (!modalElement) return;

      const tagsSelect = modalElement.querySelector('#request-tags');

      availableTags.forEach(tag =>
      {
        const option = document.createElement('option');
        option.value = tag.id;
        option.textContent = tag.name;
        tagsSelect.appendChild(option);
      });

      if (typeof jQuery !== 'undefined' && typeof jQuery.fn.select2 !== 'undefined')
      {
        $(tagsSelect).select2({
          placeholder: "Selecione as tags relevantes",
          allowClear: true,
          tags: true,
          tokenSeparators: [',', ' ']
        });
        console.log('Select2 inicializado para request-tags.');
      } else
      {
        console.warn('jQuery ou Select2 não estão disponíveis. O Select2 não será inicializado.');
      }


      const addServiceRequestForm = modalElement.querySelector('#add-service-request-form');
      addServiceRequestForm?.addEventListener('submit', async function (e)
      {
        e.preventDefault();
        const requestNameInput = modalElement.querySelector('#request-name');
        const requestDescriptionInput = modalElement.querySelector('#request-description');
        const requestDateInput = modalElement.querySelector('#request-date');
        const requestStartTimeInput = modalElement.querySelector('#request-start-time');
        const requestEndTimeInput = modalElement.querySelector('#request-end-time');
        const modalOverlay = modalElement.closest('.modal-overlay');

        const requestName = requestNameInput.value.trim();
        const requestDate = requestDateInput.value;
        const requestStartTime = requestStartTimeInput.value.trim();
        const requestEndTime = requestEndTimeInput.value.trim();
        const selectedTags = $(tagsSelect).val() || [];

        if (!requestName || !requestDate || !requestStartTime)
        {
          showToast('Nome, Data e Hora de Início são obrigatórios.', 'warning');
          if (!requestName) requestNameInput.focus();
          else if (!requestDate) requestDateInput.focus();
          else requestStartTimeInput.focus();
          return;
        }

        const newRequestData = {
          name: requestName,
          description: requestDescriptionInput.value.trim(),
          date: requestDate,
          startTime: requestStartTime,
          endTime: requestEndTime,
          tags: selectedTags
        };

        try
        {
          const response = await fetch(`${ API_BASE_URL }/criar-pedido-servico`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(newRequestData),
          });

          if (!response.ok)
          {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
          }
          const addedRequest = await response.json();

          showToast(`Pedido "${ addedRequest.name }" adicionado com sucesso!`);
          closeModal(modalOverlay);
          await loadServiceRequests();
        } catch (error)
        {
          console.error("Erro ao adicionar pedido de serviço:", error);
          showToast('Erro ao adicionar pedido de serviço. Tente novamente.', 'error');
        }
      });
    }

    function handleReportProfileClick()
    {
      const userId = reportProfileButton.dataset.userId;
      const modalHTML = `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
        <h2>Denunciar Perfil</h2>
        <form id="report-profile-form">
          <div class="form-group">
            <label for="report-reason">Motivo da denúncia *</label>
            <select id="report-reason" name="reason" required>
              <option value="">Selecione um motivo</option>
              <option value="spam">Spam ou conteúdo repetitivo</option>
              <option value="fake">Perfil falso ou enganoso</option>
              <option value="harassment">Assédio ou bullying</option>
              <option value="inappropriate">Conteúdo inapropriado</option>
              <option value="copyright">Violação de direitos autorais</option>
              <option value="other">Outro</option>
            </select>
          </div>
          <div class="form-group">
            <label for="report-description">Descrição detalhada</label>
            <textarea id="report-description" name="description" rows="4" placeholder="Descreva o problema em detalhes (opcional)"></textarea>
          </div>
          <div class="button-group">
            <button type="button" class="btn btn-cancel">Cancelar</button>
            <button type="submit" class="btn btn-primary">Enviar Denúncia</button>
          </div>
        </form>
      `;

      const modalElement = openModal('.report-profile-overlay', 'report-profile-modal', modalHTML, reportProfileButton);
      if (!modalElement) return;

      const form = modalElement.querySelector('#report-profile-form');
      const reasonSelect = modalElement.querySelector('#report-reason');
      const descriptionTextarea = modalElement.querySelector('#report-description');
      const modalOverlay = modalElement.closest('.modal-overlay');

      form?.addEventListener('submit', async (e) =>
      {
        e.preventDefault();

        const reason = reasonSelect.value;
        const description = descriptionTextarea.value;

        if (!reason)
        {
          reasonSelect.classList.add('input-error');
          showToast('Por favor, selecione um motivo para a denúncia.', 'error');
          return;
        }

        try
        {
          const response = await fetch('/api/reports', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              reportedUserId: userId,
              reason: reason,
              description: description
            })
          });

          if (response.ok)
          {
            showToast('Denúncia enviada com sucesso. Obrigado por nos ajudar a manter a comunidade segura.', 'success');
            closeModal(modalOverlay);
          } else
          {
            const errorData = await response.json();
            showToast(errorData.message || 'Erro ao enviar denúncia. Tente novamente.', 'error');
          }
        } catch (error)
        {
          console.error('Erro ao enviar denúncia:', error);
          showToast('Erro de conexão. Verifique sua internet e tente novamente.', 'error');
        }
      });

      reasonSelect?.addEventListener('change', () => reasonSelect.classList.remove('input-error'));
    }

    function setupEditServiceRequestModal(requestCard, requestData)
    {
      
      const requestId = requestData.id;
      const formattedDate = formatDateForInput(requestData.date);

      const modalHTML = `
                <button type="button" class="modal-close-btn" aria-label="Fechar modal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
                <h2 id="edit-service-request-heading">Editar Pedido de Serviço</h2>
                <form id="edit-service-request-form" novalidate>
                    <div class="form-group"> <label for="edit-request-name">Nome do Pedido</label> <input type="text" id="edit-request-name" value="${ requestData.name }" required> </div>
                    <div class="form-group"> <label for="edit-request-description">Descrição do Pedido (Opcional)</label> <textarea id="edit-request-description" rows="3">${ requestData.description || '' }</textarea> </div>
                    <div class="form-group"> <label for="edit-request-date">Data</label> <input type="date" id="edit-request-date" value="${ formattedDate }" required> </div>
                    <div class="form-group"> <label for="edit-request-start-time">Hora de Início</label> <input type="time" id="edit-request-start-time" value="${ requestData.startTime }" required> </div>
                    <div class="form-group"> <label for="edit-request-end-time">Hora de Término (Opcional)</label> <input type="time" id="edit-request-end-time" value="${ requestData.endTime || '' }"> </div>
                    <div class="form-group">
                        <label for="edit-request-tags">Tags</label>
                        <select id="edit-request-tags" class="select2-hidden-accessible" multiple="multiple" style="width: 100%;">
                            </select>
                    </div>
                    <div class="button-group">
                        <button type="button" class="btn btn-delete" id="delete-service-request-btn">Excluir</button>
                        <div>
                            <button type="button" class="btn btn-cancel">Cancelar</button>
                            <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                        </div>
                    </div>
                </form>`;

      const modalElement = openModal('.edit-service-request-overlay', 'edit-service-request-modal', modalHTML, requestCard);
      if (!modalElement) return;

      const tagsSelect = modalElement.querySelector('#edit-request-tags');
      availableTags.forEach(tag =>
      {
        const option = document.createElement('option');
        option.value = tag.id;
        option.textContent = tag.name;
        if (requestData.Tags && requestData.Tags.some(selectedTag => selectedTag.id === tag.id))
        {
          option.selected = true;
        }
        tagsSelect.appendChild(option);
      });

      if (typeof jQuery !== 'undefined' && typeof jQuery.fn.select2 !== 'undefined')
      {
        $(tagsSelect).select2({
          placeholder: "Selecione as tags relevantes",
          allowClear: true,
          tags: true,
          tokenSeparators: [',', ' ']
        });
        console.log('Select2 inicializado para edit-request-tags.');
      }

      const editServiceRequestForm = modalElement.querySelector('#edit-service-request-form');
      const editNameInput = modalElement.querySelector('#edit-request-name');
      const editDescriptionInput = modalElement.querySelector('#edit-request-description');
      const editDateInput = modalElement.querySelector('#edit-request-date');
      const editStartTimeInput = modalElement.querySelector('#edit-request-start-time');
      const editEndTimeInput = modalElement.querySelector('#edit-request-end-time');
      const deleteServiceRequestBtn = modalElement.querySelector('#delete-service-request-btn');

      deleteServiceRequestBtn?.addEventListener('click', async function ()
      {
        const confirmDelete = confirm(`Tem certeza que deseja excluir o pedido de serviço "${ requestData.name }"?`);
        if (confirmDelete)
        {
          try
          {
            const response = await fetch(`${ API_BASE_URL }/deletar-pedido-servico/${ requestId }`, {
              method: 'DELETE',
            });

            if (!response.ok)
            {
              const errorData = await response.json();
              throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
            }

            showToast(`Pedido "${ requestData.name }" excluído com sucesso!`, 'success');
            closeModal(modalElement.closest('.modal-overlay'));
            await loadServiceRequests();
          } catch (error)
          {
            console.error("Erro ao excluir pedido de serviço:", error);
            showToast('Erro ao excluir pedido de serviço. Tente novamente.', 'error');
          }
        }
      });


      editServiceRequestForm?.addEventListener('submit', async function (e)
      {
        e.preventDefault();
        const modalOverlay = modalElement.closest('.modal-overlay');

        const newName = editNameInput.value.trim();
        const newDescription = editDescriptionInput.value.trim();
        const newDate = editDateInput.value;
        const newStartTime = editStartTimeInput.value.trim();
        const newEndTime = editEndTimeInput.value.trim();
        const newSelectedTags = $(tagsSelect).val() || [];

        if (!newName || !newDate || !newStartTime)
        {
          showToast('Nome, Data e Hora de Início são obrigatórios.', 'warning');
          if (!newName) editNameInput.focus();
          else if (!newDate) editDateInput.focus();
          else editStartTimeInput.focus();
          return;
        }

        const updatedRequestData = {
          name: newName,
          description: newDescription,
          date: newDate,
          startTime: newStartTime,
          endTime: newEndTime,
          tags: newSelectedTags,
          establishmentid: requestData.establishmentid
        };

        try
        {
          const response = await fetch(`${ API_BASE_URL }/atualizar-pedido-servico/${ requestId }`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedRequestData),
          });

          if (!response.ok)
          {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${ response.status }, message: ${ errorData.message }`);
          }
          const updatedRequest = await response.json();

          showToast(`Pedido "${ updatedRequest.name }" atualizado com sucesso!`);
          closeModal(modalOverlay);
          await loadServiceRequests();
        } catch (error)
        {
          console.error("Erro ao atualizar pedido de serviço:", error);
          showToast('Erro ao atualizar pedido de serviço. Tente novamente.', 'error');
        }
      });
    }

    // Função para configurar scroll horizontal com roda do mouse
    function setupHorizontalScroll() {
      const scrollContainers = document.querySelectorAll('.scroll-container');
      
      scrollContainers.forEach(container => {
        container.addEventListener('wheel', (e) => {
          // Prevenir o scroll vertical padrão
          e.preventDefault();
          
          // Calcular a quantidade de scroll horizontal
          // deltaY positivo = scroll para baixo = mover para direita
          // deltaY negativo = scroll para cima = mover para esquerda
          const scrollAmount = e.deltaY;
          
          // Aplicar scroll horizontal
          container.scrollLeft += scrollAmount;
        }, { passive: false });
      });
    }

    document.getElementById('create-chat-btn')?.addEventListener('click', async function ()
    {
      const userId = this.dataset.userId;
      try
      {
        const response = await fetch(`/chat/create/${ userId }`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });

        if (response.redirected)
        {
          window.location.href = response.url;
        } else
        {
          const data = await response.json();
          if (response.ok)
          {
            window.location.href = `/chat/${ data.chatId }`;
          } else
          {
            showToast(data.message || 'Erro ao criar chat', 'error');
          }
        }
      } catch (error)
      {
        console.error('Erro ao criar chat:', error);
        showToast('Erro ao criar chat', 'error');
      }
    });

    // Configurar scroll horizontal
    setupHorizontalScroll();

    // Funcionalidade para lidar com reviews
    const viewAllReviewsBtn = document.getElementById('view-all-reviews-btn');
    if (viewAllReviewsBtn) {
      viewAllReviewsBtn.addEventListener('click', async function() {
        const userId = this.dataset.userId;
        try {
          const response = await fetch(`/profile/reviews/${userId}`);
          const data = await response.json();
          
          if (response.ok) {
            displayAllReviews(data.reviews);
          } else {
            showToast('Erro ao carregar todas as avaliações', 'error');
          }
        } catch (error) {
          console.error('Erro ao buscar reviews:', error);
          showToast('Erro ao carregar todas as avaliações', 'error');
        }
      });
    }

    function displayAllReviews(reviews) {
      const container = document.getElementById('reviews-container');
      container.innerHTML = '';
      
      reviews.forEach(review => {
        const li = document.createElement('li');
        li.className = 'review-card';
        
        let starsHtml = '';
        for (let i = 1; i <= 5; i++) {
          starsHtml += `<span class="star ${i <= review.rating ? 'filled' : ''}">★</span>`;
        }
        
        li.innerHTML = `
          <div class="review-header">
            <div class="reviewer-info">
              <a href="/profile/${review.senderId}" class="reviewer-link">
                <img src="${review.senderImageUrl || '/img/default.jpg'}" 
                     alt="${review.senderName}" class="reviewer-avatar">
                <h3>${review.senderName}</h3>
              </a>
            </div>
            <div class="review-stars">
              ${starsHtml}
            </div>
          </div>
          <p class="review-text">${review.description}</p>
        `;
        
        container.appendChild(li);
      });
    }

    // Configurar scroll horizontal
    setupHorizontalScroll();
  });
</script>
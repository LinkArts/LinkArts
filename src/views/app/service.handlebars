<div class="all">
    <main class="service-container">
        <section class="service-details-grid">
            <div class="card profile-info-card">
                <div class="profile-img">
                    <img id="requester-profile-img" src="{{service.requester.profileImg}}"
                        alt="Foto do Solicitante">
                </div>
                <div>
                    <h3 id="requester-name">{{service.requester.name}} (Solicitante)</h3>
                    <p id="requester-contact">Email: {{service.requester.email}}</p>
                    <p id="requester-location">Cidade: {{service.requester.location}}</p>
                </div>
            </div>

            <div class="card service-main-card">
                <h3 class="card-header" id="service-title">{{service.title}}</h3>
                <div class="details-group">
                    <p><strong>Tipo de Serviço:</strong> <span id="service-type">{{service.type}}</span></p>
                    <p><strong>Descrição:</strong> <span id="service-description">{{service.description}}</span></p>
                    <p><strong>Data Desejada:</strong> <span id="service-date">{{service.date}}</span></p>
                    <p><strong>Orçamento:</strong> <span id="service-budget">R$ {{service.budget}}</span></p>
                    <p><strong>Status Atual:</strong> <span id="service-current-status"
                            style="color: var(--star-rating-color); font-weight: bold;">{{service.status}}</span></p>
                </div>

                <div class="service-actions" id="service-action-buttons">
                    <button class="btn btn-success" id="confirm-service-btn">Confirmar Serviço</button>
                    <button class="btn btn-danger" id="cancel-service-btn">Cancelar Serviço</button>
                </div>
                <p id="confirmation-message" class="feedback-message" style="display: none;"></p>
            </div>

            {{#if service.provider}}
            <div class="card profile-info-card">
                <div class="profile-img">
                    <img id="provider-profile-img" src="{{service.provider.profileImg}}"
                        alt="Foto do Prestador">
                </div>
                <div>
                    <h3 id="provider-name">{{service.provider.name}} (Prestador)</h3>
                    <p id="provider-contact">Email: {{service.provider.email}}</p>
                    <p id="provider-location">Cidade: {{service.provider.location}}</p>
                </div>
            </div>
            {{/if}}
        </section>

        {{#unless service.hasBeenReviewed}}
        <section class="review-section" id="review-section">
            <h3>Avaliar Serviço</h3>
            <form id="review-form">
                <div class="form-group">
                    <label for="rating">Nota:</label>
                    <div class="star-rating" id="star-rating">
                        <span class="star" data-value="1">&#9733;</span>
                        <span class="star" data-value="2">&#9733;</span>
                        <span class="star" data-value="3">&#9733;</span>
                        <span class="star" data-value="4">&#9733;</span>
                        <span class="star" data-value="5">&#9733;</span>
                    </div>
                    <input type="hidden" id="rating-input" name="rating" value="0">
                </div>
                <div class="form-group">
                    <label for="review-text">Comentário:</label>
                    <textarea id="review-text" name="review-text"
                        placeholder="Descreva sua experiência com o serviço..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Enviar Avaliação</button>
                <p id="review-feedback-message" class="feedback-message" style="display: none;"></p>
            </form>
        </section>
        {{/unless}}
    </main>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () =>
    {
        // Dados do serviço vindo do backend
        const serviceData = {{{json service}}};

        // --- Referências aos Elementos DOM ---
        const serviceTitleElem = document.getElementById('service-title');
        const serviceCurrentStatusElem = document.getElementById('service-current-status');

        const requesterProfileImg = document.getElementById('requester-profile-img');
        const requesterName = document.getElementById('requester-name');
        const requesterContact = document.getElementById('requester-contact');
        const requesterLocation = document.getElementById('requester-location');

        const serviceType = document.getElementById('service-type');
        const serviceDescription = document.getElementById('service-description');
        const serviceDate = document.getElementById('service-date');
        const serviceBudget = document.getElementById('service-budget');

        const providerProfileImg = document.getElementById('provider-profile-img');
        const providerName = document.getElementById('provider-name');
        const providerContact = document.getElementById('provider-contact');
        const providerLocation = document.getElementById('provider-location');

        const serviceActionButtons = document.getElementById('service-action-buttons');
        const confirmServiceBtn = document.getElementById('confirm-service-btn');
        const cancelServiceBtn = document.getElementById('cancel-service-btn');
        const confirmationMessage = document.getElementById('confirmation-message');

        const reviewSection = document.getElementById('review-section');
        const starRatingContainer = document.getElementById('star-rating');
        const ratingInput = document.getElementById('rating-input');
        const reviewText = document.getElementById('review-text');
        const reviewForm = document.getElementById('review-form');
        const reviewFeedbackMessage = document.getElementById('review-feedback-message');

        let currentRating = 0;

        // --- Funções de Renderização e Lógica da UI ---

        function getStatusColor(status)
        {
            switch (status)
            {
                case 'Pendente': return 'var(--star-rating-color)';
                case 'Confirmado': return '#17a2b8';
                case 'Concluído': return '#28a745';
                case 'Cancelado': return '#dc3545';
                default: return 'var(--secondary-text-color)';
            }
        }

        function updateActionButtons()
        {
            if (serviceData.status === 'Pendente')
            {
                serviceActionButtons.style.display = 'flex';
                confirmServiceBtn.disabled = false;
                cancelServiceBtn.disabled = false;
            } else
            {
                serviceActionButtons.style.display = 'none';
                confirmationMessage.style.display = 'block';
                if (serviceData.status === 'Confirmado' || serviceData.status === 'Concluído')
                {
                    confirmationMessage.textContent = 'Serviço confirmado por ambas as partes.';
                    confirmationMessage.className = 'feedback-message success';
                } else if (serviceData.status === 'Cancelado')
                {
                    confirmationMessage.textContent = 'Este serviço foi cancelado.';
                    confirmationMessage.className = 'feedback-message error';
                }
            }
        }

        function updateReviewSectionVisibility()
        {
            if (serviceData.status === 'Confirmado' && !serviceData.hasBeenReviewed)
            {
                reviewSection.classList.add('active');
            } else
            {
                reviewSection.classList.remove('active');
            }
        }

        // --- Event Listeners ---

        confirmServiceBtn.addEventListener('click', async () =>
        {
            if (confirm('Tem certeza que deseja CONFIRMAR este serviço?'))
            {
                try {
                    const response = await fetch(`/api/service/${serviceData.id}/confirm`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Erro ao confirmar serviço');
                    }

                    const result = await response.json();
                    serviceData.status = 'Confirmado';
                    serviceData.isRequesterConfirmed = true;
                    serviceData.isProviderConfirmed = true;

                    alert('Serviço confirmado! Aguardando a outra parte...');
                    updateActionButtons();
                    updateReviewSectionVisibility();
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao confirmar serviço. Tente novamente.');
                }
            }
        });

        cancelServiceBtn.addEventListener('click', async () =>
        {
            if (confirm('Tem certeza que deseja CANCELAR este serviço? Esta ação não pode ser desfeita.'))
            {
                try {
                    const response = await fetch(`/api/service/${serviceData.id}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Erro ao cancelar serviço');
                    }

                    serviceData.status = 'Cancelado';
                    alert('Serviço cancelado.');
                    updateActionButtons();
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao cancelar serviço. Tente novamente.');
                }
            }
        });

        // Lógica de Avaliação por Estrelas
        starRatingContainer.addEventListener('mouseover', (e) =>
        {
            if (e.target.classList.contains('star'))
            {
                const value = parseInt(e.target.dataset.value);
                Array.from(starRatingContainer.children).forEach(star =>
                {
                    star.classList.toggle('selected', parseInt(star.dataset.value) <= value);
                });
            }
        });

        starRatingContainer.addEventListener('mouseout', () =>
        {
            Array.from(starRatingContainer.children).forEach(star =>
            {
                star.classList.toggle('selected', parseInt(star.dataset.value) <= currentRating);
            });
        });

        starRatingContainer.addEventListener('click', (e) =>
        {
            if (e.target.classList.contains('star'))
            {
                currentRating = parseInt(e.target.dataset.value);
                ratingInput.value = currentRating;
                Array.from(starRatingContainer.children).forEach(star =>
                {
                    star.classList.toggle('selected', parseInt(star.dataset.value) <= currentRating);
                });
            }
        });

        reviewForm.addEventListener('submit', async (e) =>
        {
            e.preventDefault();

            const rating = ratingInput.value;
            const reviewTextValue = reviewText.value.trim();

            if (rating === '0')
            {
                showFeedbackMessage(reviewFeedbackMessage, 'Por favor, selecione uma nota para o serviço.', 'error');
                return;
            }
            if (reviewTextValue === '')
            {
                showFeedbackMessage(reviewFeedbackMessage, 'Por favor, digite seu comentário para a avaliação.', 'error');
                return;
            }

            try {
                const response = await fetch('/api/reviews', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        serviceId: serviceData.id,
                        rating: parseInt(rating),
                        comment: reviewTextValue
                    })
                });

                if (!response.ok) {
                    throw new Error('Erro ao enviar avaliação');
                }

                serviceData.hasBeenReviewed = true;
                showFeedbackMessage(reviewFeedbackMessage, 'Avaliação enviada com sucesso!', 'success');
                reviewForm.reset();
                currentRating = 0;
                Array.from(starRatingContainer.children).forEach(star => star.classList.remove('selected'));
                updateReviewSectionVisibility();
            } catch (error) {
                console.error('Erro:', error);
                showFeedbackMessage(reviewFeedbackMessage, 'Erro ao enviar avaliação. Tente novamente.', 'error');
            }
        });

        function showFeedbackMessage(element, message, type)
        {
            element.textContent = message;
            element.className = `feedback-message ${type}`;
            element.style.display = 'block';
            setTimeout(() =>
            {
                element.style.display = 'none';
            }, 5000);
        }

        // Inicialização
        updateActionButtons();
        updateReviewSectionVisibility();
    });
</script>
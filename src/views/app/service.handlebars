<div class="all">
    <main class="service-container">
        <section class="service-details-grid">
            <div class="card profile-info-card">
                <div class="profile-img">
                    <img id="requester-profile-img"
                        src="/img/default.jpg"
                        alt="Foto do Solicitante">
                </div>
                <div>
                    <h3 id="requester-name">{{service.artist.name}}</h3>
                    <div class="artist-rating" aria-label="Avaliação: 4.8 de 5 estrelas (baseado em 32 avaliações)"
                        style="margin-bottom: 10px;">
                        <span class="star" aria-hidden="true">★</span>
                        <span class="rating-value">{{service.artist.averageRating}}</span>
                        <span class="reviews-count">({{service.artist.totalRatings}})</span>
                    </div>
                    <p id="requester-contact" class="">Descrição: {{#if service.artist.description}}
                        {{service.artist.description}} {{else}} Descrição não informada. {{/if}}</p>
                    <p id="requester-location">Cidade: {{service.artist.city}}</p>
                </div>
            </div>

            <div class="card service-main-card">
                <h3 class="card-header" id="service-title">{{service.title}}</h3>
                <div class="details-group">
                    <p><strong>Descrição:</strong> <span id="service-description">{{service.description}}</span></p>
                    <p><strong>Data:</strong> <span id="service-date">{{service.date}}</span></p>
                    <p><strong>Horário:</strong> <span id="service-date">{{formatTime service.startTime}} - {{formatTime
                            service.endTime}}
                        </span></p>
                    <p><strong>Preço:</strong> <span id="service-budget">R$ {{service.price}}</span></p>
                    <p><strong>Status Atual:</strong>
                        {{#if (and (eq service.artistStatus 'confirmed') (eq service.establishmentStatus 'confirmed'))}}
                        <span id="service-current-status" class="status-text success">Confirmado</span>
                        {{else if (or (eq service.artistStatus 'cancelled') (eq service.establishmentStatus
                        'cancelled'))}}
                        <span id="service-current-status" class="status-text error">Cancelado</span>
                        {{else if (eq service.artistStatus 'confirmed')}}
                        <span id="service-current-status" class="status-text warning">Aguardando resposta do
                            estabelecimento</span>
                        {{else if (eq service.establishmentStatus 'confirmed')}}
                        <span id="service-current-status" class="status-text warning">Aguardando resposta do
                            artista</span>
                        {{else}}
                        <span id="service-current-status" class="status-text warning">Pendente</span>
                        {{/if}}
                    </p>
                </div>

                <div class="service-actions" id="service-action-buttons">
                    {{#if isArtist}}
                    {{#if (eq service.artistStatus 'pending')}}
                    <button class="btn btn-success" id="confirm-service-btn">Confirmar Serviço</button>
                    <button class="btn btn-danger" id="cancel-service-btn">Cancelar Serviço</button>
                    {{else if (eq service.artistStatus 'confirmed')}}
                    <p class="feedback-message success">Você já confirmou este serviço.</p>
                    {{else if (eq service.artistStatus 'cancelled')}}
                    <p class="feedback-message error">Você cancelou este serviço.</p>
                    {{/if}}
                    {{/if}}

                    {{#if isEstablishment}}
                    {{#if (eq service.establishmentStatus 'pending')}}
                    <button class="btn btn-success" id="confirm-service-btn">Confirmar Serviço</button>
                    <button class="btn btn-danger" id="cancel-service-btn">Cancelar Serviço</button>
                    {{else if (eq service.establishmentStatus 'confirmed')}}
                    <p class="feedback-message success">Você já confirmou este serviço.</p>
                    {{else if (eq service.establishmentStatus 'cancelled')}}
                    <p class="feedback-message error">Você cancelou este serviço.</p>
                    {{/if}}
                    {{/if}}
                </div>
                <p id="confirmation-message" class="feedback-message" style="display: none;"></p>
            </div>

            <div class="card profile-info-card">
                <div class="profile-img">
                    <img id="provider-profile-img"
                        src="/img/default.jpg"
                        alt="Foto do Solicitante">
                </div>
                <div>
                    <h3 id="provider-name">{{service.establishment.name}}</h3>
                    <div class="establishment-rating"
                        aria-label="Avaliação: 4.8 de 5 estrelas (baseado em 32 avaliações)"
                        style="margin-bottom: 10px;">
                        <span class="star" aria-hidden="true">★</span>
                        <span class="rating-value">{{service.establishment.averageRating}}</span>
                        <span class="reviews-count">({{service.establishment.totalRatings}})</span>
                    </div>
                    <p id="provider-contact" class="">Descrição: {{#if service.establishment.description}}
                        {{service.establishment.description}} {{else}} Descrição não informada. {{/if}}</p>
                    <p id="provider-location">Cidade: {{#if service.establishment.city}} {{service.establishment.city}}
                        {{else}} Cidade não informada. {{/if}}</p>
                </div>
            </div>
        </section>

        {{#if (and (eq service.artistStatus 'confirmed') (eq service.establishmentStatus 'confirmed'))}}
    {{#unless service.hasBeenReviewed}}
        <section class="review-section" id="review-section">
            <h3>Avaliar Serviço</h3>
            <form id="review-form">
                <div class="form-group">
                    <label for="rating">Nota:</label>
                    <div class="star-rating" id="star-rating">
                        <span class="star" data-value="1">&#9733;</span>
                        <span class="star" data-value="2">&#9733;</span>
                        <span class="star" data-value="3">&#9733;</span>
                        <span class="star" data-value="4">&#9733;</span>
                        <span class="star" data-value="5">&#9733;</span>
                    </div>
                    <input type="hidden" id="rating-input" name="rating" value="0">
                </div>
                <div class="form-group">
                    <label for="review-text">Comentário:</label>
                    <textarea id="review-text" name="review-text"
                        placeholder="Descreva sua experiência com o serviço..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Enviar Avaliação</button>
                <p id="review-feedback-message" class="feedback-message" style="display: none;"></p>
            </form>
        </section>
    {{else}}
        <p class="feedback-message success">Você já avaliou este serviço.</p>
    {{/unless}}
{{/if}}
    </main>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () =>
    {
        const serviceData = {{{ json service }}};

        const serviceTitleElem = document.getElementById('service-title');
        const serviceCurrentStatusElem = document.getElementById('service-current-status');

        const requesterProfileImg = document.getElementById('requester-profile-img');
        const requesterName = document.getElementById('requester-name');
        const requesterContact = document.getElementById('requester-contact');
        const requesterLocation = document.getElementById('requester-location');

        const serviceType = document.getElementById('service-type');
        const serviceDescription = document.getElementById('service-description');
        const serviceDate = document.getElementById('service-date');
        const serviceBudget = document.getElementById('service-budget');

        const providerProfileImg = document.getElementById('provider-profile-img');
        const providerName = document.getElementById('provider-name');
        const providerContact = document.getElementById('provider-contact');
        const providerLocation = document.getElementById('provider-location');

        const serviceActionButtons = document.getElementById('service-action-buttons');
        const confirmServiceBtn = document.getElementById('confirm-service-btn');
        const cancelServiceBtn = document.getElementById('cancel-service-btn');
        const confirmationMessage = document.getElementById('confirmation-message');

        const reviewSection = document.getElementById('review-section');
        const starRatingContainer = document.getElementById('star-rating');
        const ratingInput = document.getElementById('rating-input');
        const reviewText = document.getElementById('review-text');
        const reviewForm = document.getElementById('review-form');
        const reviewFeedbackMessage = document.getElementById('review-feedback-message');

        let currentRating = 0;

        updateReviewSectionVisibility()

        function getStatusColor(status)
        {
            switch (status)
            {
                case 'Pendente': return 'var(--star-rating-color)';
                case 'Confirmado': return '#17a2b8';
                case 'Concluído': return '#28a745';
                case 'Cancelado': return '#dc3545';
                default: return 'var(--secondary-text-color)';
            }
        }

        function updateActionButtons()
        {
            if (serviceData.artistStatus === 'pending' && serviceData.establishmentStatus === 'pending')
            {
                serviceActionButtons.style.display = 'flex';
                confirmServiceBtn.disabled = false;
                cancelServiceBtn.disabled = false;
            } else if (serviceData.artistStatus === 'confirmed' && serviceData.establishmentStatus === 'confirmed')
            {
                serviceActionButtons.style.display = 'none';
                const feedbackMessage = document.createElement('p');
                feedbackMessage.className = 'feedback-message success';
                feedbackMessage.textContent = 'Serviço confirmado por ambas as partes.\nRecarregue a página para avalia-lo!';
                serviceActionButtons.parentNode.appendChild(feedbackMessage);
            } else if (serviceData.artistStatus === 'confirmed' && serviceData.establishmentStatus === 'pending')
            {
                serviceActionButtons.style.display = 'none';
                const feedbackMessage = document.createElement('p');
                feedbackMessage.className = 'feedback-message warning';
                feedbackMessage.textContent = 'Aguardando resposta do estabelecimento.';
                serviceActionButtons.parentNode.appendChild(feedbackMessage);
            } else if (serviceData.artistStatus === 'pending' && serviceData.establishmentStatus === 'confirmed')
            {
                serviceActionButtons.style.display = 'none';
                const feedbackMessage = document.createElement('p');
                feedbackMessage.className = 'feedback-message warning';
                feedbackMessage.textContent = 'Aguardando resposta do artista.';
                serviceActionButtons.parentNode.appendChild(feedbackMessage);
            } else if (serviceData.artistStatus === 'cancelled' || serviceData.establishmentStatus === 'cancelled')
            {
                serviceActionButtons.style.display = 'none';
                const feedbackMessage = document.createElement('p');
                feedbackMessage.className = 'feedback-message error';
                feedbackMessage.textContent = 'Este serviço foi cancelado.';
                serviceActionButtons.parentNode.appendChild(feedbackMessage);
            } else
            {
                serviceActionButtons.style.display = 'none';
                const feedbackMessage = document.createElement('p');
                feedbackMessage.className = 'feedback-message warning';
                feedbackMessage.textContent = 'Status pendente.';
                serviceActionButtons.parentNode.appendChild(feedbackMessage);
            }
        }

        function updateReviewSectionVisibility()
        {
            if (serviceData.artistStatus === 'confirmed' && serviceData.establishmentStatus === 'confirmed')
            {
                reviewSection?.classList.add('active');
            }
        }

        if (confirmServiceBtn)
        {
            confirmServiceBtn.addEventListener('click', async () =>
            {
                if (confirm('Tem certeza que deseja CONFIRMAR este serviço?'))
                {
                    try
                    {
                        const response = await fetch(`/responder-servico/${ serviceData.id }`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action: 'confirm' }),
                        });

                        if (!response.ok) throw new Error('Erro ao confirmar serviço');

                        const result = await response.json();
                        serviceData.artistStatus = result.service.artistStatus;
                        serviceData.establishmentStatus = result.service.establishmentStatus;

                        updateActionButtons();
                        updateReviewSectionVisibility();
                    } catch (error)
                    {
                        console.error('Erro:', error);
                        alert('Erro ao confirmar serviço. Tente novamente.');
                    }
                }
            });
        }

        if (cancelServiceBtn)
        {
            cancelServiceBtn.addEventListener('click', async () =>
            {
                if (confirm('Tem certeza que deseja CANCELAR este serviço?'))
                {
                    try
                    {
                        const response = await fetch(`/responder-servico/${ serviceData.id }`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ action: 'cancel' }),
                        });

                        if (!response.ok) throw new Error('Erro ao cancelar serviço');

                        const result = await response.json();
                        serviceData.artistStatus = result.service.artistStatus;
                        serviceData.establishmentStatus = result.service.establishmentStatus;

                        updateActionButtons();
                    } catch (error)
                    {
                        console.error('Erro:', error);
                        alert('Erro ao cancelar serviço. Tente novamente.');
                    }
                }
            });
        }

        reviewForm?.addEventListener('submit', async (e) =>
        {
            e.preventDefault();

            const rating = ratingInput.value;
            const reviewTextValue = reviewText.value.trim();

            if (rating === '0')
            {
                showFeedbackMessage(reviewFeedbackMessage, 'Por favor, selecione uma nota para o serviço.', 'error');
                return;
            }
            if (reviewTextValue === '')
            {
                showFeedbackMessage(reviewFeedbackMessage, 'Por favor, digite seu comentário para a avaliação.', 'error');
                return;
            }

            try
            {
                const response = await fetch(`/avaliar-servico/${serviceData.id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        rating: parseInt(rating),
                        comment: reviewTextValue
                    })
                });

                if (!response.ok)
                {
                    throw new Error('Erro ao enviar avaliação');
                }

                serviceData.hasBeenReviewed = true;

                // Desativa os campos de avaliação
                reviewForm.querySelectorAll('input, textarea, button').forEach(field => {
                    field.disabled = true;
                });

                // Exibe a mensagem de sucesso permanentemente
                reviewFeedbackMessage.textContent = 'Avaliação enviada com sucesso!';
                reviewFeedbackMessage.className = 'feedback-message success';
                reviewFeedbackMessage.style.display = 'block';

                // Remove interatividade das estrelas
                starRatingContainer.removeEventListener('mouseover', handleStarHover);
                starRatingContainer.removeEventListener('click', handleStarClick);
                starRatingContainer.removeEventListener('mouseout', handleStarMouseOut);

                reviewForm.reset();
                currentRating = 0;
                Array.from(starRatingContainer.children).forEach(star => star.classList.remove('selected'));
                updateReviewSectionVisibility();
            } catch (error)
            {
                console.error('Erro:', error);
                showFeedbackMessage(reviewFeedbackMessage, 'Erro ao enviar avaliação. Tente novamente.', 'error');
            }
        });

        // Funções para manipular estrelas
        function handleStarHover(e)
        {
            if (e.target.classList.contains('star'))
            {
                const value = parseInt(e.target.dataset.value);
                Array.from(starRatingContainer.children).forEach(star =>
                {
                    star.classList.toggle('selected', parseInt(star.dataset.value) <= value);
                });
            }
        }

        function handleStarClick(e)
        {
            if (e.target.classList.contains('star'))
            {
                currentRating = parseInt(e.target.dataset.value);
                ratingInput.value = currentRating;
                Array.from(starRatingContainer.children).forEach(star =>
                {
                    star.classList.toggle('selected', parseInt(star.dataset.value) <= currentRating);
                });
            }
        }

        function handleStarMouseOut()
        {
            Array.from(starRatingContainer.children).forEach(star =>
            {
                star.classList.toggle('selected', parseInt(star.dataset.value) <= currentRating);
            });
        }

        // Adiciona eventos às estrelas
        starRatingContainer.addEventListener('mouseover', handleStarHover);
        starRatingContainer.addEventListener('click', handleStarClick);
        starRatingContainer.addEventListener('mouseout', handleStarMouseOut);

        function showFeedbackMessage(element, message, type)
        {
            element.textContent = message;
            element.className = `feedback-message ${ type }`;
            element.style.display = 'block';
            setTimeout(() =>
            {
                element.style.display = 'none';
            }, 5000);
        }

        updateActionButtons();
        updateReviewSectionVisibility();
    });
</script>
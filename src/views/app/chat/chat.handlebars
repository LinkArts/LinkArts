<body>
    <!-- Armazena o ID do usuário logado para uso no JS -->
    <input type="hidden" id="loggedInUserId" value="{{user.id}}">

    <div id="chat-app">
        <!-- Coluna Esquerda - Conversas (Renderizada pelo Handlebars do Servidor) -->
        <div class="users-column" id="users-column">
            <div class="users-header">
                <h2>Conversas</h2>
            </div>
            <div class="users-list" id="users-list-container">
                {{#if chats.length}}
                    {{#each chats}}
                    <!-- Certifique-se que os data attributes estão corretos -->
                    <div class="user-conversation {{#if this.isActive}}active{{/if}}" data-chat-id="{{this.chatId}}" data-other-user-id="{{this.otherUser.id}}" data-other-user-name="{{this.otherUser.name}}">
                        <!-- CORREÇÃO: Removido ../ de randomColor -->
                        <img src="https://via.placeholder.com/40/{{randomColor}}/FFFFFF?text={{this.otherUser.name.[0]}}" alt="{{this.otherUser.name}}" class="user-avatar">
                        <div class="user-info">
                            <div class="user-name-time">
                                <div class="user-name">{{this.otherUser.name}}</div>
                                <!-- CORREÇÃO: Removido ../ de formatDate -->
                                <div class="user-time">{{formatDate this.latestMessage.createdAt}}</div>
                            </div>
                            <div class="last-message">
                                {{#if this.latestMessage}}
                                    {{this.latestMessage.content}}
                                {{else}}
                                    <i>Sem mensagens</i>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                    {{/each}}
                {{else}}
                    <p>Nenhuma conversa encontrada.</p>
                {{/if}}
            </div>
        </div>

        <!-- Coluna Central - Chat (Conteúdo dinâmico via JS) -->
        <div class="chat-column" id="chat-column">
            <div class="chat-header" id="chat-header-container">
                <!-- Conteúdo preenchido por JS -->
                <div class="chat-user">
                    <img src="https://via.placeholder.com/40/cccccc/FFFFFF?text=?" alt="Selecione">
                    <div class="chat-user-info">
                        <h3>Selecione uma conversa</h3>
                    </div>
                </div>
                <button class="report-button" disabled>Reportar conversa</button>
            </div>
            <div class="messages-container" id="messages-container">
                 <!-- Indicador de carregamento -->
                 <div class="loading-indicator" style="display: none; text-align: center; padding: 10px;">Carregando mensagens antigas...</div>
                <p>Selecione uma conversa para ver as mensagens.</p>
            </div>
            <div class="input-area">
                <div class="message-form">
                    <div class="input-container">
                        <textarea class="message-input" placeholder="Selecione uma conversa..." disabled></textarea>
                        <div class="input-buttons">
                            <button class="attachment-button" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"/></svg>
                            </button>
                            <button class="send-button" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m22 2-7 20-4-9-9-4 20-7Z"/><path d="M22 2 11 13"/></svg>
                            </button>
                        </div>
                    </div>
                    <div class="send-proposal">
                        <button class="proposal-button" disabled>
                            <span class="icon-plus">+</span>
                            Enviar Proposta
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Coluna Direita - Perfil (Será preenchida dinamicamente) -->
        <div class="profile-column" id="profile-column-container">
            <p>Selecione uma conversa para ver o perfil.</p>
        </div>
    </div>

    <!-- Modal de Proposta (Mantido como no original) -->
    <div class="modal" id="proposal-modal">
        <!-- ... conteúdo do modal ... -->
    </div>

    <!-- Notificação Toast (Mantido como no original) -->
    <div class="toast" id="toast"></div>

    <!-- Incluir Socket.IO Client -->
    <script src="/socket.io/socket.io.js"></script> 
    <!-- Incluir Handlebars Client-side (Mantido como no original) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

    <!-- Script JS Cliente Corrigido e Refatorado -->
    <script>
      // O código JS permanece o mesmo da versão anterior, pois a correção foi no template HTML/Handlebars
      document.addEventListener("DOMContentLoaded", function() {
        // --- Elementos da DOM ---
        const usersListContainer = document.getElementById("users-list-container");
        const messagesContainer = document.getElementById("messages-container");
        const chatHeaderContainer = document.getElementById("chat-header-container");
        const profileContainer = document.getElementById("profile-column-container");
        const messageInput = document.querySelector(".message-input");
        const sendButton = document.querySelector(".send-button");
        const attachmentButton = document.querySelector(".attachment-button");
        const proposalButton = document.querySelector(".proposal-button");
        const toast = document.getElementById("toast");
        const modal = document.getElementById("proposal-modal");
        const closeModalButton = modal.querySelector(".close-modal");
        const cancelButton = modal.querySelector(".cancel-button");
        const proposalForm = document.getElementById("proposal-form");
        const proposalConversationIdInput = document.getElementById("proposal-conversation-id");
        const loggedInUserIdInput = document.getElementById("loggedInUserId");
        const loadingIndicator = messagesContainer.querySelector(".loading-indicator");

        // --- Estado da Aplicação ---
        let currentChatId = null;
        let currentOtherUserId = null;
        let currentOtherUserName = null;
        let messagesOffset = 0;
        let totalMessages = 0;
        let isLoadingMessages = false;
        const messagesLimit = 30;
        const loggedInUserId = loggedInUserIdInput ? parseInt(loggedInUserIdInput.value, 10) : null;
        let socket = null;

        if (!loggedInUserId) {
            showToast("Erro: Não foi possível identificar o usuário logado.", true);
            disableChatInput();
        }

        // --- Inicialização do Socket.IO ---
        function initializeWebSocket() {
            try {
                socket = io({ transports: ["websocket"] });

                socket.on("connect", () => {
                    console.log("Conectado ao servidor WebSocket:", socket.id);
                    if (currentChatId) {
                        socket.emit("join_chat", currentChatId);
                    }
                });

                socket.on("disconnect", (reason) => {
                    console.log("Desconectado do servidor WebSocket:", reason);
                });

                socket.on("connect_error", (err) => {
                    console.error("Erro de conexão WebSocket:", err);
                    showToast("Falha na conexão em tempo real.", true);
                });

                socket.on("new_message", handleNewMessage);

            } catch (e) {
                console.error("Falha ao inicializar Socket.IO:", e);
                showToast("Não foi possível iniciar o chat em tempo real.", true);
            }
        }

        // --- Funções de Fetch --- 
        async function fetchData(url, options = {}) {
            isLoadingMessages = true;
            try {
                const fetchOptions = { 
                    ...options, 
                    credentials: "include",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        ...(options.headers || {})
                    }
                 }; 
                 if (options.body && typeof options.body !== 'string') {
                     fetchOptions.body = JSON.stringify(options.body);
                 }

                const response = await fetch(url, fetchOptions);
                if (!response.ok) {
                    let errorMsg = `Erro ${response.status}`;
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorMsg;
                    } catch (e) { /* Ignora erro no parse do erro */ }
                    throw new Error(errorMsg);
                }
                if (response.status === 204) return null;
                return await response.json();
            } catch (error) {
                console.error("Fetch error:", url, error);
                showToast(`Erro: ${error.message}`, true);
                return null;
            } finally {
                isLoadingMessages = false;
            }
        }

        // --- Lógica do Chat ---
        function handleNewMessage(newMessage) {
            if (newMessage && newMessage.chatId == currentChatId) {
                loadChatHtml(currentChatId);
            }
        }
        function scrollToBottom(element) {
            setTimeout(() => { element.scrollTop = element.scrollHeight; }, 50);
        }
        function disableChatInput() {
            messageInput.disabled = true;
            sendButton.disabled = true;
            attachmentButton.disabled = true;
            proposalButton.disabled = true;
            messageInput.placeholder = "Selecione uma conversa...";
            const reportBtn = document.querySelector('#chat-header-container .report-button');
            if(reportBtn) reportBtn.disabled = true;
        }
        function enableChatInput() {
            messageInput.disabled = false;
            sendButton.disabled = false;
            attachmentButton.disabled = false;
            proposalButton.disabled = false;
            messageInput.placeholder = "Digite sua mensagem...";
            const reportBtn = document.querySelector('#chat-header-container .report-button');
            if(reportBtn) reportBtn.disabled = false;
            messageInput.focus();
        }
        async function sendMessage() {
            const messageText = messageInput.value.trim();
            if (!messageText || !currentChatId || isLoadingMessages) {
                return;
            }
            const url = `/api/chats/${currentChatId}/messages`;
            const body = { message: messageText };
            await fetchData(url, {
                method: 'POST',
                body: body
            });
            loadChatHtml(currentChatId);
            messageInput.value = '';
            messageInput.focus();
        }
        function showToast(message, isError = false) {
            toast.textContent = message;
            toast.className = `toast show ${isError ? 'error' : ''}`;
            setTimeout(() => {
                toast.className = toast.className.replace("show", "");
            }, 3000);
        }

        // --- Função para carregar HTML dos blocos do chat ---
        async function loadChatHtml(chatId) {
            try {
                // Mostra o indicador de carregamento
                const loadingIndicator = messagesContainer.querySelector('.loading-indicator');
                if (loadingIndicator) loadingIndicator.style.display = 'block';
                // Busca o HTML dos blocos do chat
                const response = await fetch(`/api/chats/${chatId}/html`);
                if (!response.ok) throw new Error('Erro ao buscar chat');
                const data = await response.json();
                // Insere o HTML nos containers
                messagesContainer.innerHTML = '<div class="loading-indicator" style="display: none; text-align: center; padding: 10px;">Carregando mensagens antigas...</div>' + data.messagesHtml;
                chatHeaderContainer.innerHTML = data.chatHeaderHtml;
                profileContainer.innerHTML = data.profileHtml;
                enableChatInput();
            } catch (error) {
                console.error('Erro ao carregar HTML do chat:', error);
                messagesContainer.innerHTML = '<p class="error-message">Erro ao carregar mensagens. Tente novamente.</p>';
                chatHeaderContainer.innerHTML = '';
                profileContainer.innerHTML = '';
                disableChatInput();
            }
        }

        // --- Event Listeners ---
        if (usersListContainer) {
            usersListContainer.addEventListener("click", (event) => {
                const conversation = event.target.closest(".user-conversation");
                if (conversation) {
                    const chatId = conversation.dataset.chatId;
                    const otherUserId = conversation.dataset.otherUserId;
                    const otherUserName = conversation.dataset.otherUserName;
                    console.log('[CHAT DEBUG] Clique na conversa:', { chatId, otherUserId, otherUserName });
                    if (chatId && otherUserId && otherUserName && chatId !== currentChatId) {
                        if (socket && socket.connected && currentChatId) {
                            socket.emit("leave_chat", currentChatId);
                            console.log(`Saiu da sala WebSocket: ${currentChatId}`);
                        }
                        currentChatId = chatId;
                        currentOtherUserId = otherUserId;
                        currentOtherUserName = otherUserName;
                        loadChatHtml(chatId);
                        // Atualiza o chat ativo
                        document.querySelectorAll('.user-conversation').forEach(item => {
                            item.classList.remove('active');
                            if (item.dataset.chatId === chatId) {
                                item.classList.add('active');
                            }
                        });
                    }
                }
            });
        }
        if (sendButton) {
            sendButton.addEventListener("click", sendMessage);
        }
        if (messageInput) {
            messageInput.addEventListener("keypress", (event) => {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            });
        }
        if (proposalButton) {
            proposalButton.addEventListener('click', () => {
                if (currentChatId) {
                    proposalConversationIdInput.value = currentChatId;
                    modal.style.display = 'block';
                }
            });
        }
        if (closeModalButton) closeModalButton.addEventListener('click', () => modal.style.display = 'none');
        if (cancelButton) cancelButton.addEventListener('click', () => modal.style.display = 'none');
        if (proposalForm) {
            proposalForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                console.log('Enviando proposta...');
                showToast('Proposta enviada com sucesso!');
                modal.style.display = 'none';
                proposalForm.reset();
            });
        }
        window.addEventListener('click', (event) => {
            if (event.target == modal) modal.style.display = 'none';
        });

        // --- Inicialização ---
        disableChatInput();
        initializeWebSocket();

      });
    </script>

</body>

<body>
    <!-- Armazena o ID do usuário logado para uso no JS -->
    <input type="hidden" id="loggedInUserId" value="{{user.id}}">

    <div id="chat-app">
        <!-- Coluna Esquerda - Conversas (Renderizada pelo Handlebars do Servidor) -->
        <div class="users-column" id="users-column">
            <div class="users-header">
                <h2>Conversas</h2>
            </div>
            <div class="users-list" id="users-list-container">
                {{#if chats.length}}
                    {{#each chats}}
                    <!-- Certifique-se que os data attributes estão corretos -->
                    <div class="user-conversation {{#if this.isActive}}active{{/if}}" data-chat-id="{{this.chatId}}" data-other-user-id="{{this.otherUser.id}}" data-other-user-name="{{this.otherUser.name}}">
                        <!-- CORREÇÃO: Removido ../ de randomColor -->
                        <img src="https://via.placeholder.com/40/{{randomColor}}/FFFFFF?text={{this.otherUser.name.[0]}}" alt="{{this.otherUser.name}}" class="user-avatar">
                        <div class="user-info">
                            <div class="user-name-time">
                                <div class="user-name">{{this.otherUser.name}}</div>
                                <!-- CORREÇÃO: Removido ../ de formatDate -->
                                <div class="user-time">{{formatDate this.latestMessage.createdAt}}</div>
                            </div>
                            <div class="last-message">
                                {{#if this.latestMessage}}
                                    {{this.latestMessage.content}}
                                {{else}}
                                    <i>Sem mensagens</i>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                    {{/each}}
                {{else}}
                    <p>Nenhuma conversa encontrada.</p>
                {{/if}}
            </div>
        </div>

        <!-- Coluna Central - Chat (Conteúdo dinâmico via JS) -->
        <div class="chat-column" id="chat-column">
            <div class="chat-header" id="chat-header-container">
                <!-- Conteúdo preenchido por JS -->
                <div class="chat-user">
                    <img src="https://via.placeholder.com/40/cccccc/FFFFFF?text=?" alt="Selecione">
                    <div class="chat-user-info">
                        <h3>Selecione uma conversa</h3>
                    </div>
                </div>
                <button class="report-button" disabled>Reportar conversa</button>
            </div>
            <div class="messages-container" id="messages-container">
                 <!-- Indicador de carregamento -->
                 <div class="loading-indicator" style="display: none; text-align: center; padding: 10px;">Carregando mensagens antigas...</div>
                <p>Selecione uma conversa para ver as mensagens.</p>
            </div>
            <div class="input-area">
                <div class="message-form">
                    <div class="input-container">
                        <textarea class="message-input" placeholder="Selecione uma conversa..." disabled></textarea>
                        <div class="input-buttons">
                            <button class="attachment-button" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"/></svg>
                            </button>
                            <button class="send-button" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m22 2-7 20-4-9-9-4 20-7Z"/><path d="M22 2 11 13"/></svg>
                            </button>
                        </div>
                    </div>
                    <div class="send-proposal">
                        <button class="proposal-button" disabled>
                            <span class="icon-plus">+</span>
                            Enviar Proposta
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Coluna Direita - Perfil (Será preenchida dinamicamente) -->
        <div class="profile-column" id="profile-column-container">
            <p>Selecione uma conversa para ver o perfil.</p>
        </div>
    </div>

    <!-- Modal de Proposta (Mantido como no original) -->
    <div class="modal" id="proposal-modal">
        <!-- ... conteúdo do modal ... -->
    </div>

    <!-- Notificação Toast (Mantido como no original) -->
    <div class="toast" id="toast"></div>

    <!-- Incluir Socket.IO Client -->
    <script src="/socket.io/socket.io.js"></script> 
    <!-- Incluir Handlebars Client-side (Mantido como no original) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

    <!-- Templates Handlebars para JS (Serão usados pelo JS abaixo) -->
    <!-- Template para renderizar a lista/mensagens individuais -->
        {{#each messages}}
        <div class="msg {{#if this.isCurrentUser}}sent{{else}}received{{/if}}" data-message-id="{{this.id}}">
            <div class="message-bubble">{{this.message}}</div>
            <div class="message-time">{{formatTime this.createdAt}}</div>
        </div>
        {{/each}}

    <!-- Template para o cabeçalho do chat -->
        {{#if otherUser}}
        <div class="chat-user">
            <!-- CORREÇÃO: Removido ../ de randomColor -->
            <img src="https://via.placeholder.com/40/{{randomColor}}/FFFFFF?text={{otherUser.name.[0]}}" alt="{{otherUser.name}}">
            <div class="chat-user-info">
                <h3>{{otherUser.name}}</h3>
            </div>
        </div>
        <button class="report-button">Reportar conversa</button>
        {{else}}
        <div class="chat-user">
            <img src="https://via.placeholder.com/40/cccccc/FFFFFF?text=?" alt="Selecione">
            <div class="chat-user-info">
                <h3>Selecione uma conversa</h3>
            </div>
        </div>
        <button class="report-button" disabled>Reportar conversa</button>
        {{/if}}

    <!-- Template para o perfil (mantido com placeholders) -->
        {{#if otherUser}}
        <div class="profile-header">
             <!-- CORREÇÃO: Removido ../ de randomColor -->
            <img src="https://via.placeholder.com/80/{{randomColor}}/FFFFFF?text={{otherUser.name.[0]}}" alt="{{otherUser.name}}" class="profile-avatar">
            <div class="profile-name">{{otherUser.name}}</div>
            <div class="profile-profession">Artista</div>
            <div class="profile-location">
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>
                Localização
            </div>
            <div class="rating-reviews">
                <div class="rating">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" stroke="none"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>
                    <span>4.8</span>
                </div>
                <div class="reviews">(8 avaliações)</div>
            </div>
        </div>
        <div class="profile-divider"></div>
        <div class="profile-bio">
            <div class="bio-title">Biografia</div>
            <div class="bio-text">Informações sobre {{otherUser.name}} não disponíveis.</div>
        </div>
        <div class="profile-tags">
            <div class="profile-tag">Artista</div>
            <div class="profile-tag">Usuário</div>
        </div>
        {{else}}
        <p>Selecione uma conversa para ver o perfil.</p>
        {{/if}}

    <!-- Script JS Cliente Corrigido e Refatorado -->
    <script>
      // O código JS permanece o mesmo da versão anterior, pois a correção foi no template HTML/Handlebars
      document.addEventListener("DOMContentLoaded", function() {
        // --- Elementos da DOM ---
        const usersListContainer = document.getElementById("users-list-container");
        const messagesContainer = document.getElementById("messages-container");
        const chatHeaderContainer = document.getElementById("chat-header-container");
        const profileContainer = document.getElementById("profile-column-container");
        const messageInput = document.querySelector(".message-input");
        const sendButton = document.querySelector(".send-button");
        const attachmentButton = document.querySelector(".attachment-button");
        const proposalButton = document.querySelector(".proposal-button");
        const toast = document.getElementById("toast");
        const modal = document.getElementById("proposal-modal");
        const closeModalButton = modal.querySelector(".close-modal");
        const cancelButton = modal.querySelector(".cancel-button");
        const proposalForm = document.getElementById("proposal-form");
        const proposalConversationIdInput = document.getElementById("proposal-conversation-id");
        const loggedInUserIdInput = document.getElementById("loggedInUserId");
        const loadingIndicator = messagesContainer.querySelector(".loading-indicator");

        // --- Templates Handlebars (Client-side) ---
        let messageTemplate, chatHeaderTemplate, profileTemplate;
        try {
            const messageSource = document.getElementById("message-template")?.innerHTML;
            const chatHeaderSource = document.getElementById("chat-header-template")?.innerHTML;
            const profileSource = document.getElementById("profile-template")?.innerHTML;
            
            if (messageSource) messageTemplate = Handlebars.compile(messageSource);
            else console.error("Template 'message-template' não encontrado.");
            if (chatHeaderSource) chatHeaderTemplate = Handlebars.compile(chatHeaderSource);
            else console.error("Template 'chat-header-template' não encontrado.");
            if (profileSource) profileTemplate = Handlebars.compile(profileSource);
            else console.error("Template 'profile-template' não encontrado.");

            // Helpers do Handlebars (Client-side)
            Handlebars.registerHelper("formatTime", function(timestamp) {
                if (!timestamp) return "";
                try { return new Date(timestamp).toLocaleTimeString([], {hour: "2-digit", minute:"2-digit"}); } catch (e) { return ""; }
            });
            // Este formatDate é para o CLIENT-SIDE (JS)
            Handlebars.registerHelper("formatDate", function(timestamp) {
                if (!timestamp) return "";
                try {
                    const date = new Date(timestamp);
                    const now = new Date();
                    const yesterday = new Date(now);
                    yesterday.setDate(yesterday.getDate() - 1);
                    if (date.toDateString() === now.toDateString()) {
                        return date.toLocaleTimeString([], {hour: "2-digit", minute:"2-digit"});
                    } else if (date.toDateString() === yesterday.toDateString()) {
                        return "Ontem";
                    } else {
                        return date.toLocaleDateString([], {day: "2-digit", month: "2-digit"});
                    }
                } catch (e) { return ""; }
            });
             // Este randomColor é para o CLIENT-SIDE (JS)
            Handlebars.registerHelper("randomColor", function() {
                const colors = ["FFA500", "008000", "FFC0CB", "0000FF", "800080", "FF0000", "4B0082"];
                return colors[Math.floor(Math.random() * colors.length)];
            });

        } catch (e) {
            console.error("Erro ao compilar templates Handlebars:", e);
            showToast("Erro interno ao carregar a interface do chat.", true);
        }

        // --- Estado da Aplicação ---
        let currentChatId = null;
        let currentOtherUserId = null;
        let currentOtherUserName = null;
        let messagesOffset = 0;
        let totalMessages = 0;
        let isLoadingMessages = false;
        const messagesLimit = 30;
        const loggedInUserId = loggedInUserIdInput ? parseInt(loggedInUserIdInput.value, 10) : null;
        let socket = null;

        if (!loggedInUserId) {
            showToast("Erro: Não foi possível identificar o usuário logado.", true);
            disableChatInput();
        }

        // --- Inicialização do Socket.IO ---
        function initializeWebSocket() {
            try {
                socket = io({ transports: ["websocket"] });

                socket.on("connect", () => {
                    console.log("Conectado ao servidor WebSocket:", socket.id);
                    if (currentChatId) {
                        socket.emit("join_chat", currentChatId);
                    }
                });

                socket.on("disconnect", (reason) => {
                    console.log("Desconectado do servidor WebSocket:", reason);
                });

                socket.on("connect_error", (err) => {
                    console.error("Erro de conexão WebSocket:", err);
                    showToast("Falha na conexão em tempo real.", true);
                });

                socket.on("new_message", handleNewMessage);

            } catch (e) {
                console.error("Falha ao inicializar Socket.IO:", e);
                showToast("Não foi possível iniciar o chat em tempo real.", true);
            }
        }

        // --- Funções de Fetch --- 
        async function fetchData(url, options = {}) {
            isLoadingMessages = true;
            try {
                const fetchOptions = { 
                    ...options, 
                    credentials: "include",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        ...(options.headers || {})
                    }
                 }; 
                 if (options.body && typeof options.body !== 'string') {
                     fetchOptions.body = JSON.stringify(options.body);
                 }

                const response = await fetch(url, fetchOptions);
                if (!response.ok) {
                    let errorMsg = `Erro ${response.status}`;
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.message || errorMsg;
                    } catch (e) { /* Ignora erro no parse do erro */ }
                    throw new Error(errorMsg);
                }
                if (response.status === 204) return null;
                return await response.json();
            } catch (error) {
                console.error("Fetch error:", url, error);
                showToast(`Erro: ${error.message}`, true);
                return null;
            } finally {
                isLoadingMessages = false;
            }
        }

        // --- Funções de Renderização --- 
        function renderSingleMessage(message, prepend = false) {
            if (!messageTemplate) return;
            message.isCurrentUser = message.sender && message.sender.id === loggedInUserId;
            const messageHtml = messageTemplate({ messages: [message] });
            const placeholderP = messagesContainer.querySelector("p");
            if (placeholderP) {
                placeholderP.remove();
            }
            if (prepend) {
                messagesContainer.insertAdjacentHTML('afterbegin', messageHtml);
            } else {
                messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            }
        }
        function renderMessageBlock(messages) {
            if (!messageTemplate) return;
            messages.forEach(msg => {
                msg.isCurrentUser = msg.sender && msg.sender.id === loggedInUserId;
            });
            const messagesHtml = messageTemplate({ messages: messages });
            if(loadingIndicator) loadingIndicator.style.display = 'none';
            const oldScrollHeight = messagesContainer.scrollHeight;
            const oldScrollTop = messagesContainer.scrollTop;
            if (loadingIndicator) {
                 loadingIndicator.insertAdjacentHTML('afterend', messagesHtml);
            } else {
                 messagesContainer.insertAdjacentHTML('afterbegin', messagesHtml);
            }
            messagesContainer.scrollTop = oldScrollTop + (messagesContainer.scrollHeight - oldScrollHeight);
        }

        // --- Lógica do Chat ---
        async function loadMessages(chatId, loadMore = false) {
            if (isLoadingMessages) return;
            let offsetToLoad = loadMore ? messagesOffset : 0;
            if (loadMore) {
                 if(loadingIndicator) loadingIndicator.style.display = 'block';
            } else {
                messagesContainer.innerHTML = ''; 
                if(loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                    messagesContainer.appendChild(loadingIndicator);
                }
                messagesContainer.insertAdjacentHTML('beforeend', "<p>Carregando mensagens...</p>");
                messagesOffset = 0;
                totalMessages = 0;
            }
            const url = `/api/chats/${chatId}/messages?limit=${messagesLimit}&offset=${offsetToLoad}`;
            const data = await fetchData(url);
            const loadingP = messagesContainer.querySelector("p");
            if (loadingP && loadingP.textContent.includes("Carregando")) {
                loadingP.remove();
            }
            if (data && data.messages) {
                if (!loadMore && data.messages.length === 0) {
                    messagesContainer.insertAdjacentHTML('beforeend', "<p>Nenhuma mensagem nesta conversa ainda.</p>");
                }
                else if (loadMore && data.messages.length === 0) {
                     if(loadingIndicator) loadingIndicator.style.display = 'none';
                }
                else {
                    if (loadMore) {
                        renderMessageBlock(data.messages);
                    } else {
                        data.messages.forEach(msg => renderSingleMessage(msg)); 
                        scrollToBottom(messagesContainer);
                    }
                    messagesOffset += data.messages.length;
                    totalMessages = data.totalMessages || messagesOffset;
                }
            } else if (!loadMore) {
                messagesContainer.innerHTML = "<p>Erro ao carregar mensagens.</p>";
            }
            if(loadingIndicator && !loadMore) loadingIndicator.style.display = 'none';
        }
        function handleNewMessage(newMessage) {
             console.log("Nova mensagem recebida via WS:", newMessage);
             if (newMessage && newMessage.id && newMessage.ChatId == currentChatId) { 
                 renderSingleMessage(newMessage);
                 scrollToBottom(messagesContainer);
                 updateConversationPreview(currentChatId, newMessage);
             }
        }
        function scrollToBottom(element) {
            setTimeout(() => { element.scrollTop = element.scrollHeight; }, 50);
        }
        function updateChatUI(chatId, otherUserName, otherUserId) {
            currentChatId = chatId;
            currentOtherUserId = otherUserId;
            currentOtherUserName = otherUserName;
            if (chatHeaderTemplate) {
                chatHeaderContainer.innerHTML = chatHeaderTemplate({ otherUser: { id: otherUserId, name: otherUserName } });
                const newReportButton = chatHeaderContainer.querySelector('.report-button');
                if (newReportButton) newReportButton.disabled = false;
            }
            if (profileTemplate) {
                profileContainer.innerHTML = profileTemplate({ otherUser: { id: otherUserId, name: otherUserName } });
            }
            enableChatInput();
            loadMessages(chatId);
            if (socket && socket.connected) {
                socket.emit("join_chat", chatId);
                console.log(`Entrou na sala WebSocket: ${chatId}`);
            } else {
                console.warn("Socket não conectado ao tentar entrar na sala.");
            }
        }
        function disableChatInput() {
            messageInput.disabled = true;
            sendButton.disabled = true;
            attachmentButton.disabled = true;
            proposalButton.disabled = true;
            messageInput.placeholder = "Selecione uma conversa...";
            const reportBtn = chatHeaderContainer.querySelector('.report-button');
            if(reportBtn) reportBtn.disabled = true;
        }
        function enableChatInput() {
            messageInput.disabled = false;
            sendButton.disabled = false;
            attachmentButton.disabled = false;
            proposalButton.disabled = false;
            messageInput.placeholder = "Digite sua mensagem...";
            const reportBtn = chatHeaderContainer.querySelector('.report-button');
            if(reportBtn) reportBtn.disabled = false;
            messageInput.focus();
        }
        async function sendMessage() {
            const messageText = messageInput.value.trim();
            if (!messageText || !currentChatId || isLoadingMessages) {
                return;
            }
            const tempId = `temp_${Date.now()}`;
            const optimisticMessage = {
                id: tempId,
                message: messageText,
                createdAt: new Date().toISOString(),
                sender: { id: loggedInUserId, name: "Você" },
                isCurrentUser: true
            };
            renderSingleMessage(optimisticMessage);
            scrollToBottom(messagesContainer);
            messageInput.value = '';
            updateConversationPreview(currentChatId, optimisticMessage);
            const url = `/api/chats/${currentChatId}/messages`;
            const body = { message: messageText };
            const sentMessageData = await fetchData(url, { 
                method: 'POST', 
                body: body 
            });
            if (sentMessageData && sentMessageData.id) {
                console.log("Mensagem enviada com sucesso pela API:", sentMessageData.id);
                const tempMsgElement = messagesContainer.querySelector(`[data-message-id="${tempId}"]`);
                if (tempMsgElement) tempMsgElement.dataset.messageId = sentMessageData.id;
            } else {
                showToast("Erro ao enviar mensagem.", true);
                const failedMsgElement = messagesContainer.querySelector(`[data-message-id="${tempId}"]`);
                if (failedMsgElement) {
                    failedMsgElement.classList.add('error');
                }
            }
            messageInput.focus();
        }
        function updateConversationPreview(chatId, newMessage) {
            const conversationDiv = usersListContainer.querySelector(`.user-conversation[data-chat-id="${chatId}"]`);
            if (conversationDiv) {
                const lastMessageDiv = conversationDiv.querySelector('.last-message');
                const timeDiv = conversationDiv.querySelector('.user-time');
                if (lastMessageDiv) {
                    const tempDiv = document.createElement('div');
                    tempDiv.textContent = newMessage.message; 
                    lastMessageDiv.textContent = tempDiv.textContent.substring(0, 50) + (tempDiv.textContent.length > 50 ? '...' : '');
                }
                // Usa o helper do CLIENT-SIDE aqui, pois estamos no JS
                if (timeDiv && Handlebars.helpers.formatDate) {
                     timeDiv.textContent = Handlebars.helpers.formatDate(newMessage.createdAt);
                }
                if (usersListContainer.firstChild !== conversationDiv) {
                    usersListContainer.prepend(conversationDiv);
                }
            }
        }
        function showToast(message, isError = false) {
            toast.textContent = message;
            toast.className = `toast show ${isError ? 'error' : ''}`;
            setTimeout(() => {
                toast.className = toast.className.replace("show", "");
            }, 3000);
        }

        // --- Event Listeners ---
        if (usersListContainer) {
            usersListContainer.addEventListener("click", (event) => {
                const conversation = event.target.closest(".user-conversation");
                if (conversation) {
                    const chatId = conversation.dataset.chatId;
                    const otherUserId = conversation.dataset.otherUserId;
                    const otherUserName = conversation.dataset.otherUserName;
                    if (chatId && otherUserId && otherUserName && chatId !== currentChatId) {
                        if (socket && socket.connected && currentChatId) {
                            socket.emit("leave_chat", currentChatId);
                            console.log(`Saiu da sala WebSocket: ${currentChatId}`);
                        }
                        document.querySelectorAll('.user-conversation.active').forEach(el => el.classList.remove('active'));
                        conversation.classList.add('active');
                        updateChatUI(chatId, otherUserName, otherUserId);
                    }
                }
            });
        }
        if (sendButton) {
            sendButton.addEventListener("click", sendMessage);
        }
        if (messageInput) {
            messageInput.addEventListener("keypress", (event) => {
                if (event.key === "Enter" && !event.shiftKey) {
                    event.preventDefault();
                    sendMessage();
                }
            });
        }
        if (messagesContainer) {
            messagesContainer.addEventListener('scroll', () => {
                if (!isLoadingMessages && messagesContainer.scrollTop < 100 && messagesOffset < totalMessages) {
                    console.log("Scroll perto do topo, carregando mais mensagens...");
                    loadMessages(currentChatId, true);
                }
            });
        }
        if (proposalButton) {
            proposalButton.addEventListener('click', () => {
                if (currentChatId) {
                    proposalConversationIdInput.value = currentChatId;
                    modal.style.display = 'block';
                }
            });
        }
        if (closeModalButton) closeModalButton.addEventListener('click', () => modal.style.display = 'none');
        if (cancelButton) cancelButton.addEventListener('click', () => modal.style.display = 'none');
        if (proposalForm) {
            proposalForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                console.log('Enviando proposta...');
                showToast('Proposta enviada com sucesso!');
                modal.style.display = 'none';
                proposalForm.reset();
            });
        }
        window.addEventListener('click', (event) => {
            if (event.target == modal) modal.style.display = 'none';
        });

        // --- Inicialização ---
        disableChatInput();
        initializeWebSocket();

      });
    </script>

</body>

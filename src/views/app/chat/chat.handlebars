<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - LinkArts</title>
    <link rel="stylesheet" href="/css/chat.css">
</head>
<body>
    <input type="hidden" id="loggedInUserId" value="{{user.id}}">

    <div id="chat-app">
        <div class="users-column" id="users-column">
            <div class="users-header">
                <h2>Conversas</h2>
            </div>

            <div class="users-list" id="users-list-container">
                {{#if chats.length}}
                {{#each chats}}
                <div class="user-conversation {{#if this.isActive}}active{{/if}}" data-chat-id="{{this.chatId}}"
                    data-other-user-id="{{this.otherUser.id}}" data-other-user-name="{{this.otherUser.name}}">
                    <div class="user-avatar" style="width: 50px; height: 50px; background: url('{{#if this.otherUser.imageUrl}}{{this.otherUser.imageUrl}}{{else}}/img/default.jpg{{/if}}') center/cover; border-radius: 50%; flex-shrink: 0;"></div>
                    <div class="user-info">
                        <div class="user-name-time">
                            <div class="user-name">{{this.otherUser.name}}</div>
                            <div class="user-time">{{formatDate this.latestMessage.createdAt}}</div>
                        </div>
                        <div class="last-message">
                            {{#if this.latestMessage}}
                            {{this.latestMessage.content}}
                            {{else}}
                            <i>Sem mensagens</i>
                            {{/if}}
                        </div>
                    </div>
                </div>
                {{/each}}
                {{else}}
                <p>Nenhuma conversa encontrada.</p>
                {{/if}}
            </div>
        </div>

        <div class="chat-column" id="chat-column">
            <div class="chat-header" id="chat-header-container">
                <div class="chat-user" id="chat-user-header" style="cursor: pointer;">
                    <div class="profile-avatar" style="width: 40px; height: 40px; background: url('/img/default.jpg') center/cover; border-radius: 50%;"></div>
                    <div class="chat-user-info">
                        <h3>Selecione uma conversa</h3>

                    </div>
                </div>
                <button class="report-button" disabled>Reportar conversa</button>
            </div>
            <div class="messages-container" id="messages-container">
                <div class="loading-indicator" style="display: none; text-align: center; padding: 10px;">Carregando
                    mensagens antigas...</div>
                <div class="welcome-screen" id="welcome-screen">
                    <div style="text-align: center; padding: 60px 20px; color: #666;">
                        <div style="font-size: 4em; margin-bottom: 20px; opacity: 0.3;">üí¨</div>
                        <h2 style="color: #333; margin-bottom: 10px; font-weight: 600;">Bem-vindo ao bate-papo do LinkArts</h2>
                        <p style="font-size: 1.1em; margin-bottom: 30px;">Conecte-se com artistas e estabelecimentos de forma r√°pida e f√°cil.</p>
                        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 0 auto; max-width: 400px;">
                            <p style="margin: 0; color: #555;">üëà Selecione uma conversa ao lado para come√ßar a conversar</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="input-area">
                <div class="message-form">
                    <div class="input-container">
                        <textarea class="message-input" placeholder="Selecione uma conversa..." disabled></textarea>
                        <div class="input-buttons">
                            <button class="send-button" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"
                                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                    stroke-linejoin="round">
                                    <path d="m22 2-7 20-4-9-9-4 20-7Z" />
                                    <path d="M22 2 11 13" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="profile-column" id="profile-column-container" style="display: none;">
            <div class="profile-close-btn" id="profile-close-btn">
                <button onclick="toggleProfileColumn()" style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 20px; cursor: pointer; color: #666; padding: 5px; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; transition: all 0.2s;" onmouseover="this.style.background='#f0f0f0'" onmouseout="this.style.background='none'">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
            <div style="padding-top: 50px;">
                <p>Selecione uma conversa para ver o perfil.</p>
            </div>
        </div>
    </div>

    <div class="modal-overlay" id="send-proposal-modal-overlay">
        <div class="modal-send-proposal" id="send-proposal-modal">
            <div class="modal-header">
                <h2>Enviar Proposta de Servi√ßo</h2>
                <button class="modal-close-btn" id="close-send-proposal-modal">&times;</button>
            </div>
            <div class="modal-body">
                <form id="send-proposal-form">
                    <div class="form-group">
                        <label for="proposal-title">T√≠tulo da Proposta:</label>
                        <input type="text" id="proposal-title" required>
                    </div>
                    <div class="form-group">
                        <label for="proposal-description">Descri√ß√£o:</label>
                        <textarea id="proposal-description" rows="4"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="proposal-date">Data:</label>
                        <input type="date" id="proposal-date" required>
                    </div>
                    <div class="form-group">
                        <label for="proposal-start-time">Hora In√≠cio:</label>
                        <input type="time" id="proposal-start-time" required>
                    </div>
                    <div class="form-group">
                        <label for="proposal-end-time">Hora Fim:</label>
                        <input type="time" id="proposal-end-time" required>
                    </div>
                    <div class="form-group">
                        <label for="proposal-price">Pre√ßo:</label>
                        <input type="number" id="proposal-price" step="0.01" min="0" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="submit" form="send-proposal-form">Enviar</button>
                <button class="btn btn-cancel" id="cancel-send-proposal-modal">Cancelar</button>
            </div>
        </div>
    </div>



    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const usersListContainer = document.getElementById("users-list-container");
            const messagesContainer = document.getElementById("messages-container");
            const chatHeaderContainer = document.getElementById("chat-header-container");
            const profileContainer = document.getElementById("profile-column-container");
            const messageInput = document.querySelector(".message-input");
            const sendButton = document.querySelector(".send-button");

            const loggedInUserIdInput = document.getElementById("loggedInUserId");
            const loadingIndicator = messagesContainer.querySelector(".loading-indicator");
            const chatUserHeader = document.getElementById("chat-user-header");

            let currentChatId = null;
            let currentOtherUserId = null;
            let currentOtherUserName = null;
            let messagesOffset = 0;
            let totalMessages = 0;
            let isLoadingMessages = false;
            const messagesLimit = 30;
            const loggedInUserId = loggedInUserIdInput ? parseInt(loggedInUserIdInput.value, 10) : null;
            let socket = null;
            let typingTimeout = null;
            let isTyping = false;
            let isProfileColumnVisible = false;

            if (!loggedInUserId) {
                showToast("Erro: N√£o foi poss√≠vel identificar o usu√°rio logado.", true);
                disableChatInput();
            }

            window.toggleProfileColumn = function() {
                const profileColumn = document.getElementById("profile-column-container");
                const chatColumn = document.getElementById("chat-column");
                
                if (!profileColumn || !chatColumn) {
                    console.error('Elementos n√£o encontrados:', { profileColumn, chatColumn });
                    return;
                }
                
                if (!isProfileColumnVisible) {
                    profileColumn.style.display = "block";
                    chatColumn.style.width = "50%";
                    isProfileColumnVisible = true;
                } else {
                    profileColumn.style.display = "none";
                    chatColumn.style.width = "75%";
                    isProfileColumnVisible = false;
                }
            }

            document.addEventListener('click', function(e) {
                const chatUser = e.target.closest('.chat-user');
                if (chatUser && chatUser.closest('#chat-header-container')) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    if (currentChatId) {
                        toggleProfileColumn();
                    } else {
                        showToast('Selecione uma conversa primeiro', false);
                    }
                }
            });

            function initializeWebSocket() {
                try {
                    socket = io({ transports: ["websocket"] });
                    
                    socket.on("connect", () => {
                        if (currentChatId) {
                            socket.emit("join_chat", currentChatId);
                        }
                    });
                    
                    socket.on("disconnect", (reason) => {
                    });
                    
                    socket.on("connect_error", (err) => {
                        console.error('Erro de conex√£o Socket.IO:', err);
                        showToast("Falha na conex√£o em tempo real.", true);
                    });
                    
                    socket.on("new_message", handleNewMessage);
                    socket.on("user_typing", handleUserTyping);
                    socket.on("user_stopped_typing", handleUserStoppedTyping);
                    
                } catch (e) {
                    console.error('Erro ao inicializar Socket.IO:', e);
                    showToast("N√£o foi poss√≠vel iniciar o chat em tempo real.", true);
                }
            }

            function handleUserTyping(data) {
                if (data.userId !== currentOtherUserId) {
                    return;
                }
                showTypingIndicatorInMessages();
            }

            function handleUserStoppedTyping(data) {
                if (data.userId !== currentOtherUserId) {
                    return;
                }
                hideTypingIndicatorInMessages();
            }

            function showTypingIndicatorInMessages() {
                hideTypingIndicatorInMessages();
                
                const typingMessage = document.createElement('div');
                typingMessage.className = 'typing-message';
                typingMessage.id = 'typing-message-indicator';
                typingMessage.innerHTML = `
                    <div class="typing-bubble">
                        <div class="typing-avatar"></div>
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                `;
                
                if (messagesContainer) {
                    messagesContainer.appendChild(typingMessage);
                } else {
                    console.error('messagesContainer n√£o encontrado');
                }
                
                scrollToBottom(messagesContainer);
            }

            function hideTypingIndicatorInMessages() {
                const existingIndicator = document.getElementById('typing-message-indicator');
                if (existingIndicator) {
                    existingIndicator.remove();
                } else {
                }
            }

            function sendTypingStatus(typing) {
                if (!socket || !currentChatId) {
                    return;
                }
                if (typing && !isTyping) {
                    socket.emit("typing", { chatId: currentChatId, userId: loggedInUserId });
                    isTyping = true;
                } else if (!typing && isTyping) {
                    socket.emit("stop_typing", { chatId: currentChatId, userId: loggedInUserId });
                    isTyping = false;
                }
            }

            messageInput.addEventListener("input", function () {
                if (messageInput.value.trim().length > 0) {
                    sendTypingStatus(true);
                    clearTimeout(typingTimeout);
                    typingTimeout = setTimeout(() => {
                        sendTypingStatus(false);
                    }, 2000);
                } else {
                    sendTypingStatus(false);
                }
            });

            async function fetchData(url, options = {}) {
                isLoadingMessages = true;
                try {
                    const defaultHeaders = { "Content-Type": "application/json" };
                    const config = {
                        ...options,
                        headers: { ...defaultHeaders, ...options.headers }
                    };
                    if (config.body && typeof config.body === "object") {
                        config.body = JSON.stringify(config.body);
                    }
                    const response = await fetch(url, config);
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`HTTP ${response.status}: ${errorText || "Erro desconhecido"}`);
                    }
                    const data = await response.json();
                    return data;
                } catch (error) {
                    showToast(`Erro: ${error.message}`, true);
                    return null;
                } finally {
                    isLoadingMessages = false;
                }
            }

            async function updateChatList(newMessage = null) {
                try {
                    const response = await fetch("/api/chats");
                    if (!response.ok) throw new Error("Erro ao buscar conversas");
                    const chats = await response.json();
                    
                    let html = "";
                    if (chats.length > 0) {
                        chats.forEach((chat, index) => {
                            if (!chat.chatId) {
                                return;
                            }

                            const otherUserName = chat.otherUser?.name || "Usu√°rio desconhecido";
                            const otherUserId = chat.otherUser?.id || "";
                            const lastMessageContent = chat.latestMessage?.content || "Sem mensagens";
                            
                            let lastMessageTime = "";
                            if (chat.latestMessage?.createdAt) {
                                try {
                                    const messageDate = new Date(chat.latestMessage.createdAt);
                                    const now = new Date();
                                    const diffHours = (now - messageDate) / (1000 * 60 * 60);
                                    
                                    if (diffHours < 24) {
                                        lastMessageTime = messageDate.toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" });
                                    } else if (diffHours < 48) {
                                        lastMessageTime = "Ontem";
                                    } else {
                                        lastMessageTime = messageDate.toLocaleDateString("pt-BR", { day: "2-digit", month: "2-digit" });
                                    }
                                } catch (dateError) {
                                    lastMessageTime = "";
                                }
                            }

                            const sanitizedUserName = otherUserName.replace(/[<>]/g, '');
                            const sanitizedMessage = lastMessageContent.replace(/[<>]/g, '');
                            
                            const userImageUrl = chat.otherUser?.imageUrl || '/img/default.jpg';
                            html += `<div class="user-conversation${chat.chatId == currentChatId ? " active" : ""}" 
                                data-chat-id="${chat.chatId}" 
                                data-other-user-id="${otherUserId}" 
                                data-other-user-name="${sanitizedUserName}"
                                title="${chat.isGroupChat ? `Chat em grupo com ${chat.participantCount} pessoas` : `Chat com ${sanitizedUserName}`}">
                                <img src="${userImageUrl}" alt="${sanitizedUserName}" class="user-avatar">
                                <div class="user-info">
                                    <div class="user-name-time">
                                        <div class="user-name">${sanitizedUserName}</div>
                                        <div class="user-time">${lastMessageTime}</div>
                                    </div>
                                    <div class="last-message">${sanitizedMessage}</div>
                                </div>
                            </div>`;
                        });
                    } else {
                        html = `<div class="no-conversations">
                            <p>Nenhuma conversa encontrada.</p>
                            <p style="font-size: 0.9em; color: #666; margin-top: 10px;">
                                Para iniciar uma conversa, visite o perfil de um usu√°rio e clique em "Abrir Chat".
                            </p>
                        </div>`;
                    }
                    usersListContainer.innerHTML = html;
                } catch (error) {
                    usersListContainer.innerHTML = "<p class=\"error-message\">Erro ao atualizar conversas.</p>";
                }
            }

            async function updateMessagePopup() {
                try {
                    const popup = document.getElementById("message-popup");
                    if (!popup) {
                        return;
                    }
                    const contentDiv = popup.querySelector(".popup-content");
                    const response = await fetch("/api/chats");
                    if (!response.ok) throw new Error("Erro ao buscar conversas para popup");
                    const chats = await response.json();
                    let html = "";
                    if (chats.length > 0) {
                        chats.slice(0, 5).forEach(chat => {
                            const userImageUrl = chat.otherUser?.imageUrl || '/img/default.jpg';
                            html += `<div class="popup-item"><div class="popup-item-image"><img src="${userImageUrl}" alt="${chat.otherUser?.name ?? "Usu√°rio"}"></div><div class="popup-item-content"><h4 class="popup-item-title">${chat.otherUser?.name ?? "Usu√°rio desconhecido"}</h4><p class="popup-item-description">${chat.latestMessage?.content ?? "Sem mensagens"}</p></div></div>`;
                        });
                    } else {
                        html = "<div class=\"popup-item\"><div class=\"popup-item-content\"><p>Sem conversas.</p></div></div>";
                    }
                    contentDiv.innerHTML = html;
                } catch (error) {

                }
            }

            function formatMessageDate(dateString) {
                if (!dateString) return "";
                
                try {
                    const messageDate = new Date(dateString);
                    return messageDate.toLocaleTimeString("pt-BR", { hour: "2-digit", minute: "2-digit" });
                } catch (error) {
                    return "";
                }
            }

            function createDaySeparator(date) {
                const today = new Date();
                const messageDate = new Date(date);
                const isToday = today.toDateString() === messageDate.toDateString();
                
                const yesterday = new Date(today);
                yesterday.setDate(yesterday.getDate() - 1);
                const isYesterday = yesterday.toDateString() === messageDate.toDateString();
                
                let dateText;
                if (isToday) {
                    dateText = "Hoje";
                } else if (isYesterday) {
                    dateText = "Ontem";
                } else {
                    dateText = messageDate.toLocaleDateString("pt-BR", { 
                        day: "2-digit", 
                        month: "2-digit", 
                        year: "numeric" 
                    });
                }
                
                return `<div class="day-separator"><span>${dateText}</span></div>`;
            }

            function handleNewMessage(newMessage) {
                
                if (!newMessage || newMessage.chatId != currentChatId) {
                    updateChatList(newMessage);
                    updateMessagePopup();
                    return;
                }

                hideTypingIndicatorInMessages();

                const isMessageFromCurrentUser = newMessage.sender?.id === loggedInUserId;
                const messageAlreadyExists = messagesContainer.querySelector(`[data-message-id="${newMessage.id}"]`);
                
                if (isMessageFromCurrentUser && !messageAlreadyExists) {
                    const optimisticMsgElement = messagesContainer.querySelector(
                        `.msg.optimistic-message[data-userid="${newMessage.sender?.id}"]`
                    );

                    if (optimisticMsgElement) {
                        optimisticMsgElement.dataset.messageId = newMessage.id;
                        optimisticMsgElement.removeAttribute("data-temp-id");
                        optimisticMsgElement.classList.remove("optimistic-message");
                        if (optimisticMsgElement.querySelector(".message-time")) {
                            const msgDate = newMessage.date || newMessage.createdAt;
                            optimisticMsgElement.querySelector(".message-time").textContent = msgDate ? formatMessageDate(msgDate) : "";
                        }
                    } else if (!messageAlreadyExists) {
                        appendMessageToUI(newMessage, true, false);
                    }
                } else if (!isMessageFromCurrentUser && !messageAlreadyExists) {
                    appendMessageToUI(newMessage, false, false);
                } else if (messageAlreadyExists) {
                }

                scrollToBottom(messagesContainer);
                updateChatList(newMessage);
                updateMessagePopup();
            }

            function appendMessageToUI(msg, isCurrentUser, isOptimistic = false) {
                const msgDiv = document.createElement("div");
                msgDiv.className = `msg ${isCurrentUser ? "sent" : "received"}${isOptimistic ? " optimistic-message" : ""}`;
                if (isOptimistic) {
                    msgDiv.dataset.tempId = msg.id;
                } else {
                    msgDiv.dataset.messageId = msg.id;
                }
                msgDiv.dataset.userid = msg.sender?.id || loggedInUserId;
                msgDiv.dataset.messageText = msg.message;
                msgDiv.innerHTML = `
                <div class="message-bubble">${msg.message}</div>
                <div class="message-time">${!msg.date || isOptimistic ? "Enviando..." : formatMessageDate(msg.date)}</div>`;
                messagesContainer.appendChild(msgDiv);
                scrollToBottom(messagesContainer);
            }

            function scrollToBottom(element) {
                setTimeout(() => { element.scrollTop = element.scrollHeight; }, 150);
            }
            
            function disableChatInput() {
                messageInput.disabled = true;
                sendButton.disabled = true;
                messageInput.placeholder = "Selecione uma conversa...";
                const reportBtn = document.querySelector("#chat-header-container .report-button");
                if (reportBtn) reportBtn.disabled = true;
            }
            
            function enableChatInput() {
                messageInput.disabled = false;
                sendButton.disabled = false;
                messageInput.placeholder = "Digite sua mensagem...";
                const reportBtn = document.querySelector("#chat-header-container .report-button");
                if (reportBtn) reportBtn.disabled = false;
                messageInput.focus();
            }
            
            async function sendMessage() {
                const messageText = messageInput.value.trim();
                
                if (!messageText || !currentChatId) {
                    return;
                }

                sendTypingStatus(false);
                const tempId = `temp-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`;
                const optimisticMsg = {
                    id: tempId,
                    message: messageText,
                    date: null,
                    sender: { id: loggedInUserId, name: "Voc√™" },
                    chatId: currentChatId
                };
                
                appendMessageToUI(optimisticMsg, true, true);
                messageInput.value = "";
                messageInput.focus();
                
                try {
                    const url = `/api/chats/${currentChatId}/messages`;
                    const body = { message: messageText };
                    
                    const result = await fetchData(url, {
                        method: "POST",
                        body: body
                    });
                    
                    
                    if (result && result.id) {
                        const optimisticElem = messagesContainer.querySelector(`.msg.optimistic-message[data-temp-id="${tempId}"]`);
                        if (optimisticElem) {
                            optimisticElem.dataset.messageId = result.id;
                            optimisticElem.removeAttribute("data-temp-id");
                            optimisticElem.classList.remove("optimistic-message");
                            if (optimisticElem.querySelector(".message-time")) {
                                optimisticElem.querySelector(".message-time").textContent = result.date ?
                                    formatMessageDate(result.date) : "";
                            }
                        } else {
                            if (!messagesContainer.querySelector(`[data-message-id="${result.id}"]`)) {
                                appendMessageToUI(result, true, false);
                            }
                        }
                    } else {
                        console.error('Falha no envio - resultado inv√°lido:', result);
                        const optimisticElem = messagesContainer.querySelector(`.msg.optimistic-message[data-temp-id="${tempId}"]`);
                        if (optimisticElem) optimisticElem.remove();
                        showToast("Erro ao enviar mensagem", 'error');
                    }
                } catch (err) {
                    console.error('Erro no envio de mensagem:', err);
                    const optimisticElem = messagesContainer.querySelector(`.msg.optimistic-message[data-temp-id="${tempId}"]`);
                    if (optimisticElem) optimisticElem.remove();
                    showToast("Erro ao enviar mensagem", 'error');
                }
            }
            
            function showToast(message, type = 'success') {
                document.querySelectorAll('.toast.show').forEach(t => t.remove());
                
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                
                let iconSvg = '';
                if (type === 'success') {
                    iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z"/></svg>`;
                } else if (type === 'warning') {
                    iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 0 0-.44 0L1.698 13.939a.25.25 0 0 0 .22.361h12.164a.25.25 0 0 0 .22-.361L8.22 1.754ZM8 11.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM8.25 6v3.5a.25.25 0 0 1-.5 0V6a.25.25 0 0 1 .5 0Z"/></svg>`;
                } else if (type === 'error') {
                    iconSvg = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M4.47 4.47a.75.75 0 0 1 1.06 0L8 6.94l2.47-2.47a.75.75 0 1 1 1.06 1.06L9.06 8l2.47 2.47a.75.75 0 1 1-1.06 1.06L8 9.06l-2.47 2.47a.75.75 0 0 1-1.06-1.06L6.94 8 4.47 5.53a.75.75 0 0 1 0-1.06Z"/></svg>`;
                }
                
                toast.innerHTML = `${iconSvg} <span>${message}</span>`;
                document.body.appendChild(toast);
                
                toast.getBoundingClientRect();
                toast.classList.add('show');
                
                setTimeout(() => {
                    toast.classList.remove('show');
                    toast.addEventListener('transitionend', () => {
                        if (document.body.contains(toast)) {
                            document.body.removeChild(toast);
                        }
                    }, { once: true });
                }, 3500);
            }

            async function loadChatHtml(chatId) {
                if (isLoadingMessages) {
                    return;
                }

                hideTypingIndicatorInMessages();

                const url = `/api/chats/${chatId}/html`;
                const data = await fetchData(url);
                if (!data) return;

                messagesOffset = 0;
                totalMessages = data.totalMessages || 0;

                messagesContainer.innerHTML =
                    `<div class="loading-indicator" style="display: none; text-align: center; padding: 10px;">Carregando mensagens antigas...</div>` +
                    (data.messagesHtml || `<p class="no-messages">${data.messagesHtml === '' ? 'Nenhuma mensagem ainda. Envie a primeira!' : 'Erro ao carregar mensagens.'}</p>`);
                
                chatHeaderContainer.innerHTML = data.chatHeaderHtml || '<p class="error-message">Erro ao carregar header. <button onclick="loadChatHtml(' + chatId + ')">Tentar novamente</button></p>';
                profileContainer.innerHTML = data.profileHtml || '<p class="error-message">Erro ao carregar perfil. <button onclick="loadChatHtml(' + chatId + ')">Tentar novamente</button></p>';
                
                enableChatInput();

                if (data.isGroupChat) {
                    showToast(`Chat em grupo com ${data.chatParticipants} participantes`);
                }

                scrollToBottom(messagesContainer);
            }

            usersListContainer.addEventListener("click", function (e) {
                const conversationElement = e.target.closest(".user-conversation");
                if (!conversationElement) {
                    return;
                }

                const chatId = parseInt(conversationElement.dataset.chatId, 10);
                const otherUserId = parseInt(conversationElement.dataset.otherUserId, 10);
                const otherUserName = conversationElement.dataset.otherUserName;

                if (!chatId || isNaN(chatId)) {
                    showToast("Erro: ID do chat inv√°lido", 'error');
                    return;
                }

                if (currentChatId === chatId) {
                    return;
                }

                const isFirstChatSelection = currentChatId === null;

                document.querySelectorAll(".user-conversation").forEach(conv => conv.classList.remove("active"));
                conversationElement.classList.add("active");

                currentChatId = chatId;
                currentOtherUserId = otherUserId || null;
                currentOtherUserName = otherUserName || "Usu√°rio desconhecido";
                
                const chatHeader = document.querySelector('.chat-header');
                if (chatHeader) {
                    chatHeader.style.display = 'flex';
                }

                const messageInputContainer = document.querySelector('.input-area');
                if (messageInputContainer) {
                    messageInputContainer.style.display = 'flex';
                }
                
                if (socket && socket.connected) {
                    socket.emit("join_chat", chatId);
                } else {
                    if (socket) {
                        socket.connect();
                        socket.on("connect", () => {
                            socket.emit("join_chat", chatId);
                        });
                    }
                }

                loadChatHtml(chatId);

                if (isFirstChatSelection && !isProfileColumnVisible) {
                    setTimeout(() => {
                        toggleProfileColumn();
                    }, 500);
                }
            });

            sendButton.addEventListener("click", sendMessage);
            messageInput.addEventListener("keydown", function (e) {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            initializeWebSocket();
            updateChatList();
            updateMessagePopup();
            
            checkUrlHash();
            
            if (!currentChatId) {
                const chatHeader = document.querySelector('.chat-header');
                if (chatHeader) {
                    chatHeader.style.display = 'none';
                }
                
                const messageInputContainer = document.querySelector('.input-area');
                if (messageInputContainer) {
                    messageInputContainer.style.display = 'none';
                }
            }
            
            const profileColumn = document.getElementById("profile-column-container");
            const chatColumn = document.getElementById("chat-column");
            if (profileColumn && chatColumn) {
                profileColumn.style.display = "none";
                chatColumn.style.width = "75%";
                isProfileColumnVisible = false;
            }

            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    event.preventDefault();
                    
                    if (isProfileColumnVisible) {
                        toggleProfileColumn();
                    } else {
                        closeChatAndReturnToWelcome();
                    }
                }
            });

            function closeChatAndReturnToWelcome() {
                document.querySelectorAll('.user-conversation').forEach(conv => {
                    conv.classList.remove('active');
                });
                
                const chatHeader = document.querySelector('.chat-header');
                if (chatHeader) {
                    chatHeader.style.display = 'none';
                }

                const messageInputContainer = document.querySelector('.input-area');
                if (messageInputContainer) {
                    messageInputContainer.style.display = 'none';
                }

                const messagesContainer = document.querySelector('.messages-container');
                if (messagesContainer) {
                    messagesContainer.innerHTML = `
                        <div class="welcome-message">
                            <div style="text-align: center; padding: 60px 20px; color: #666;">
                                <div style="font-size: 4em; margin-bottom: 20px; opacity: 0.3;">üí¨</div>
                                <h2 style="color: #6d51b0; margin-bottom: 10px; font-weight: 600;">Bem-vindo ao LinkArts Chat</h2>
                                <p style="font-size: 1.1em; margin-bottom: 30px;">Conecte-se com artistas e estabelecimentos</p>
                                <p style="opacity: 0.7; font-size: 0.95em;">Selecione uma conversa para come√ßar</p>
                            </div>
                        </div>
                    `;
                }

                currentChatId = null;
                currentOtherUserId = null;

                if (isProfileColumnVisible) {
                    toggleProfileColumn();
                }
            }

            function resetChatToWelcome() {
                closeChatAndReturnToWelcome();
            }
            
            function checkUrlHash() {
                const hash = window.location.hash;
                if (hash && hash.startsWith('#chat-')) {
                    const chatId = parseInt(hash.replace('#chat-', ''), 10);
                    if (chatId && !isNaN(chatId)) {
                        setTimeout(() => {
                            selectChatById(chatId);
                            window.location.hash = '';
                        }, 1000);
                    }
                }
            }
            
            async function selectChatById(chatId) {
                try {
                    const conversationElement = document.querySelector(`[data-chat-id="${chatId}"]`);
                    if (conversationElement) {
                        conversationElement.click();
                    } else {
                        console.warn('Chat n√£o encontrado na lista:', chatId);
                        showToast('Conversa n√£o encontrada', true);
                    }
                } catch (error) {
                    console.error('Erro ao selecionar chat:', error);
                    showToast('Erro ao abrir conversa', true);
                }
            }

            function setupProposalButton() {
                window.openProposalModal = function() {
                    if (!currentOtherUserId) {
                        showToast('Selecione uma conversa para enviar proposta', 'warning');
                        return;
                    }
                    
                    openSendProposalModal();
                };
                
                setupProposalModalEvents();
            }

            function openSendProposalModal() {
                const sendProposalModalOverlay = document.getElementById('send-proposal-modal-overlay');
                const sendProposalModal = document.getElementById('send-proposal-modal');
                
                if (sendProposalModalOverlay && sendProposalModal) {
                    sendProposalModalOverlay.classList.add('active');
                    sendProposalModal.classList.add('active');
                }
            }

            function closeSendProposalModal() {
                const sendProposalModalOverlay = document.getElementById('send-proposal-modal-overlay');
                const sendProposalModal = document.getElementById('send-proposal-modal');
                const sendProposalForm = document.getElementById('send-proposal-form');
                
                if (sendProposalModalOverlay && sendProposalModal) {
                    sendProposalModalOverlay.classList.remove('active');
                    sendProposalModal.classList.remove('active');
                    
                    if (sendProposalForm) {
                        sendProposalForm.reset();
                    }
                }
            }

            function setupProposalModalEvents() {
                setTimeout(() => {
                    const closeSendProposalModalBtn = document.getElementById('close-send-proposal-modal');
                    const cancelSendProposalModalBtn = document.getElementById('cancel-send-proposal-modal');
                    const sendProposalModalOverlay = document.getElementById('send-proposal-modal-overlay');
                    const sendProposalForm = document.getElementById('send-proposal-form');

                    if (closeSendProposalModalBtn) {
                        closeSendProposalModalBtn.addEventListener('click', closeSendProposalModal);
                    }
                    
                    if (cancelSendProposalModalBtn) {
                        cancelSendProposalModalBtn.addEventListener('click', closeSendProposalModal);
                    }
                    
                    if (sendProposalModalOverlay) {
                        sendProposalModalOverlay.addEventListener('click', (e) => {
                            if (e.target === sendProposalModalOverlay) {
                                closeSendProposalModal();
                            }
                        });
                    }

                    if (sendProposalForm) {
                        sendProposalForm.addEventListener('submit', async (e) => {
                            e.preventDefault();

                            const title = document.getElementById('proposal-title').value;
                            const description = document.getElementById('proposal-description').value;
                            const date = document.getElementById('proposal-date').value;
                            const startTime = document.getElementById('proposal-start-time').value;
                            const endTime = document.getElementById('proposal-end-time').value;
                            const price = parseFloat(document.getElementById('proposal-price').value);

                            if (!title || !date || !startTime || !endTime || isNaN(price)) {
                                showToast('Por favor, preencha todos os campos obrigat√≥rios (T√≠tulo, Data, Hora In√≠cio, Hora Fim, Pre√ßo).', true);
                                return;
                            }

                            try {
                                const response = await fetch('/agenda/enviar-proposta', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        userid: currentOtherUserId,
                                        name: title,
                                        description: description,
                                        date: date,
                                        startTime: startTime,
                                        endTime: endTime,
                                        price: price.toString(),
                                    })
                                });

                                if (!response.ok) {
                                    const errorData = await response.json();
                                    throw new Error(errorData.message || 'Erro ao enviar proposta');
                                }

                                const result = await response.json();
                                showToast(result.message || 'Proposta enviada com sucesso!', 'success');
                                closeSendProposalModal();

                            } catch (error) {
                                console.error('Erro ao enviar proposta:', error);
                                showToast('Erro ao enviar proposta. Tente novamente.', 'error');
                            }
                        });
                    }
                }, 100);
            }

            function setupReportButton() {
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.report-button')) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        if (!currentChatId) {
                            showToast('Selecione uma conversa para reportar', true);
                            return;
                        }
                        
                        openReportModal();
                    }
                });
            }

            function openReportModal() {
                const modalHTML = `
                    <div class="report-modal-overlay" id="report-modal-overlay">
                        <div class="report-modal">
                            <button type="button" class="modal-close-btn" aria-label="Fechar modal">√ó</button>
                            <h2>Denunciar Conversa</h2>
                            <form id="report-form">
                                <div class="form-group">
                                    <label for="report-reason">Motivo da den√∫ncia *</label>
                                    <select id="report-reason" name="reason" required>
                                        <option value="">Selecione um motivo</option>
                                        <option value="spam">Spam ou conte√∫do repetitivo</option>
                                        <option value="fake">Perfil falso ou enganoso</option>
                                        <option value="harassment">Ass√©dio ou bullying</option>
                                        <option value="inappropriate">Conte√∫do inapropriado</option>
                                        <option value="copyright">Viola√ß√£o de direitos autorais</option>
                                        <option value="other">Outro</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="report-description">Descri√ß√£o detalhada</label>
                                    <textarea id="report-description" name="description" rows="4" placeholder="Descreva o problema em detalhes (opcional)"></textarea>
                                </div>
                                <div class="button-group">
                                    <button type="button" class="btn btn-cancel">Cancelar</button>
                                    <button type="submit" class="btn btn-primary">Enviar Den√∫ncia</button>
                                </div>
                            </form>
                        </div>
                    </div>
                `;

                document.body.insertAdjacentHTML('beforeend', modalHTML);

                const overlay = document.getElementById('report-modal-overlay');
                const modal = overlay.querySelector('.report-modal');
                const form = overlay.querySelector('#report-form');
                const reasonSelect = overlay.querySelector('#report-reason');
                const descriptionTextarea = overlay.querySelector('#report-description');
                const closeBtn = overlay.querySelector('.modal-close-btn');
                const cancelBtn = overlay.querySelector('.btn-cancel');

                setTimeout(() => {
                    overlay.classList.add('is-visible');
                }, 10);

                closeBtn.addEventListener('click', closeReportModal);
                cancelBtn.addEventListener('click', closeReportModal);
                overlay.addEventListener('click', function(e) {
                    if (e.target === overlay) {
                        closeReportModal();
                    }
                });

                document.addEventListener('keydown', handleEscapeKey);

                form.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const reason = reasonSelect.value;
                    const description = descriptionTextarea.value;

                    if (!reason) {
                        reasonSelect.classList.add('input-error');
                        showToast('Por favor, selecione um motivo para a den√∫ncia.', true);
                        return;
                    }

                    try {
                        const response = await fetch('/api/reports', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                chatId: currentChatId,
                                type: 'chat',
                                reason: reason,
                                description: description
                            })
                        });

                        if (response.ok) {
                            showToast('Den√∫ncia enviada com sucesso. Obrigado por nos ajudar a manter a comunidade segura.');
                            closeReportModal();
                        } else {
                            const errorData = await response.json();
                            showToast(errorData.message || 'Erro ao enviar den√∫ncia. Tente novamente.', true);
                        }
                    } catch (error) {
                        console.error('Erro ao enviar den√∫ncia:', error);
                        showToast('Erro de conex√£o. Verifique sua internet e tente novamente.', true);
                    }
                });

                reasonSelect.addEventListener('change', () => {
                    reasonSelect.classList.remove('input-error');
                });

                function closeReportModal() {
                    overlay.classList.remove('is-visible');
                    document.removeEventListener('keydown', handleEscapeKey);
                    
                    setTimeout(() => {
                        overlay.remove();
                    }, 300);
                }

                function handleEscapeKey(e) {
                    if (e.key === 'Escape') {
                        closeReportModal();
                    }
                }
            }

            setupReportButton();
            
            setupProposalButton();
        });
    </script>
</body>
</html>
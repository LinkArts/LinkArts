<div class="page-container">
    <aside class="filter-sidebar">
        <h2>Filtrar</h2>
        <form id="filtroUsuariosForm">
            <div class="filter-group">
                <input type="radio" id="filterTodos" name="tipoUsuario" value="todos" checked>
                <label for="filterTodos">Todos</label>
            </div>

            <div class="filter-group">
                <input type="radio" id="filterArtista" name="tipoUsuario" value="artista">
                <label for="filterArtista">Artistas</label>
            </div>

            <div class="filter-group">
                <input type="radio" id="filterEstabelecimento" name="tipoUsuario" value="estabelecimento">
                <label for="filterEstabelecimento">Estabelecimentos</label>
            </div>

            <button type="submit">Filtrar</button>
        </form>
    </aside>

    <main class="profiles-area">
        <h1>Resultados da Pesquisa</h1>
        <div id="profilesList" class="profiles-grid">
            {{#each results}}
            {{> dashboardCard}}
            {{/each}}
        </div>
    </main>
</div>

<script>
    // Este script é para a funcionalidade de filtro dinâmico
    // Se você estiver usando submit de formulário tradicional,
    // este bloco de script não é estritamente necessário para o layout inicial.

    const formFiltro = document.getElementById('filtroUsuariosForm');
    const profilesListDiv = document.getElementById('profilesList');
    const searchInput = document.getElementById('search-input');

    // Adiciona um listener para o evento submit do formulário
    formFiltro.addEventListener('submit', async (event) =>
    {
        event.preventDefault(); // Impede o envio padrão do formulário

        // Obtém o valor do radio button selecionado
        const formData = new FormData(formFiltro);
        const tipoUsuario = formData.get('tipoUsuario');

        console.log('Filtrando por:', tipoUsuario); // Para debug

        // Constrói a URL da requisição GET com o parâmetro de filtro
        const url = `/pesquisar?search=${ searchInput.value }&type=${ tipoUsuario }`; // Rota do seu backend

        try
        {
            // Faz a requisição assíncrona para o backend
            const response = await fetch(url);

            // Verifica se a resposta foi bem-sucedida
            if (!response.ok)
            {
                throw new Error(`Erro HTTP! Status: ${ response.status }`);
            }

            // Assume que o backend retorna um array de objetos JSON
            const usuarios = await response.json();

            console.log('Dados recebidos:', usuarios); // Para debug

            // Limpa o conteúdo atual da lista de perfis
            profilesListDiv.innerHTML = '';

            // Verifica se há usuários para exibir
            if (usuarios.length > 0)
            {
                // Itera sobre os usuários recebidos e cria os cards
                usuarios.forEach(usuario =>
                {
                    const cardHtml = `
                            <div class="profile-card">
                                <div class="profile-image-container">
                                    <img src="${ usuario.imageUrl || 'https://via.placeholder.com/150' }" alt="Foto de Perfil">
                                </div>
                                <div class="profile-details">
                                    <h3 class="profile-name">${ usuario.nome || 'Nome Indisponível' }</h3>
                                    <p class="profile-type">Tipo: ${ usuario.tipo || 'Não especificado' }</p>
                                    <p class="profile-description">${ usuario.descricao || 'Sem descrição.' }</p>
                                    <div class="profile-rating">
                                        Nota: ${ generateStarRating(usuario.nota) }
                                    </div>
                                </div>
                                <button class="view-profile-button" data-user-id="${ usuario.id }">Ver Perfil</button>
                            </div>
                        `;
                    profilesListDiv.innerHTML += cardHtml; // Adiciona o HTML do card à lista
                });

                // Adiciona listeners aos botões "Ver Perfil" APÓS eles serem adicionados ao DOM
                profilesListDiv.querySelectorAll('.view-profile-button').forEach(button =>
                {
                    button.addEventListener('click', () =>
                    {
                        const userId = button.dataset.userId;
                        alert(`Visualizar perfil do usuário com ID: ${ userId }`);
                        // Aqui você faria a navegação para a página de detalhes do perfil
                        // Ex: window.location.href = `/perfil/${userId}`;
                    });
                });


            } else
            {
                // Mensagem caso nenhum usuário seja encontrado
                profilesListDiv.innerHTML = '<p>Nenhum usuário encontrado com este filtro.</p>';
            }

        } catch (error)
        {
            console.error('Erro ao buscar usuários:', error);
            profilesListDiv.innerHTML = '<p>Ocorreu um erro ao carregar os usuários.</p>';
        }
    });

    // Opcional: Carregar a lista inicial de usuários (filtro 'todos') ao carregar a página
    // Dispara o evento submit do formulário no carregamento
    document.addEventListener('DOMContentLoaded', () =>
    {
        formFiltro.dispatchEvent(new Event('submit'));
    });
</script>
<main class="container-profile main-content">
  <section class="profile-info">
    <div class="profile-left">
      <div class="profile-img">
        <img id="profile-main-image" src="/img/default.jpg" alt="{{artist.profile.imageAlt}}">
      </div>
      <div class="profile-details">
        <h1 id="profile-name">{{values.name}}</h1>
        {{#if user.artist.tags}}
        {{#each user.artist.tags}}
        <p id="profile-tag" class="profile-tag">{{values.tag}}</p>
        {{/each}}
        {{else}}
        <p id="profile-tag" class="profile-tag">Sem Tags</p>
        {{/if}}
        <p id="profile-location" class="profile-location">{{values.city}}</p>
        <div class="profile-rating"
          aria-label="Avaliação: {{artist.profile.rating}} de 5 estrelas (baseado em {{artist.profile.reviewCount}} avaliações)">
          <div class="stars" aria-hidden="true">
          </div>
          <span class="rating">{{artist.profile.rating}}</span>
          <span class="reviews">({{artist.profile.reviewCount}} reviews)</span>
        </div>
      </div>
    </div>
    <div class="profile-actions">
      <a href="{{artist.profile.socialMediaUrl}}" class="btn btn-outline" target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
        </svg>
        Social Media & Links
      </a>
      <a href="/agenda/{{values.id}}" class="btn btn-outline">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect width="18" height="18" x="3" y="4" rx="2"></rect>
          <line x1="16" x2="16" y1="2" y2="6"></line>
          <line x1="8" x2="8" y1="2" y2="6"></line>
          <line x1="3" x2="21" y1="10" y2="10"></line>
        </svg>
        Agenda
      </a>
      {{!-- {{#if user.isOwner}} --}}
      <button id="edit-profile-btn" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
        </svg>
        Editar Perfil
      </button>
      {{!-- {{/if}} --}}
    </div>
  </section>

  <section class="about-section">
    <h2>Sobre {{artist.name}}</h2>
    <p id="profile-about">{{{artist.about}}}</p>
    <div class="tags">
      {{#each artist.tags}}
      <span class="tag">{{this}}</span>
      {{/each}}
    </div>
  </section>

  <section class="albums-section">
    <h2>Álbuns</h2>
    <div class="scroll-container albums-container">
      <div class="album-card">
        <div class="album-img">
          <img src="/img/default.jpg" alt="TTT">
        </div>
        <h3>TTT</h3>
      </div>
      <div class="album-card">
        <div class="album-img">
          <img src="/img/default.jpg" alt="TTT">
        </div>
        <h3>TTT</h3>
      </div>
      <div class="album-card">
        <div class="album-img">
          <img src="/img/default.jpg" alt="TTT">
        </div>
        <h3>TTT</h3>
      </div>
    </div>
  </section>

  <section class="music-section">
    <div class="section-header">
      <h2>Portfólio de Músicas</h2>
      {{!-- {{#if user.isOwner}} --}}
      <button id="add-music-action-button" class="btn btn-outline btn-purple">Adicionar Música</button>
      {{!-- {{/if}} --}}
    </div>
    <div class="scroll-container music-container">
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <div class="play-button" aria-label="Tocar {{this.title}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </div>
        </div>
        <div class="song-info">
          <h3>TTT</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <button onclick="console.log("Teste");">
            <div class="play-button" aria-label="Tocar {{this.title}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
              </svg>
            </div>
          </button>
        </div>
        <div class="song-info">
          <h3>{{this.title}}</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      {{#each artist.songs}}
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <div class="play-button" aria-label="Tocar {{this.title}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </div>
        </div>
        <div class="song-info">
          <h3>{{this.title}}</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      {{else}}
      <p>Nenhuma música no portfólio no momento.</p>
      {{/each}}
    </div>
  </section>

  <section class="reviews-section">
    <div class="section-header">
      <h2>Reviews</h2>
      <a href="{{artist.allReviewsUrl}}" class="btn-link">Ver Todas</a>
    </div>
    {{#each artist.reviews}}
    <div class="review-card">
      <div class="review-header">
        <h3>{{this.reviewerName}}</h3>
        <div class="review-stars" aria-label="Avaliação: {{this.rating}} de 5 estrelas">
          {{!-- {{{renderStars this.rating}}} --}}
        </div>
      </div>
      <p class="review-text">"{{{this.text}}}"</p>
    </div>
    {{else}}
    <p>Ainda não há reviews.</p>
    {{/each}}
  </section>
</main>

<script>

  document.addEventListener('DOMContentLoaded', () =>
  {
    let availableAlbums = [];
    let lastFocusedElement = null;

    const Selectors = {
      profileName: document.getElementById('profile-name') ?? document.querySelector('.profile-details h1'),
      profileTag: document.getElementById('profile-tag') ?? document.querySelector('.profile-tag'),
      profileLocation: document.getElementById('profile-location') ?? document.querySelector('.profile-location'),
      profileAbout: document.getElementById('profile-about') ?? document.querySelector('.about-section p'),
      profileImage: document.getElementById('profile-main-image') ?? document.querySelector('.profile-img img'),
      addMusicBtn: document.getElementById('add-music-action-button') || document.querySelector('.music-section .btn-purple'),
      editProfileBtn: document.getElementById('edit-profile-btn') || document.querySelectorAll('.profile-actions .btn-primary')[0],
      addEventBtn: document.getElementById('add-event-btn'),
      musicContainer: document.querySelector('.music-container'),
      eventsContainer: document.querySelector('.events-container'),
      albumCardHeadings: document.querySelectorAll('.albums-section .album-card h3'),
    };

    function showToast(message, type = 'success', duration = 3500)
    {
      document.querySelectorAll('.toast.show').forEach(t => t.remove());
      const toast = document.createElement('div');
      toast.className = `toast ${ type }`;
      let iconSvg = '';
      if (type === 'success') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z" /></svg>';
      else if (type === 'warning') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 0 0-.44 0L1.698 13.939a.25.25 0 0 0 .22.361h12.164a.25.25 0 0 0 .22-.361L8.22 1.754ZM8 11.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM8.25 6v3.5a.25.25 0 0 1-.5 0V6a.25.25 0 0 1 .5 0Z" /></svg>';
      else if (type === 'error') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M4.47 4.47a.75.75 0 0 1 1.06 0L8 6.94l2.47-2.47a.75.75 0 1 1 1.06 1.06L9.06 8l2.47 2.47a.75.75 0 1 1-1.06 1.06L8 9.06l-2.47 2.47a.75.75 0 0 1-1.06-1.06L6.94 8 4.47 5.53a.75.75 0 0 1 0-1.06Z" /></svg>';
      toast.innerHTML = `${ iconSvg } <span>${ message }</span>`;
      document.body.appendChild(toast);
      toast.getBoundingClientRect();
      toast.classList.add('show');
      setTimeout(() =>
      {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => toast.remove(), { once: true });
      }, duration);
    }

    function trapFocus(modalElement, overlayElement)
    {
      const focusableElements = Array.from(
        modalElement.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
      ).filter(el => el.offsetParent !== null);
      if (focusableElements.length === 0) return { destroy: () => { } };
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      let isTrapActive = true;
      setTimeout(() => { if (isTrapActive && overlayElement.classList.contains('is-visible')) firstElement.focus(); }, 100);
      const handleKeydown = (e) =>
      {
        if (!isTrapActive || !overlayElement.classList.contains('is-visible')) return;
        if (e.key === 'Tab')
        {
          if (e.shiftKey)
          {
            if (document.activeElement === firstElement)
            {
              lastElement.focus();
              e.preventDefault();
            }
          } else
          {
            if (document.activeElement === lastElement)
            {
              firstElement.focus();
              e.preventDefault();
            }
          }
        } else if (e.key === 'Escape')
        {
          closeModal(overlayElement);
        }
      };
      overlayElement.addEventListener('keydown', handleKeydown);
      const destroy = () =>
      {
        if (isTrapActive)
        {
          overlayElement.removeEventListener('keydown', handleKeydown);
          isTrapActive = false;
        }
      };
      return { destroy };
    }

    function closeModal(modalOverlay)
    {
      if (!modalOverlay || !document.body.contains(modalOverlay))
      {
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        return;
      }
      const modalId = modalOverlay.dataset.modalId;
      const destroyerKey = `focusTrapDestroy_${ modalId }`;
      if (modalId && typeof window[destroyerKey] === 'function')
      {
        try { window[destroyerKey](); delete window[destroyerKey]; }
        catch (e) { console.error("Error destroying focus trap:", e); }
      }
      if (modalOverlay.classList.contains('is-visible'))
      {
        modalOverlay.classList.remove('is-visible');
        const onTransitionEnd = (event) =>
        {
          if (event && event.target !== modalOverlay) return;
          modalOverlay.remove();
          if (!document.querySelector('.modal-overlay.is-visible'))
          {
            document.body.classList.remove('modal-open');
          }
          if (lastFocusedElement && typeof lastFocusedElement.focus === 'function')
          {
            try { lastFocusedElement.focus(); } catch (e) { console.warn("Error restoring focus:", e); }
            lastFocusedElement = null;
          }
        };
        modalOverlay.addEventListener('transitionend', onTransitionEnd, { once: true });
        setTimeout(() => { if (document.body.contains(modalOverlay) && !modalOverlay.classList.contains('is-visible')) onTransitionEnd(null); }, 500);
      } else
      {
        modalOverlay.remove();
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        if (lastFocusedElement) { try { lastFocusedElement.focus(); } catch (e) { } }
        lastFocusedElement = null;
      }
    }

    function openModal(overlaySelector, modalClass, modalHTMLContent, triggerButton = null)
    {
      if (!overlaySelector || !modalClass) return null;
      const existingOverlay = document.querySelector(overlaySelector);
      if (existingOverlay) closeModal(existingOverlay);
      lastFocusedElement = triggerButton || document.activeElement;
      const modalOverlay = document.createElement('div');
      const overlayClassName = overlaySelector.startsWith('.') ? overlaySelector.substring(1) : overlaySelector.replace('#', '');
      modalOverlay.className = `modal-overlay ${ overlayClassName }`;
      modalOverlay.setAttribute('role', 'dialog');
      modalOverlay.setAttribute('aria-modal', 'true');
      const modalId = `${ modalClass }-${ Date.now() }`;
      modalOverlay.dataset.modalId = modalId;
      const modal = document.createElement('div');
      modal.className = modalClass;
      modal.innerHTML = modalHTMLContent;
      modalOverlay.appendChild(modal);
      const titleElement = modal.querySelector('h2');
      if (titleElement)
      {
        const titleId = `titleElement.id || ${ modalId }-heading`;
        titleElement.id = titleId;
        modalOverlay.setAttribute('aria-labelledby', titleId);
      } else
      {
        modalOverlay.setAttribute('aria-label', `Modal ${ modalClass }`);
      }
      document.body.appendChild(modalOverlay);
      document.body.classList.add('modal-open');
      modal.querySelector('.modal-close-btn')?.addEventListener('click', () => closeModal(modalOverlay));
      modal.querySelector('.btn-cancel')?.addEventListener('click', () => closeModal(modalOverlay));
      modalOverlay.addEventListener('click', (e) => { if (e.target === modalOverlay) closeModal(modalOverlay); });
      const focusTrapInstance = trapFocus(modal, modalOverlay);
      window[`focusTrapDestroy_${ modalId }`] = focusTrapInstance.destroy;
      modalOverlay.getBoundingClientRect();
      modalOverlay.classList.add('is-visible');
      return modal;
    }

    function populateAlbumDropdown(selectElementId)
    {
      const selectEl = document.getElementById(selectElementId);
      if (!selectEl) return;
      const currentVal = selectEl.value;
      selectEl.innerHTML = '';
      if (availableAlbums.length === 0)
      {
        selectEl.innerHTML = '<option value="" disabled>Nenhum álbum disponível</option>';
        selectEl.disabled = true;
      } else
      {
        selectEl.disabled = false;
        selectEl.innerHTML = '<option value="">Selecione um Álbum</option>';
        availableAlbums.forEach(album =>
        {
          const option = document.createElement('option');
          option.value = album;
          option.textContent = album;
          selectEl.appendChild(option);
        });
        selectEl.value = availableAlbums.includes(currentVal) ? currentVal : "";
      }
    }

    function loadInitialAlbums()
    {
      Selectors.albumCardHeadings.forEach(h3 =>
      {
        const name = h3.textContent.trim();
        if (name && !availableAlbums.some(a => a.toLowerCase() === name.toLowerCase()))
        {
          availableAlbums.push(name);
        }
      });
      if (availableAlbums.length === 0 && Selectors.musicContainer)
      {
        availableAlbums.push("Álbum Padrão");
      }
      console.log("Initial albums loaded:", availableAlbums);
    }

    function getAddMusicModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="add-music-heading">Adicionar Nova Música</h2>
          <form id="add-music-form" novalidate>
            <div class="form-group"><label for="song-title">Título</label><input type="text" id="song-title" required></div>
            <div class="form-group"><label for="song-genre">Gênero</label><input type="text" id="song-genre" required></div>
            <div class="form-group">
              <label for="song-album">Álbum</label>
              <div class="album-select-group">
                <select id="song-album" required><option value="">Carregando...</option></select>
                <button type="button" id="create-album-inline-btn" class="btn btn-link">Criar Novo Álbum</button>
              </div>
            </div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Adicionar Música</button>
            </div>
          </form>
        `;
    }

    function getCreateAlbumModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="create-album-heading">Criar Novo Álbum</h2>
          <form id="create-album-form" novalidate>
            <div class="form-group"><label for="new-album-name">Nome do Álbum</label><input type="text" id="new-album-name" required></div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Criar Álbum</button>
            </div>
          </form>
        `;
    }

    function getEditProfileModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="edit-profile-heading">Editar Perfil</h2>
          <form id="edit-profile-form" novalidate>
            <div class="form-group"><label for="edit-profile-name">Nome</label><input type="text" id="edit-profile-name" required></div>
            <div class="form-group"><label for="edit-profile-tag">Tagline/Tipo</label><input type="text" id="edit-profile-tag" required></div>
            <div class="form-group"><label for="edit-profile-location">Localização</label><input type="text" id="edit-profile-location" required></div>
            <div class="form-group"><label for="edit-profile-about">Sobre</label><textarea id="edit-profile-about" rows="4" required></textarea></div>
            <div class="form-group"><label for="edit-profile-image-url">URL Imagem Perfil</label><input type="url" id="edit-profile-image-url" placeholder="https://..."></div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
        `;
    }

    function openCreateAlbumModal(triggerButton = null)
    {
      const modalElement = openModal('.create-album-overlay', 'create-album-modal', getCreateAlbumModalHTML(), triggerButton);
      if (!modalElement) return;
      const form = modalElement.querySelector('#create-album-form');
      const nameInput = modalElement.querySelector('#new-album-name');
      setTimeout(() => nameInput?.focus(), 100);
      form?.addEventListener('submit', (e) =>
      {
        e.preventDefault();
        const newName = nameInput.value.trim();
        const nameLower = newName.toLowerCase();
        if (!newName)
        {
          showToast('Nome do álbum é obrigatório.', 'error'); nameInput.classList.add('input-error'); nameInput.focus(); return;
        }
        if (availableAlbums.some(a => a.toLowerCase() === nameLower))
        {
          showToast(`Álbum "${ newName }" já existe.`, 'warning'); nameInput.classList.add('input-error'); nameInput.focus(); return;
        }
        availableAlbums.push(newName);
        availableAlbums.sort((a, b) => a.localeCompare(b));
        console.log("Album created:", newName);
        const addMusicSelect = document.getElementById('song-album');
        if (addMusicSelect && document.body.contains(addMusicSelect))
        {
          populateAlbumDropdown('song-album');
          addMusicSelect.value = newName;
        }
        showToast(`Álbum "${ newName }" criado!`, 'success');
        closeModal(modalElement.closest('.modal-overlay'));
        triggerButton?.focus();
      });
      nameInput?.addEventListener('input', () => nameInput.classList.remove('input-error'));
    }

    function setupAddMusicModal()
    {
      if (!Selectors.addMusicBtn || !Selectors.musicContainer) return;
      Selectors.addMusicBtn.addEventListener('click', () =>
      {
        const modalElement = openModal('.add-music-overlay', 'add-music-modal', getAddMusicModalHTML(), Selectors.addMusicBtn);
        if (!modalElement) return;
        const form = modalElement.querySelector('#add-music-form');
        const titleInput = modalElement.querySelector('#song-title');
        const genreInput = modalElement.querySelector('#song-genre');
        const albumSelect = modalElement.querySelector('#song-album');
        const createAlbumBtn = modalElement.querySelector('#create-album-inline-btn');
        const allInputs = [titleInput, genreInput, albumSelect];
        populateAlbumDropdown('song-album');
        createAlbumBtn?.addEventListener('click', () => openCreateAlbumModal(createAlbumBtn));
        form?.addEventListener('submit', (e) =>
        {
          e.preventDefault();
          allInputs.forEach(inp => inp.classList.remove('input-error'));
          let isValid = true; let firstInvalid = null;
          const title = titleInput.value.trim(); const genre = genreInput.value.trim(); const album = albumSelect.value;
          if (!title) { isValid = false; titleInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = titleInput; }
          if (!genre) { isValid = false; genreInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = genreInput; }
          if (!album) { isValid = false; albumSelect.classList.add('input-error'); if (!firstInvalid) firstInvalid = albumSelect; }
          if (!isValid) { showToast('Por favor, preencha todos os campos.', 'warning'); firstInvalid?.focus(); return; }
          console.log("Adding music:", { title, genre, album });
          const songCard = document.createElement('div');
          songCard.className = 'song-card'; songCard.dataset.album = album;
          songCard.innerHTML = `
                  <div class="song-icon"><div class="play-button"><svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg></div></div>
                  <div class="song-info"><h3>${ title }</h3><p>Gênero: ${ genre }</p><p class="song-card-album">Álbum: ${ album }</p></div>`;
          const playBtn = songCard.querySelector('.play-button');
          playBtn?.addEventListener('click', () => showToast(`Play: ${ title }`, 'success', 1500));
          Selectors.musicContainer.appendChild(songCard);
          showToast(`Música "${ title }" adicionada!`, 'success');
          closeModal(modalElement.closest('.modal-overlay'));
        });
        allInputs.forEach(input =>
        {
          const eventType = input.tagName === 'SELECT' ? 'change' : 'input';
          input?.addEventListener(eventType, () => input.classList.remove('input-error'));
        });
      });
    }

    function setupEditProfileModal()
    {
      if (!Selectors.editProfileBtn) return;
      Selectors.editProfileBtn.addEventListener('click', () =>
      {
        const requiredElements = [Selectors.profileName, Selectors.profileTag, Selectors.profileLocation, Selectors.profileAbout, Selectors.profileImage];
        if (requiredElements.some(el => !el))
        {
          showToast("Erro: Elementos do perfil não encontrados na página.", 'error');
          return;
        }
        const modalElement = openModal('.edit-profile-overlay', 'edit-profile-modal', getEditProfileModalHTML(), Selectors.editProfileBtn);
        if (!modalElement) return;
        const form = modalElement.querySelector('#edit-profile-form');
        const nameInput = modalElement.querySelector('#edit-profile-name');
        const tagInput = modalElement.querySelector('#edit-profile-tag');
        const locationInput = modalElement.querySelector('#edit-profile-location');
        const aboutInput = modalElement.querySelector('#edit-profile-about');
        const imageUrlInput = modalElement.querySelector('#edit-profile-image-url');
        const allInputs = [nameInput, tagInput, locationInput, aboutInput, imageUrlInput];
        if (Selectors.profileName) nameInput.value = Selectors.profileName.textContent.trim();
        if (Selectors.profileTag) tagInput.value = Selectors.profileTag.textContent.trim();
        if (Selectors.profileLocation) locationInput.value = Selectors.profileLocation.innerText?.trim() || Selectors.profileLocation.textContent.trim();
        if (Selectors.profileAbout) aboutInput.value = Selectors.profileAbout.textContent.trim();
        if (Selectors.profileImage) imageUrlInput.value = Selectors.profileImage.src;
        form?.addEventListener('submit', (e) =>
        {
          e.preventDefault();
          allInputs.forEach(inp => inp?.classList.remove('input-error'));
          let isValid = true; let firstInvalid = null;
          const newName = nameInput.value.trim(); const newTag = tagInput.value.trim();
          const newLocation = locationInput.value.trim(); const newAbout = aboutInput.value.trim();
          const newImageUrl = imageUrlInput.value.trim();
          if (!newName) { isValid = false; nameInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = nameInput; }
          if (!newTag) { isValid = false; tagInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = tagInput; }
          if (!newLocation) { isValid = false; locationInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = locationInput; }
          if (!newAbout) { isValid = false; aboutInput.classList.add('input-error'); if (!firstInvalid) firstInvalid = aboutInput; }
          if (newImageUrl) { try { new URL(newImageUrl); } catch { isValid = false; imageUrlInput.classList.add('input-error'); showToast('URL da imagem inválida.', 'warning'); if (!firstInvalid) firstInvalid = imageUrlInput; } }
          if (!isValid) { showToast('Por favor, corrija os campos inválidos.', 'error'); firstInvalid?.focus(); return; }
          if (Selectors.profileName) Selectors.profileName.textContent = newName;
          if (Selectors.profileTag) Selectors.profileTag.textContent = newTag;
          if (Selectors.profileLocation) Selectors.profileLocation.innerText = newLocation;
          if (Selectors.profileAbout) Selectors.profileAbout.textContent = newAbout;
          const oldImageUrl = Selectors.profileImage ? Selectors.profileImage.src : null;
          if (Selectors.profileImage && newImageUrl && newImageUrl !== oldImageUrl)
          {
            Selectors.profileImage.src = newImageUrl;
            Selectors.profileImage.alt = `Foto de ${ newName }`;
            Selectors.profileImage.onerror = () =>
            {
              if (oldImageUrl) Selectors.profileImage.src = oldImageUrl;
              Selectors.profileImage.onerror = null;
            };
            Selectors.profileImage.onload = () => { Selectors.profileImage.onerror = null; };
          } else if (Selectors.profileImage && !newImageUrl && oldImageUrl)
          {
            console.log("Profile image URL cleared.");
          }
          showToast('Perfil atualizado com sucesso!', 'success');
          closeModal(modalElement.closest('.modal-overlay'));
        });
        allInputs.forEach(input => input?.addEventListener('input', () => input.classList.remove('input-error')));
      });
    }

    document.addEventListener('keydown', (e) =>
    {
      if (e.key === 'Escape')
      {
        const openModalOverlay = document.querySelector('.modal-overlay.is-visible');
        if (openModalOverlay)
        {
          closeModal(openModalOverlay);
        }
      }
    });

    function initialize()
    {
      console.log("Initializing page script (no header popups)...");
      loadInitialAlbums();
      setupAddMusicModal();
      setupEditProfileModal();
      if (Selectors.addEventBtn && Selectors.eventsContainer)
      {
        Selectors.addEventBtn.addEventListener('click', () =>
        {
          showToast('Funcionalidade "Adicionar Evento" ainda não implementada.', 'warning');
        });
      }
      console.log("Initialization complete (no header popups).");
    }
    initialize();

  });

</script>
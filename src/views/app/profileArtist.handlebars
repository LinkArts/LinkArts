<div class="main-content">
  <div class="container-profile">
    <section class="profile-info">
      <div class="profile-left">
        <div class="profile-img">
          <img id="profile-main-image" src="{{#if values.imageUrl}}{{values.imageUrl}}{{else}}/img/default.jpg{{/if}}" alt="{{values.name}}">
        </div>
                  <div class="profile-details">
            <h1 id="profile-name">{{values.name}}</h1>
            <p id="profile-location" class="profile-location">{{#if values.city}}{{values.city}}{{else}}Cidade não
              informada{{/if}}</p>
            <div class="profile-rating"
              aria-label="Avaliação: {{artist.profile.rating}} de 5 estrelas (baseado em {{artist.profile.reviewCount}} avaliações)">
              <div class="stars" aria-hidden="true">
              </div class="rating-content">
              <span style="margin-bottom: 5px;">★</span>
              <span class="rating">4.5</span>
              <span class="reviews">(8 reviews)</span>
            </div>
          </div>
      </div>
      <div class="profile-actions">
        <a href="/agenda/{{values.id}}" class="btn btn-outline">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect width="18" height="18" x="3" y="4" rx="2"></rect>
            <line x1="16" x2="16" y1="2" y2="6"></line>
            <line x1="8" x2="8" y1="2" y2="6"></line>
            <line x1="3" x2="21" y1="10" y2="10"></line>
          </svg>
          Agenda
        </a>
        {{#if isOwner}}
        <button id="edit-profile-btn" class="btn btn-primary">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
          </svg>
          Editar Perfil
        </button>
        {{else}}
        <button id="create-chat-btn" class="btn btn-primary" data-user-id="{{values.id}}">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
          </svg>
          Abrir Chat
        </button>
        <button id="add-favorite-btn" class="btn btn-outline" data-user-id="{{values.id}}">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path
              d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
          </svg>
          Adicionar aos Favoritos
        </button>
        <button id="report-profile-btn" class="btn btn-outline" data-user-id="{{values.id}}">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path
              d="M3 3l18 18M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
          </svg>
          Denunciar Perfil
        </button>
        {{/if}}
      </div>
    </section>

    <section class="about-section">
      <div class="about-header">
        <h2>Sobre </h2>
        <div class="social-icons">
          {{#if values.linkedin}}
          <a href="{{values.linkedin}}" target="_blank" rel="noopener noreferrer" class="social-icon linkedin"
            aria-label="LinkedIn">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
              <rect width="4" height="12" x="2" y="9" />
              <circle cx="4" cy="4" r="2" />
            </svg>
          </a>
          {{/if}}
          {{#if values.instagram}}
          <a href="{{values.instagram}}" target="_blank" rel="noopener noreferrer" class="social-icon instagram"
            aria-label="Instagram">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect width="20" height="20" x="2" y="2" rx="5" ry="5" />
              <path d="m16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" />
              <line x1="17.5" x2="17.51" y1="6.5" y2="6.5" />
            </svg>
          </a>
          {{/if}}
          {{#if values.facebook}}
          <a href="{{values.facebook}}" target="_blank" rel="noopener noreferrer" class="social-icon facebook"
            aria-label="Facebook">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" />
            </svg>
          </a>
          {{/if}}
        </div>
      </div>
      <p id="profile-about">{{#if values.description}}{{values.description}}{{else}}Descrição não informada.{{/if}}</p>
      {{#if values.tags}}
      <div class="tags">
        {{#each values.tags}}
        <span class="tag">{{name}}</span>
        {{/each}}
      </div>
      {{/if}}
    </section>

    <section class="albums-section">
      <div class="section-header">
        <h2>Álbuns</h2>
        {{#if isOwner}}
        <button id="add-album-action-button" class="btn btn-outline btn-purple">Adicionar Álbum</button>
        {{/if}}
      </div>
      <div class="scroll-container albums-container">
        {{#if values.albums}}
        {{#each values.albums}}
        <div class="album-card" data-id="{{id}}">
          <div class="album-img">
            <img src="{{#if imageUrl}}{{imageUrl}}{{else}}/img/default.jpg{{/if}}" alt="{{ name }}">
          </div>
          <h3 class="album-name">{{ name }}</h3>
        </div>
        {{/each}}
        {{else}}
        <p class="modal-empty-state">Nenhum álbum encontrado.</p>
        {{/if}}
      </div>
    </section>

    <section class="music-section">
      <div class="section-header">
        <h2>Portfólio de Músicas</h2>
        {{#if isOwner}}
        <button id="add-music-action-button" class="btn btn-outline btn-purple">Adicionar Música</button>
        {{/if}}
      </div>
      <div class="scroll-container music-container">
        {{#if values.musics}}
        {{#each values.musics}}
        <div class="song-card" data-id="{{id}}">
          <div class="song-icon">
            {{#if image}}
            <img src="{{image}}" alt="{{this.name}}" class="song-image">
            {{else}}
            <div class="song-placeholder">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 3v18m-4-6 4 4 4-4"/>
              </svg>
            </div>
            {{/if}}
          </div>
          <div class="song-info">
            <h3>{{this.name}}</h3>
            <p>Tags:
              {{#if tags}}
              {{#each tags}}
              {{name}}{{#unless @last}}, {{/unless}}
              {{/each}}
              {{else}}
              Nenhuma tag associada
              {{/if}}
            </p>
          </div>
        </div>
        {{/each}}
        {{else}}
        <p>Nenhuma música no portfólio no momento.</p>
        {{/if}}
      </div>
    </section>

    <section class="reviews-section">
      <div class="section-header">
        <h2>Reviews</h2>
        <a href="{{artist.allReviewsUrl}}" class="btn-link">Ver Todas</a>
      </div>
      {{#each artist.reviews}}
      <div class="review-card">
        <div class="review-header">
          <h3>{{this.reviewerName}}</h3>
          <div class="review-stars" aria-label="Avaliação: {{this.rating}} de 5 estrelas">
          </div>
        </div>
        <p class="review-text">"{{{this.text}}}"</p>''
      </div>
      {{else}}
      <p>Ainda não há reviews.</p>
      {{/each}}
    </section>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () =>
  {
    let lastFocusedElement = null;
    let availableAlbums = [];
    let availableTags = [];
    
    // Capturar se o usuário é o dono do perfil
    const isOwner = {{#if isOwner}}true{{else}}false{{/if}};

    const Selectors = {
      profileName: document.getElementById('profile-name') ?? document.querySelector('.profile-details h1'),
      //profileTag: document.getElementById('profile-tag') ?? document.querySelector('.profile-tag'),
      profileLocation: document.getElementById('profile-location') ?? document.querySelector('.profile-location'),
      profileAbout: document.getElementById('profile-about') ?? document.querySelector('.about-section p'),
      profileImage: document.getElementById('profile-main-image') ?? document.querySelector('.profile-img img'),

      addMusicBtn: document.getElementById('add-music-action-button'),
      addAlbumBtn: document.getElementById('add-album-action-button'),
      editProfileBtn: document.getElementById('edit-profile-btn'),
      reportProfileBtn: document.getElementById('report-profile-btn'),

      musicContainer: document.querySelector('.music-container'),
      albumContainer: document.querySelector('.albums-container'),
    };

    document.getElementById('add-favorite-btn')?.addEventListener('click', async function ()
    {
      const userId = this.dataset.userId;
      try
      {
        const response = await fetch(`/profile/adicionar-favorito/${ userId }`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });

        const data = await response.json();
        if (data.removed)
          showToast(data.message || 'Erro ao adicionar aos favoritos', 'error');
        else
          showToast(data.message || 'Erro ao adicionar aos favoritos', 'success');

      } catch (error)
      {
        console.error('Erro ao adicionar aos favoritos:', error);
        showToast('Erro ao adicionar aos favoritos', 'error');
      }
    });

    function showToast(message, type = 'success', duration = 3500)
    {
      document.querySelectorAll('.toast.show').forEach(t => t.remove());
      const toast = document.createElement('div');
      toast.className = `toast ${ type }`;
      let iconSvg = '';
      if (type === 'success') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z" /></svg>';
      else if (type === 'warning') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 0 0-.44 0L1.698 13.939a.25.25 0 0 0 .22.361h12.164a.25.25 0 0 0 .22-.361L8.22 1.754ZM8 11.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM8.25 6v3.5a.25.25 0 0 1-.5 0V6a.25.25 0 0 1 .5 0Z" /></svg>';
      else if (type === 'error') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M4.47 4.47a.75.75 0 0 1 1.06 0L8 6.94l2.47-2.47a.75.75 0 1 1 1.06 1.06L9.06 8l2.47 2.47a.75.75 0 1 1-1.06 1.06L8 9.06l-2.47 2.47a.75.75 0 0 1-1.06-1.06L6.94 8 4.47 5.53a.75.75 0 0 1 0-1.06Z" /></svg>';
      toast.innerHTML = `${ iconSvg } <span>${ message }</span>`;
      document.body.appendChild(toast);
      toast.getBoundingClientRect();
      toast.classList.add('show');
      setTimeout(() =>
      {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => toast.remove(), { once: true });
      }, duration);
    }

    function trapFocus(modalElement, overlayElement)
    {
      const focusableElements = Array.from(
        modalElement.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
      ).filter(el => el.offsetParent !== null);
      if (focusableElements.length === 0) return { destroy: () => { } };
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      let isTrapActive = true;
      setTimeout(() =>
      {
        if (isTrapActive && overlayElement.classList.contains('is-visible')) firstElement.focus();
      }, 100);
      const handleKeydown = (e) =>
      {
        if (!isTrapActive || !overlayElement.classList.contains('is-visible')) return;
        if (e.key === 'Tab')
        {
          if (e.shiftKey)
          {
            if (document.activeElement === firstElement)
            {
              lastElement.focus();
              e.preventDefault();
            }
          } else
          {
            if (document.activeElement === lastElement)
            {
              firstElement.focus();
              e.preventDefault();
            }
          }
        } else if (e.key === 'Escape')
        {
          closeModal(overlayElement);
        }
      };
      overlayElement.addEventListener('keydown', handleKeydown);
      const destroy = () =>
      {
        if (isTrapActive)
        {
          overlayElement.removeEventListener('keydown', handleKeydown);
          isTrapActive = false;
        }
      };
      return { destroy };
    }

    function closeModal(modalOverlay)
    {
      if (!modalOverlay || !document.body.contains(modalOverlay))
      {
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        return;
      }
      const modalId = modalOverlay.dataset.modalId;
      const destroyerKey = `focusTrapDestroy_${ modalId }`;
      if (modalId && typeof window[destroyerKey] === 'function')
      {
        try
        {
          window[destroyerKey]();
          delete window[destroyerKey];
        } catch (e)
        {
          console.error("Error destroying focus trap:", e);
        }
      }
      if (modalOverlay.classList.contains('is-visible'))
      {
        modalOverlay.classList.remove('is-visible');
        const onTransitionEnd = (event) =>
        {
          if (event && event.target !== modalOverlay) return;
          modalOverlay.remove();
          if (!document.querySelector('.modal-overlay.is-visible'))
          {
            document.body.classList.remove('modal-open');
          }
          if (lastFocusedElement && typeof lastFocusedElement.focus === 'function')
          {
            try
            {
              lastFocusedElement.focus();
            } catch (e)
            {
              console.warn("Error restoring focus:", e);
            }
            lastFocusedElement = null;
          }
        };
        modalOverlay.addEventListener('transitionend', onTransitionEnd, { once: true });
        setTimeout(() =>
        {
          if (document.body.contains(modalOverlay) && !modalOverlay.classList.contains('is-visible')) onTransitionEnd(null);
        }, 500);
      } else
      {
        modalOverlay.remove();
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        if (lastFocusedElement)
        {
          try
          {
            lastFocusedElement.focus();
          } catch (e) { }
        }
        lastFocusedElement = null;
      }
    }

    function openModal(overlaySelector, modalClass, modalHTMLContent, triggerButton = null)
    {
      if (!overlaySelector || !modalClass) return null;
      const existingOverlay = document.querySelector(overlaySelector);
      if (existingOverlay) closeModal(existingOverlay);
      lastFocusedElement = triggerButton || document.activeElement;
      const modalOverlay = document.createElement('div');
      const overlayClassName = overlaySelector.startsWith('.') ? overlaySelector.substring(1) : overlaySelector.replace('#', '');
      modalOverlay.className = `modal-overlay ${ overlayClassName }`;
      modalOverlay.setAttribute('role', 'dialog');
      modalOverlay.setAttribute('aria-modal', 'true');
      const modalId = `${ modalClass }-${ Date.now() }`;
      modalOverlay.dataset.modalId = modalId;
      const modal = document.createElement('div');
      modal.className = modalClass;
      modal.innerHTML = modalHTMLContent;
      modalOverlay.appendChild(modal);
      const titleElement = modal.querySelector('h2');
      if (titleElement)
      {
        const titleId = titleElement.id || `${ modalId }-heading`;
        titleElement.id = titleId;
        modalOverlay.setAttribute('aria-labelledby', titleId);
      } else
      {
        modalOverlay.setAttribute('aria-label', `Modal ${ modalClass }`);
      }
      document.body.appendChild(modalOverlay);
      document.body.classList.add('modal-open');
      modal.querySelector('.modal-close-btn')?.addEventListener('click', () => closeModal(modalOverlay));
      modal.querySelector('.btn-cancel')?.addEventListener('click', () => closeModal(modalOverlay));
      modalOverlay.addEventListener('click', (e) =>
      {
        if (e.target === modalOverlay) closeModal(modalOverlay);
      });
      const focusTrapInstance = trapFocus(modal, modalOverlay);
      window[`focusTrapDestroy_${ modalId }`] = focusTrapInstance.destroy;
      modalOverlay.getBoundingClientRect();
      modalOverlay.classList.add('is-visible');
      return modal;
    }

    async function populateAlbumDropdown(selectElementId, selectedAlbums = null)
    {
      try {
        const res = await fetch('/profile/albums');
        
        if (!res.ok) {
          if (res.status === 401) {
            showToast('Sua sessão expirou. Redirecionando...', 'error');
            setTimeout(() => window.location.href = '/login', 2000);
            return;
          }
          throw new Error(`HTTP ${res.status}`);
        }
        
        const data = await res.json();
        availableAlbums = data.albums;
      } catch (err) {
        console.error("Error fetching albums:", err);
        showToast('Erro ao carregar álbuns.', 'error');
        availableAlbums = [];
      }

      const selectEl = document.getElementById(selectElementId);
      if (!selectEl) return;
      
      selectEl.innerHTML = '';
      selectEl.disabled = false;
      
      // Adicionar álbuns disponíveis
      if (availableAlbums?.length > 0) {
        availableAlbums.forEach(album => {
          const option = document.createElement('option');
          option.value = album.name;
          option.textContent = album.name;
          selectEl.appendChild(option);
        });
      }
      
      // Inicializar Select2 para seleção múltipla
      $(selectEl).select2({
        placeholder: 'Selecione os álbuns (opcional)',
        allowClear: true,
        multiple: true,
        width: '100%'
      });
      
      // Selecionar os álbuns apropriados
      if (selectedAlbums && Array.isArray(selectedAlbums) && selectedAlbums.length > 0) {
        // Filtrar apenas álbuns que ainda existem
        const validAlbums = selectedAlbums.filter(albumName => 
          availableAlbums?.some(album => album.name === albumName)
        );
        $(selectEl).val(validAlbums).trigger('change');
      } else {
        $(selectEl).val([]).trigger('change');
      }
    }

    // Função removida - não atualizar preview até salvar
    // function updateMusicImagePreview(musicId, imageUrl, musicTitle) {
    //   // Esta função foi removida para implementar o novo comportamento:
    //   // Preview apenas no modal do uploader, sem atualizar cards até salvar
    // }

    function getCreateAlbumModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="create-album-heading">Criar Novo Álbum</h2>
          <form id="create-album-form" novalidate>
            <div class="form-group"><label for="new-album-name">Nome do Álbum</label><input type="text" id="new-album-name" maxlength="50" required></div>
            <div class="form-group">
              <label>Capa do Álbum</label>
              <div id="album-cover-uploader"></div>
            </div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Criar Álbum</button>
            </div>
          </form>
        `;
    }

    function getEditProfileModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="edit-profile-heading">Editar Perfil do Artista</h2>
          <form id="edit-profile-form" novalidate>
            <div class="form-group"> <label for="edit-profile-name">Nome do Artista</label> <input type="text" id="edit-profile-name" maxlength="100" required> </div>
            <div class="form-group"> <label for="edit-profile-location">Localização</label> <input type="text" id="edit-profile-location" maxlength="30" required> </div>
            <div class="form-group"> <label for="edit-profile-about">Sobre o Artista</label> <textarea id="edit-profile-about" rows="5" maxlength="500" required></textarea> </div>
            <div class="form-group"> 
              <label>Foto de Perfil</label> 
              <div id="profile-image-uploader"></div> 
            </div>
            <div class="form-group"> <label for="edit-profile-linkedin">LinkedIn</label> <input type="url" id="edit-profile-linkedin" placeholder="https://linkedin.com/in/empresa"> </div>
            <div class="form-group"> <label for="edit-profile-instagram">Instagram</label> <input type="url" id="edit-profile-instagram" placeholder="https://instagram.com/empresa"> </div>
            <div class="form-group"> <label for="edit-profile-facebook">Facebook</label> <input type="url" id="edit-profile-facebook" placeholder="https://facebook.com/empresa"> </div>
            <div class="form-group"><label for="edit-profile-tags">Tags do Perfil</label><select id="edit-profile-tags" name="tags" multiple style="width: 100%"></select></div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
        `;
    }

    function getAddMusicModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="add-music-heading">Adicionar Nova Música</h2>
          <form id="add-music-form" novalidate>
            <div class="form-group"><label for="song-title">Título</label><input type="text" id="song-title" maxlength="40" required></div>
            <div class="form-group">
              <label>Imagem da Música</label>
              <div id="music-image-uploader"></div>
            </div>
            <div class="form-group">
              <label for="song-tag">Tags</label>
              <div class="tag-select-group">
                <select id="song-tag" class="js-example-basic-multiple" name="tags[]" multiple="multiple" required><option value="">Carregando...</option><option value="">Carregando...</option><option value="">Carregando...</option><option value="">Carregando...</option></select>
              </div>
            </div>
            <div class="form-group">
              <label for="song-album">Álbuns</label>
              <div class="album-select-group">
                <select id="song-album" multiple><option value="">Carregando...</option></select>
                <button type="button" id="create-album-inline-btn" class="btn btn-link">Criar Novo Álbum</button>
              </div>
            </div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Adicionar Música</button>
            </div>
          </form>
        `;
    }

    function getAlbumContentModalHTML(albumName, songsInAlbum, albumData = null)
    {
      let songsHTML = '';
      if (songsInAlbum && songsInAlbum.length > 0)
      {
        songsHTML = songsInAlbum.map(song => `
      <div class="song-card" data-id="${ song.id }">
        ${isOwner ? `<button class="remove-from-album-btn" data-song-id="${song.id}" aria-label="Remover música do álbum">×</button>` : ''}
        <div class="song-icon">
          ${song.image ? `<img src="${song.image}" alt="${song.name}" class="song-image">` : `
          <div class="song-placeholder">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 3v18m-4-6 4 4 4-4"/>
            </svg>
          </div>`}
        </div>
        <div class="song-info">
          <h3>${ song.name }</h3>
          <p>Tag: ${ song.genre }</p>
        </div>
      </div>
    `).join('');
      } else
      {
        songsHTML = '<p class="modal-empty-state">Nenhuma música encontrada neste álbum.</p>';
      }

      // Seção de edição só aparece para o dono do perfil
      const albumEditSection = isOwner ? `
        <div class="album-edit-section">
          <div class="form-group"><label for="edit-album-name">Nome do Álbum</label><input type="text" id="edit-album-name" value="${albumName}" maxlength="50" required></div>
          <div class="form-group">
            <label>Capa do Álbum</label>
            <div id="album-edit-cover-uploader"></div>
          </div>
        </div>
      ` : '';

      // Botões de ação só aparecem para o dono do perfil
      const actionButtons = isOwner ? `
        <button type="button" class="btn btn-danger" id="delete-album-btn">Excluir Álbum</button>
        <button type="button" class="btn btn-primary" id="save-album-changes">Salvar Alterações</button>
      ` : '';

      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="album-content-heading">Músicas do Álbum: "${ albumName }"</h2>
          ${ albumEditSection }
          <div class="modal-body-scrollable">
            ${ songsHTML }
          </div>
          <div class="button-group">
            ${ actionButtons }
            <button type="button" class="btn btn-cancel">Fechar</button>
          </div>
        `;
    }

    function getEditMusicModalHTML(song)
    {
      return `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
        <h2 id="edit-music-heading">Editar Música: ${ song.title }</h2>
        <form id="edit-music-form" novalidate>
          <input type="hidden" id="edit-music-original-title" value="${ song.title }">
          <input type="hidden" id="edit-music-original-albums" value="${ Array.isArray(song.albums) ? song.albums.join(',') : '' }">

          <div class="form-group"><label for="edit-song-title">Título</label><input type="text" id="edit-song-title" value="${ song.title }" maxlength="40" required></div>
          <div class="form-group">
            <label>Imagem da Música</label>
            <div id="edit-music-image-uploader"></div>
          </div>
          <div class="form-group">
              <label for="edit-song-tag">Tags</label>
              <div class="tag-select-group">
                <select id="edit-song-tag" class="js-example-basic-multiple" name="tags[]" multiple="multiple" required><option value="">Carregando...</option></select>
              </div>
            </div>
          <div class="form-group">
            <label for="edit-song-album">Álbuns</label>
            <select id="edit-song-album" multiple><option value="">Carregando...</option></select>
          </div>
          <div class="button-group">
            <button type="button" class="btn btn-danger" id="delete-music-btn">Excluir Música</button>
            <button type="button" class="btn btn-cancel">Cancelar</button>
            <button type="submit" class="btn btn-primary">Salvar Alterações</button>
          </div>
        </form>
      `;
    }

    async function openCreateAlbumModal(triggerButton = null)
    {
      const modalElement = openModal('.create-album-overlay', 'create-album-modal', getCreateAlbumModalHTML(), triggerButton);
      if (!modalElement) return;

      const form = modalElement.querySelector('#create-album-form');
      const nameInput = modalElement.querySelector('#new-album-name');

      // Inicializar upload de capa
      setTimeout(() => {
        const albumCoverUploader = createImageUploader({
          containerId: 'album-cover-uploader',
          uploadEndpoint: '/upload/album/cover',
          currentImageUrl: '/img/placeholder.svg',
          onSuccess: (result) => {
            console.log('Upload de capa do álbum bem-sucedido:', result);
          },
          onError: (error) => {
            console.error('Erro no upload de capa do álbum:', error);
          }
        });
        form.albumCoverUploader = albumCoverUploader;
        nameInput?.focus();
      }, 100);

      form?.addEventListener('submit', async (e) =>
      {
        e.preventDefault();
        const newName = nameInput.value.trim();
        const nameLower = newName.toLowerCase();

        if (!newName)
        {
          showToast('Nome do álbum é obrigatório.', 'error');
          nameInput.classList.add('input-error');
          nameInput.focus();
          return;
        }

        if (newName.length > 50)
        {
          showToast('Nome do álbum deve ter no máximo 50 caracteres.', 'error');
          nameInput.classList.add('input-error');
          nameInput.focus();
          return;
        }

        try
        {
          const res = await fetch(`/profile/procurar-album/${ encodeURIComponent(newName) }`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });
          
          if (!res.ok) {
            if (res.status === 401) {
              showToast('Sua sessão expirou. Redirecionando...', 'error');
              setTimeout(() => window.location.href = '/login', 2000);
              return;
            }
            if (res.status === 404) {
              showToast('Rota não encontrada. Verifique se o servidor está funcionando.', 'error');
              return;
            }
            throw new Error(`Erro HTTP ${res.status}: ${res.statusText}`);
          }
          
          const data = await res.json();

          if (data.albumExists)
          {
            showToast('Álbum já existe.', 'error');
            nameInput.classList.add('input-error');
            nameInput.focus();
            return;
          }
        }
        catch (err)
        {
          console.error("Erro ao verificar álbum:", err);
          
          // Verificar se é erro de rede
          if (err instanceof TypeError && err.message.includes('fetch')) {
            showToast('Erro de conexão. Verifique sua internet e tente novamente.', 'error');
          } else if (err.message.includes('401')) {
            showToast('Sua sessão expirou. Faça login novamente.', 'error');
            setTimeout(() => window.location.href = '/login', 2000);
          } else if (err.message.includes('404')) {
            showToast('Serviço temporariamente indisponível. Tente novamente.', 'error');
          } else {
            showToast(`Erro ao verificar álbum: ${err.message}`, 'error');
          }
          return;
        }

        try
        {
          let finalImageUrl = null;
          
          // Fazer upload da imagem se houver alguma pendente
          if (form.albumCoverUploader?.hasPendingUpload()) {
            console.log('Fazendo upload da capa do álbum...');
            const uploadResult = await form.albumCoverUploader.uploadPendingImage();
            if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
              finalImageUrl = uploadResult.imageUrl;
              console.log('Upload da capa concluído, nova URL:', finalImageUrl);
            } else {
              throw new Error('Falha no upload da capa do álbum');
            }
          }

          await renderAlbumCard(newName, finalImageUrl);

          const addMusicSelect = document.getElementById('song-album');
          if (addMusicSelect && document.body.contains(addMusicSelect))
          {
            await populateAlbumDropdown('song-album');
            addMusicSelect.value = newName;
          }

          closeModal(modalElement.closest('.modal-overlay'));
          triggerButton?.focus();
        }
        catch (error)
        {
          console.error("Error creating album:", error);
          showToast(`Erro ao criar álbum: ${error.message}`, 'error');
        }
      });

      nameInput?.addEventListener('input', () => nameInput.classList.remove('input-error'));
    }

    async function updateAlbumCover(albumId, imageUrl) {
      try {
        const response = await fetch('/profile/atualizar-album-capa', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ albumId, imageUrl })
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            showToast('Sua sessão expirou. Redirecionando...', 'error');
            setTimeout(() => window.location.href = '/login', 2000);
            return;
          }
          
          let errorMessage = 'Erro ao atualizar capa do álbum';
          try {
            const errorData = await response.json();
            errorMessage = errorData.message || errorMessage;
          } catch (e) {
            // Se não conseguir fazer parse do JSON, usa mensagem padrão
          }
          
          throw new Error(errorMessage);
        }
        
        return response.json();
      } catch (error) {
        console.error('Erro na requisição updateAlbumCover:', error);
        throw error;
      }
    }

    async function updateAlbumName(albumId, newName) {
      try {
        const response = await fetch('/profile/atualizar-album-nome', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ albumId, name: newName })
        });
        
        if (!response.ok) {
          if (response.status === 401) {
            showToast('Sua sessão expirou. Redirecionando...', 'error');
            setTimeout(() => window.location.href = '/login', 2000);
            return;
          }
          
          let errorMessage = 'Erro ao atualizar nome do álbum';
          try {
            const errorData = await response.json();
            errorMessage = errorData.message || errorMessage;
          } catch (e) {
            // Se não conseguir fazer parse do JSON, usa mensagem padrão
          }
          
          throw new Error(errorMessage);
        }
        
        return response.json();
      } catch (error) {
        console.error('Erro na requisição updateAlbumName:', error);
        throw error;
      }
    }

    async function openAlbumContentModal(albumName, albumid, triggerButton = null)
    {
      const albumNameLower = albumName.toLowerCase();
      let songsForAlbum = [];
      let albumData = null;

      await fetch(`/profile/procurar-album-musicas/${ albumid }`)
        .then(res => res.json())
        .then(data =>
        {
          songsForAlbum = data.data.Musics || [];
          albumData = data.data;

          if (songsForAlbum.length === 0 && Selectors.musicContainer)
          {
            songs = songsForAlbum;
            songsForAlbum = songs
              .map(song => ({
                title: song.name || 'Título Desconhecido',
                genre: song.genre || 'Gênero Desconhecido',
                album: 'TESTE'
              }));
          }

          const modalElement = openModal('.album-content-overlay', 'album-content-modal', getAlbumContentModalHTML(albumName, songsForAlbum, albumData), triggerButton);
          if (modalElement)
          {
            setupPlayButtons(modalElement);
            
            // Inicializar upload de capa apenas para o dono do perfil
            setTimeout(() => {
              let albumCoverUploader = null;
              
              if (isOwner) {
                const currentCoverUrl = albumData?.imageUrl || '/img/default.jpg';
                albumCoverUploader = createImageUploader({
                  containerId: 'album-edit-cover-uploader',
                  uploadEndpoint: '/upload/album/cover',
                  currentImageUrl: currentCoverUrl,
                  onSuccess: (result) => {
                    console.log('Upload de capa do álbum bem-sucedido:', result);
                  },
                  onError: (error) => {
                    console.error('Erro no upload de capa do álbum:', error);
                  }
                });
                modalElement.albumCoverUploader = albumCoverUploader;
              }
              modalElement.albumId = albumid;
              
              // Adicionar evento para remover classe de erro do campo de nome
              const albumNameInput = modalElement.querySelector('#edit-album-name');
              albumNameInput?.addEventListener('input', () => {
                albumNameInput.classList.remove('input-error');
              });
              
              // Configurar botões de remoção de música do álbum (apenas para o dono)
              if (isOwner) {
                const removeButtons = modalElement.querySelectorAll('.remove-from-album-btn');
                removeButtons.forEach(btn => {
                  btn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const musicId = btn.dataset.songId;
                    const songCard = btn.closest('.song-card');
                    const songName = songCard?.querySelector('h3')?.textContent || 'Esta música';
                    
                    if (!confirm(`Remover "${songName}" deste álbum?`)) {
                      return;
                    }
                    
                    try {
                      const response = await fetch(`/profile/remover-musica-album/${albumid}/${musicId}`, {
                        method: 'DELETE',
                        headers: {
                          'Content-Type': 'application/json'
                        }
                      });
                      
                      if (!response.ok) {
                        if (response.status === 401) {
                          showToast('Sua sessão expirou. Redirecionando...', 'error');
                          setTimeout(() => window.location.href = '/login', 2000);
                          return;
                        }
                        throw new Error(`Erro HTTP ${response.status}`);
                      }
                      
                      const result = await response.json();
                      
                      if (result.success) {
                        // Remover o card da música do modal
                        songCard.remove();
                        
                        // Verificar se ainda há músicas no álbum
                        const remainingSongs = modalElement.querySelectorAll('.song-card');
                        if (remainingSongs.length === 0) {
                          const modalBody = modalElement.querySelector('.modal-body-scrollable');
                          modalBody.innerHTML = '<p class="modal-empty-state">Nenhuma música encontrada neste álbum.</p>';
                        }
                        
                        showToast(result.message || 'Música removida do álbum com sucesso!', 'success');
                      } else {
                        throw new Error(result.message || 'Erro ao remover música do álbum');
                      }
                    } catch (error) {
                      console.error('Erro ao remover música do álbum:', error);
                      showToast(`Erro ao remover música: ${error.message}`, 'error');
                    }
                  });
                });
              }
              
              // Configurar botão de salvar apenas para o dono do perfil
              if (isOwner && albumCoverUploader) {
                const saveBtn = modalElement.querySelector('#save-album-changes');
                saveBtn?.addEventListener('click', async () => {
                try {
                  const albumNameInput = modalElement.querySelector('#edit-album-name');
                  const newAlbumName = albumNameInput.value.trim();
                  
                  // Validar nome do álbum
                  if (!newAlbumName) {
                    showToast('Nome do álbum é obrigatório.', 'error');
                    albumNameInput.classList.add('input-error');
                    albumNameInput.focus();
                    return;
                  }
                  
                  if (newAlbumName.length > 50) {
                    showToast('Nome do álbum deve ter no máximo 50 caracteres.', 'error');
                    albumNameInput.classList.add('input-error');
                    albumNameInput.focus();
                    return;
                  }
                  
                  let finalImageUrl = albumCoverUploader.getCurrentImageUrl();
                  let imageUpdated = false;
                  
                  // Se há upload pendente, fazer o upload primeiro
                  if (albumCoverUploader.hasPendingUpload()) {
                    console.log('Fazendo upload da imagem...');
                    const uploadResult = await albumCoverUploader.uploadPendingImage();
                    if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
                      finalImageUrl = uploadResult.imageUrl;
                      imageUpdated = true;
                      console.log('Upload concluído, nova URL:', finalImageUrl);
                    } else {
                      throw new Error('Falha no upload da imagem');
                    }
                  }
                  
                  // Atualizar nome do álbum se foi alterado
                  if (newAlbumName !== albumName) {
                    console.log('Atualizando nome do álbum:', newAlbumName);
                    await updateAlbumName(albumid, newAlbumName);
                  }
                  
                  // Atualizar capa se necessário
                  if (imageUpdated && !finalImageUrl.startsWith('data:') && !finalImageUrl.startsWith('blob:')) {
                    console.log('Atualizando capa do álbum com URL:', finalImageUrl);
                    await updateAlbumCover(albumid, finalImageUrl);
                  }
                  
                  closeModal(modalElement.closest('.modal-overlay'));
                  showToast('Álbum atualizado com sucesso!', 'success');
                  
                  // Atualizar o card do álbum no DOM
                  const albumCard = document.querySelector(`[data-id="${albumid}"]`);
                  if (albumCard) {
                    // Atualizar nome (truncar se necessário para exibição)
                    const nameElement = albumCard.querySelector('.album-name');
                    if (nameElement) {
                      const displayName = newAlbumName.length > 20 ? newAlbumName.substring(0, 20) + '...' : newAlbumName;
                      nameElement.textContent = displayName;
                      nameElement.title = newAlbumName; // Tooltip com nome completo
                    }
                    
                    // Atualizar imagem se foi alterada
                    if (imageUpdated) {
                      const img = albumCard.querySelector('img');
                      if (img) img.src = finalImageUrl;
                    }
                  }
                } catch (error) {
                  console.error('Erro ao salvar alterações do álbum:', error);
                  showToast(`Erro ao salvar alterações do álbum: ${error.message}`, 'error');
                }
              });
              }
              
              // Configurar botão de excluir álbum apenas para o dono do perfil
              if (isOwner) {
                const deleteBtn = modalElement.querySelector('#delete-album-btn');
                deleteBtn?.addEventListener('click', async () => {
                const confirmation = confirm(`Você realmente deseja excluir esse album? Suas músicas serão mantidas.`);
                
                if (!confirmation) {
                  return;
                }
                
                try {
                  const response = await fetch(`/profile/deletar-album/${albumid}`, {
                    method: 'DELETE',
                    headers: {
                      'Content-Type': 'application/json'
                    }
                  });
                  
                  if (!response.ok) {
                    if (response.status === 401) {
                      showToast('Sua sessão expirou. Redirecionando...', 'error');
                      setTimeout(() => window.location.href = '/login', 2000);
                      return;
                    }
                    throw new Error(`Erro HTTP ${response.status}`);
                  }
                  
                  const result = await response.json();
                  
                  if (result.success) {
                    // Fechar modal
                    closeModal(modalElement.closest('.modal-overlay'));
                    
                    // Remover card do álbum do DOM
                    const albumCard = document.querySelector(`[data-id="${albumid}"]`);
                    if (albumCard) {
                      albumCard.remove();
                    }
                    
                    // Atualizar dropdown de álbuns se estiver aberto
                    const albumSelects = document.querySelectorAll('#song-album, #edit-song-album');
                    albumSelects.forEach(select => {
                      const optionToRemove = select.querySelector(`option[value="${albumName}"]`);
                      if (optionToRemove) {
                        optionToRemove.remove();
                      }
                    });
                    
                    showToast(result.message || 'Álbum excluído com sucesso!', 'success');
                  } else {
                    throw new Error(result.message || 'Erro ao excluir álbum');
                  }
                } catch (error) {
                  console.error('Erro ao excluir álbum:', error);
                  showToast(`Erro ao excluir álbum: ${error.message}`, 'error');
                }
              });
              } // Fim do segundo if (isOwner) - botão excluir
            }, 100);
          }
        })
        .catch(err =>
        {
          console.error("Erro no album!!!:", err);
          showToast('Erro ao carregar músicas!', 'error');
        });
    }

    async function setupAddMusicModal()
    {
      if (Selectors.addMusicBtn)
      {
        Selectors.addMusicBtn.addEventListener('click', async () =>
        {
          const modalElement = openModal('.add-music-overlay', 'add-music-modal', getAddMusicModalHTML(), Selectors.addMusicBtn);
          setTimeout(() =>
          {
            $('.js-example-basic-multiple').select2();
            
            // Inicializar upload de imagem da música
            const musicImageUploader = createImageUploader({
              containerId: 'music-image-uploader',
              uploadEndpoint: '/upload/music/cover',
              currentImageUrl: '/img/placeholder.svg',
              // Removido onImageSelect para nova música - preview só dentro do uploader
              onSuccess: (result) => {
                console.log('Upload de imagem da música bem-sucedido:', result);
              },
              onError: (error) => {
                console.error('Erro no upload de imagem da música:', error);
              }
            });
            modalElement.musicImageUploader = musicImageUploader;
          }, 0);

          const tagSelect = document.getElementById('song-tag');
          tagSelect.innerHTML = '';

          availableTags.forEach(tag =>
          {
            const option = document.createElement('option');
            option.value = tag.id;
            option.textContent = tag.name;
            tagSelect.appendChild(option);
          });

          if (!modalElement) return;
          const form = modalElement.querySelector('#add-music-form');
          const titleInput = modalElement.querySelector('#song-title');
          const tagInput = modalElement.querySelector('#song-tag');
          const albumSelect = modalElement.querySelector('#song-album');
          const createAlbumBtn = modalElement.querySelector('#create-album-inline-btn');
          const allInputs = [titleInput, tagInput, albumSelect];
          await populateAlbumDropdown('song-album');
          createAlbumBtn?.addEventListener('click', async () => openCreateAlbumModal(createAlbumBtn));
          form?.addEventListener('submit', async (e) =>
          {
            e.preventDefault();
            allInputs.forEach(inp => inp.classList.remove('input-error'));
            let isValid = true;
            let firstInvalid = null;
            const title = titleInput.value.trim();
            const tag = $('#song-tag').val();
            console.log(tag);
            const albums = $('#song-album').val() || [];
            if (!title)
            {
              isValid = false;
              titleInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = titleInput;
            }
            
            if (title.length > 40)
            {
              showToast('Título da música deve ter no máximo 40 caracteres.', 'error');
              titleInput.classList.add('input-error');
              titleInput.focus();
              return;
            }
            if (tag.length === 0)
            {
              isValid = false;
              tagInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = tagInput;
            }
            // Álbuns não são obrigatórios
            if (!isValid)
            {
              showToast('Por favor, preencha todos os campos.', 'warning');
              firstInvalid?.focus();
              return;
            }

            let id = null;
            let albumid = null;
            
            // Fazer upload da imagem se houver
            let finalImageUrl = null;
            if (modalElement.musicImageUploader?.hasPendingUpload()) {
              console.log('Fazendo upload da imagem da música...');
              const uploadResult = await modalElement.musicImageUploader.uploadPendingImage();
              if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
                finalImageUrl = uploadResult.imageUrl;
                console.log('Upload da imagem concluído, nova URL:', finalImageUrl);
              }
            }

            try {
              const response = await fetch('/profile/criar-musica', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, tag, albums, imageUrl: finalImageUrl })
              });
              
              if (!response.ok) {
                if (response.status === 401) {
                  showToast('Sua sessão expirou. Redirecionando...', 'error');
                  setTimeout(() => window.location.href = '/login', 2000);
                  return;
                }
                
                let errorMessage = 'Erro ao criar música';
                try {
                  const errorData = await response.json();
                  errorMessage = errorData.message || errorMessage;
                } catch (e) {
                  // Se não conseguir fazer parse do JSON, usa mensagem padrão
                }
                
                throw new Error(errorMessage);
              }
              
              const data = await response.json();
              id = data.songid;
              showToast(data.message, 'success');
            } catch (err) {
              console.error("Erro ao criar música:", err);
              showToast(`Erro ao criar música: ${err.message}`, 'error');
              return; // Não continua se houve erro
            }

            const selectedTags = availableTags
              .filter(t => tag.includes(t.id.toString()))
              .map(tag => tag.name);

            // Criar novo card de música
            const songCard = document.createElement('div');
            songCard.className = 'song-card';
            songCard.dataset.id = id;
            
            const imageHtml = finalImageUrl ? 
              `<img src="${finalImageUrl}" alt="${title}" class="song-image">` : 
              `<div class="song-placeholder">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 3v18m-4-6 4 4 4-4"/>
                </svg>
              </div>`;
              
            songCard.innerHTML = `
              <div class="song-icon">${imageHtml}</div>
              <div class="song-info">
                <h3>${title}</h3>
                <p>Tags: ${selectedTags.join(', ')}</p>
              </div>`;
              
            // Adicionar ao container
            if (Selectors.musicContainer) {
              Selectors.musicContainer.prepend(songCard);
              songCard.addEventListener('click', handleSongCardClick);
            }
            
            closeModal(modalElement.closest('.modal-overlay'));
          });
          allInputs.forEach(input =>
          {
            const eventType = input.tagName === 'SELECT' ? 'change' : 'input';
            input?.addEventListener(eventType, () => input.classList.remove('input-error'));
          });
        });
      } else
      {
        console.warn("Botão 'Adicionar Música' não encontrado.");
      }
    }

    async function openEditMusicModal(songData, triggerElement = null)
    {
      const modalElement = openModal('.edit-music-overlay', 'edit-music-modal', getEditMusicModalHTML(songData), triggerElement)
      setTimeout(() =>
      {
        $('.js-example-basic-multiple').select2();
        
        // Definir tags selecionadas após inicialização do Select2
        if (songData.tags && songData.tags.length > 0) {
          $('#edit-song-tag').val(songData.tags).trigger('change');
        }
        
        // Inicializar upload de imagem da música
        const currentImageUrl = songData.image || '/img/placeholder.svg';
        const editMusicImageUploader = createImageUploader({
          containerId: 'edit-music-image-uploader',
          uploadEndpoint: '/upload/music/cover',
          currentImageUrl: currentImageUrl,
          onImageSelect: (imageUrl) => {
            // NÃO atualizar cards até salvar - apenas preview interno do uploader
          },
          onSuccess: (result) => {
            // Upload concluído com sucesso
          },
          onError: (error) => {
            console.error('Erro no upload de imagem da música:', error);
          }
        });
        modalElement.editMusicImageUploader = editMusicImageUploader;
      }, 0);

      const tagSelect = document.getElementById('edit-song-tag');
      tagSelect.innerHTML = '';

      availableTags.forEach(tag =>
      {
        const option = document.createElement('option');
        option.value = tag.id;
        option.textContent = tag.name;
        // Selecionar tag se estiver nas tags da música
        if (songData.tags && songData.tags.includes(tag.id.toString())) {
          option.selected = true;
        }
        tagSelect.appendChild(option);
      });

      if (!modalElement) return;

      const form = modalElement.querySelector('#edit-music-form');
      const originalTitleInput = modalElement.querySelector('#edit-music-original-title');
      const originalAlbumsInput = modalElement.querySelector('#edit-music-original-albums');
      const titleInput = modalElement.querySelector('#edit-song-title');
      const tagInput = modalElement.querySelector('#edit-song-tag');
      const albumSelect = modalElement.querySelector('#edit-song-album');
      const deleteBtn = modalElement.querySelector('#delete-music-btn');

      await populateAlbumDropdown('edit-song-album', songData.albums);
      const id = songData.id;

      setTimeout(() => titleInput?.focus(), 100);

      const allInputs = [titleInput, tagInput, albumSelect];

      form?.addEventListener('submit', async (e) =>
      {
        e.preventDefault();
        allInputs.forEach(inp => inp.classList.remove('input-error'));

        let isValid = true;
        let firstInvalid = null;

        const newTitle = titleInput.value.trim();
        const newTags = $('#edit-song-tag').val();
        const newAlbums = $('#edit-song-album').val() || [];

        if (!newTitle)
        {
          isValid = false;
          titleInput.classList.add('input-error');
          if (!firstInvalid) firstInvalid = titleInput;
        }
        
        if (newTitle.length > 40)
        {
          showToast('Título da música deve ter no máximo 40 caracteres.', 'error');
          titleInput.classList.add('input-error');
          titleInput.focus();
          return;
        }
        if (newTags.length === 0)
        {
          isValid = false;
          tagInput.classList.add('input-error');
          if (!firstInvalid) firstInvalid = tagInput;
        }
        // Álbum não é obrigatório - "Nenhum" (valor vazio) é uma opção válida

        if (!isValid)
        {
          showToast('Por favor, preencha todos os campos obrigatórios.', 'warning');
          firstInvalid?.focus();
          return;
        }

        const originalTitle = originalTitleInput.value;
        const originalAlbums = originalAlbumsInput.value.split(',').filter(a => a.trim());

        // Declarar variáveis fora do try para usar depois
        let finalImageUrl = undefined;
        let res = null;

        try
        {
          // Fazer upload da imagem se houver
          if (modalElement.editMusicImageUploader?.hasPendingUpload()) {
            const uploadResult = await modalElement.editMusicImageUploader.uploadPendingImage();
            if (uploadResult && uploadResult.success && uploadResult.imageUrl) {
              finalImageUrl = uploadResult.imageUrl;
            } else {
              throw new Error('Falha no upload da imagem');
            }
          } else if (modalElement.editMusicImageUploader) {
            // Se não há upload pendente, usar a imagem atual (apenas se não for preview local)
            const currentUrl = modalElement.editMusicImageUploader.getCurrentImageUrl();
            // Não passar URLs locais (blob/data) para o servidor
            if (currentUrl && !currentUrl.startsWith('data:') && !currentUrl.startsWith('blob:')) {
              finalImageUrl = currentUrl === '/img/placeholder.svg' ? null : currentUrl;
            } else {
              // Se é preview local, manter imagem original
              finalImageUrl = songData.image || null;
            }
          }
          
          const response = await fetch(`/profile/alterar-musica/${ id }`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              title: newTitle,
              tags: newTags,
              albums: newAlbums,
              imageUrl: finalImageUrl
            })
          })

          res = await response.json();
          if (!response.ok) {
            throw new Error(res.message || 'Erro ao atualizar música');
          }
        }
        catch (err)
        {
          console.error("Erro ao atualizar música:", err);
          showToast(`Erro ao atualizar música: ${err.message}`, 'error');
          return;
        }

        // Atualizar card principal no container de músicas
        const existingSongCard = Selectors.musicContainer?.querySelector(`.song-card[data-id="${id}"]`);

        if (existingSongCard) {
          // Atualizar título
          const titleElement = existingSongCard.querySelector('h3');
          if (titleElement) {
            titleElement.textContent = newTitle;
          }
          
          // Atualizar imagem - usar a URL final da resposta ou a URL processada
          const songIcon = existingSongCard.querySelector('.song-icon');
          if (songIcon) {
            if (finalImageUrl && finalImageUrl !== '/img/placeholder.svg') {
              songIcon.innerHTML = `<img src="${finalImageUrl}" alt="${newTitle}" class="song-image">`;
            } else {
              songIcon.innerHTML = `
                <div class="song-placeholder">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 3v18m-4-6 4 4 4-4"/>
                  </svg>
                </div>`;
            }
          }
          
          // Atualizar tags
          const tagNames = availableTags
            .filter(t => newTags.includes(t.id.toString()))
            .map(tag => tag.name);
          const tagElement = existingSongCard.querySelector('p:not(.song-card-album)');
          if (tagElement) {
            tagElement.textContent = `Tags: ${tagNames.join(', ')}`;
          }
        }

        // Atualizar cards em modais de álbum que possam estar abertos
        const modalScrollable = document.querySelector('.modal-body-scrollable');
        const modalCard = modalScrollable?.querySelector(`.song-card[data-id="${id}"]`);

        if (modalCard) {
          // Atualizar título
          const titleElement = modalCard.querySelector('h3');
          if (titleElement) {
            titleElement.textContent = newTitle;
          }
          
          // Atualizar imagem
          const songIcon = modalCard.querySelector('.song-icon');
          if (songIcon) {
            if (finalImageUrl && finalImageUrl !== '/img/placeholder.svg') {
              songIcon.innerHTML = `<img src="${finalImageUrl}" alt="${newTitle}" class="song-image">`;
            } else {
              songIcon.innerHTML = `
                <div class="song-placeholder">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 3v18m-4-6 4 4 4-4"/>
                  </svg>
                </div>`;
            }
          }
          
          // Atualizar tags
          const tagNames = availableTags
            .filter(t => newTags.includes(t.id.toString()))
            .map(tag => tag.name);
          const tagElement = modalCard.querySelector('p:not(.song-card-album)');
          if (tagElement) {
            tagElement.textContent = `Tag: ${tagNames.join(', ')}`;
          }
        }

        // Mostrar toast de sucesso APÓS atualizar interface
        showToast(res.message || 'Música atualizada com sucesso!', 'success');
        
        // Fechar modal automaticamente após sucesso
        closeModal(modalElement.closest('.modal-overlay'));
      });

      deleteBtn?.addEventListener('click', async () =>
      {
        if (!confirm(`Tem certeza que deseja excluir a música "${ songData.title }"?`))
        {
          return;
        }

        try
        {
          const response = await fetch('/profile/deletar-musica/' + id,
            {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            })

          const res = await response.json();
          showToast(res.message, 'success')
        }
        catch (error)
        {
          showToast('ERRO', 'error')
        }


        // Remover card principal
        const existingSongCard = Selectors.musicContainer?.querySelector(`.song-card[data-id="${id}"]`);
        if (existingSongCard) {
          existingSongCard.remove();
        }

        // Remover cards em modais
        const modalScrollable = document.querySelector('.modal-body-scrollable');
        const modalCard = modalScrollable?.querySelector(`.song-card[data-id="${id}"]`);
        if (modalCard) {
          modalCard.remove();
        }

        closeModal(modalElement.closest('.modal-overlay'));
      });

      allInputs.forEach(input =>
      {
        const eventType = input.tagName === 'SELECT' ? 'change' : 'input';
        input?.addEventListener(eventType, () => input.classList.remove('input-error'));
      });
    }

    async function renderAlbumCard(albumName, imageUrl = null)
    {
      let id = null;

      if (Selectors.albumContainer)
      {
        try {
          const response = await fetch('/profile/criar-album', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ albumName, imageUrl })
          });
          
          if (!response.ok) {
            if (response.status === 401) {
              showToast('Sua sessão expirou. Redirecionando...', 'error');
              setTimeout(() => window.location.href = '/login', 2000);
              return;
            }
            throw new Error(`HTTP ${response.status}`);
          }
          
          const data = await response.json();
          if (data.error) {
            throw new Error(data.message || data.error);
          }
          
          id = data.id;
          showToast(data.message, 'success');
        } catch (err) {
          console.error("Erro ao criar album:", err);
          showToast(`Erro ao criar álbum: ${err.message}`, 'error');
          throw err; // Re-throw para que o modal possa tratar o erro
        }

        const noAlbumsMessage = Selectors.albumContainer.querySelector('p.modal-empty-state');
        if (noAlbumsMessage)
        {
          noAlbumsMessage.remove();
        }

        const albumImageSrc = imageUrl || '/img/default.jpg';
        const displayName = albumName.length > 20 ? albumName.substring(0, 20) + '...' : albumName;
        const newAlbumCard = document.createElement('div');
        newAlbumCard.className = 'album-card';
        newAlbumCard.dataset.id = id;
        newAlbumCard.innerHTML = `
        <div class="album-img" data-id="${ id }">
          <img src="${albumImageSrc}" alt="${ albumName }">
        </div>
        <h3 class="album-name" title="${ albumName }">${ displayName }</h3>
      `;

        newAlbumCard.addEventListener('click', handleAlbumCardClick);
        Selectors.albumContainer.prepend(newAlbumCard);
      }
    }

    function setupPlayButtons(containerElement)
    {
      containerElement.querySelectorAll('.song-card').forEach(songCard =>
      {
        songCard.removeEventListener('click', handleSongCardClick); // NOVO: Remover o listener de clique no card
        songCard.querySelector('.play-button')?.removeEventListener('click', handlePlayButtonClick); // NOVO: Remover listener do play button

        songCard.addEventListener('click', handleSongCardClick);

        const playBtn = songCard.querySelector('.play-button');
        if (playBtn)
        {
          playBtn.addEventListener('click', handlePlayButtonClick);
        }
      });
    }

    function handlePlayButtonClick(e)
    {
      e.stopPropagation();
      const songTitle = e.currentTarget.closest('.song-card').querySelector('h3')?.textContent;
      if (songTitle)
      {
        showToast(`Reproduzindo: ${ songTitle }`, 'info', 2000);
      }
    }

    async function handleSongCardClick(e)
    {
      const songCard = e.currentTarget;

      try
      {
        const response = await fetch(`/profile/procurar-musica/${ songCard.dataset.id }`)
        const res = await response.json()

        const values = res.data;
        
        // Verificação segura para os álbuns - pode não existir se foram excluídos
        const albumNames = values.Albums && values.Albums.length > 0 
          ? values.Albums.map(album => album.name) 
          : [];
        
        // Extrair IDs das tags da música
        const tagIds = values.Tags && values.Tags.length > 0 
          ? values.Tags.map(tag => tag.id.toString()) 
          : [];
        
        openEditMusicModal({ 
          title: values.name, 
          genre: values.description, 
          albums: albumNames,
          tags: tagIds,
          id: songCard.dataset.id,
          image: values.image // Adicionar a imagem da música
        }, songCard);
      }
      catch (error)
      {
        console.error('Erro ao carregar dados da música:', error);
        showToast('Erro ao carregar detalhes da música', 'error');
      }
    }

    async function handleAlbumCardClick(event)
    {
      const albumCard = event.currentTarget;
      const albumNameElement = albumCard.querySelector('.album-name');
      // Usar o title (nome completo) ao invés do textContent (que pode estar truncado)
      const albumName = albumNameElement?.title || albumNameElement?.textContent;
      const albumid = albumCard.dataset.id;
      console.log(albumName);
      if (albumName)
      {
        await openAlbumContentModal(albumName, albumid, albumCard);
      } else
      {
        showToast('Nome do álbum não encontrado.', 'error');
      }
    }

    function setupAlbumCardListeners()
    {
      document.querySelectorAll('.album-card').forEach(albumCard =>
      {
        albumCard.removeEventListener('click', handleAlbumCardClick); // Evita duplicidade
        albumCard.addEventListener('click', handleAlbumCardClick);
      });
    }

    function setupAddAlbumModal()
    {
      if (Selectors.addAlbumBtn)
      {
        Selectors.addAlbumBtn.addEventListener('click', () =>
        {
          openCreateAlbumModal(Selectors.addAlbumBtn);
        });
      } else
      {
        console.warn("Botão 'Adicionar Álbum' não encontrado.");
      }
    }

    function getReportModalHTML()
    {
      return `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
        <h2>Denunciar Perfil</h2>
        <form id="report-profile-form">
          <div class="form-group">
            <label for="report-reason">Motivo da denúncia *</label>
            <select id="report-reason" name="reason" required>
              <option value="">Selecione um motivo</option>
              <option value="spam">Spam ou conteúdo repetitivo</option>
              <option value="fake">Perfil falso ou enganoso</option>
              <option value="harassment">Assédio ou bullying</option>
              <option value="inappropriate">Conteúdo inapropriado</option>
              <option value="copyright">Violação de direitos autorais</option>
              <option value="other">Outro</option>
            </select>
          </div>
          <div class="form-group">
            <label for="report-description">Descrição detalhada</label>
            <textarea id="report-description" name="description" rows="4" placeholder="Descreva o problema em detalhes (opcional)"></textarea>
          </div>
          <div class="button-group">
            <button type="button" class="btn btn-cancel">Cancelar</button>
            <button type="submit" class="btn btn-primary">Enviar Denúncia</button>
          </div>
        </form>
      `;
    }

    function setupReportModal()
    {
      if (Selectors.reportProfileBtn)
      {
        Selectors.reportProfileBtn.addEventListener('click', () =>
        {
          const userId = Selectors.reportProfileBtn.dataset.userId;
          const modalElement = openModal('.report-profile-overlay', 'report-profile-modal', getReportModalHTML(), Selectors.reportProfileBtn);
          if (!modalElement) return;

          const form = modalElement.querySelector('#report-profile-form');
          const reasonSelect = modalElement.querySelector('#report-reason');
          const descriptionTextarea = modalElement.querySelector('#report-description');

          form?.addEventListener('submit', async (e) =>
          {
            e.preventDefault();

            const reason = reasonSelect.value;
            const description = descriptionTextarea.value;

            if (!reason)
            {
              reasonSelect.classList.add('input-error');
              showToast('Por favor, selecione um motivo para a denúncia.', 'error');
              return;
            }

            try
            {
              const response = await fetch('/api/reports', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  reportedUserid: userId,
                  reason: reason,
                  description: description
                })
              });

              if (response.ok)
              {
                showToast('Denúncia enviada com sucesso. Obrigado por nos ajudar a manter a comunidade segura.', 'success');
                closeModal(modalElement.closest('.modal-overlay'));
              } else
              {
                const errorData = await response.json();
                showToast(errorData.message || 'Erro ao enviar denúncia. Tente novamente.', 'error');
              }
            } catch (error)
            {
              console.error('Erro ao enviar denúncia:', error);
              showToast('Erro de conexão. Verifique sua internet e tente novamente.', 'error');
            }
          });

          reasonSelect?.addEventListener('change', () => reasonSelect.classList.remove('input-error'));
        });
      } else
      {
        console.log("Botão 'Denunciar Perfil' não encontrado (usuário é o proprietário do perfil).");
      }
    }

    // Variável para armazenar o profileUploader no escopo da função
    let profileUploader = null;

    async function setupEditProfileModal()
    {
      if (Selectors.editProfileBtn)
      {
        Selectors.editProfileBtn.addEventListener('click', async () =>
        {
          const requiredElements = [Selectors.profileName/*, Selectors.profileTag*/, Selectors.profileLocation, Selectors.profileAbout, Selectors.profileImage];
          if (requiredElements.some(el => !el))
          {
            showToast("Erro: Elementos do perfil não encontrados na página.", 'error');
            return;
          }

          try
          {
            const response = await fetch('/profile/user-data');
            const data = await response.json();

            if (!response.ok)
            {
              throw new Error(data.message || 'Erro ao buscar dados do usuário');
            }

            const userData = data.userData;
            const modalElement = openModal('.edit-profile-overlay', 'edit-profile-modal', getEditProfileModalHTML(), Selectors.editProfileBtn);

            if (!modalElement) return;

            const form = modalElement.querySelector('#edit-profile-form');
            const nameInput = modalElement.querySelector('#edit-profile-name');
            const locationInput = modalElement.querySelector('#edit-profile-location');
            const aboutInput = modalElement.querySelector('#edit-profile-about');
            const linkedinInput = modalElement.querySelector('#edit-profile-linkedin');
            const instagramInput = modalElement.querySelector('#edit-profile-instagram');
            const facebookInput = modalElement.querySelector('#edit-profile-facebook');
            const allInputs = [nameInput, locationInput, aboutInput, linkedinInput, instagramInput, facebookInput];

            nameInput.value = userData.name || '';
            locationInput.value = userData.city || '';
            aboutInput.value = userData.description || '';
            linkedinInput.value = userData.linkedin || '';
            instagramInput.value = userData.instagram || '';
            facebookInput.value = userData.facebook || '';

            // Inicializar componente de upload de imagem
            profileUploader = createImageUploader({
              containerId: 'profile-image-uploader',
              uploadEndpoint: '/upload/profile/photo',
              currentImageUrl: userData.imageUrl,
              onSuccess: (result) => {
                console.log('Upload de perfil bem-sucedido:', result);
                // Atualizar imagem de perfil na página imediatamente
                if (Selectors.profileImage && result.imageUrl) {
                  Selectors.profileImage.src = result.imageUrl;
                  Selectors.profileImage.alt = `Foto de ${userData.name}`;
                }
              },
              onError: (error) => {
                console.error('Erro no upload de perfil:', error);
              }
            });

            // Após preencher os campos, popular o select de tags
            const tagsSelect = modalElement.querySelector('#edit-profile-tags');
            if (tagsSelect) {
              tagsSelect.innerHTML = '';
              const tagsResponse = await fetch('/profile/tags');
              const tagsData = await tagsResponse.json();
              if (Array.isArray(tagsData.tags)) {
                tagsData.tags.forEach(tag => {
                  const option = document.createElement('option');
                  option.value = tag.id;
                  option.textContent = tag.name;
                  tagsSelect.appendChild(option);
                });
              }
              // Destruir Select2 anterior, se houver
              if (window.$ && $(tagsSelect).data('select2')) {
                $(tagsSelect).select2('destroy');
              }
              if (window.$ && $(tagsSelect).select2) {
                $(tagsSelect).select2({
                  placeholder: 'Selecione as tags do perfil',
                  allowClear: true,
                });
              }
              // Pré-selecionar as tags do usuário, se houver
              if (userData.tags && Array.isArray(userData.tags)) {
                const tagIds = userData.tags.map(t => t.id.toString());
                $(tagsSelect).val(tagIds).trigger('change');
              }
            }

            form?.addEventListener('submit', async (e) =>
            {
              e.preventDefault();
              allInputs.forEach(inp => inp?.classList.remove('input-error'));
              let isValid = true;
              let firstInvalid = null;
              const newName = nameInput.value.trim();
              const newLocation = locationInput.value.trim();
              const newAbout = aboutInput.value.trim();
              const newLinkedin = linkedinInput.value.trim();
              const newInstagram = instagramInput.value.trim();
              const newFacebook = facebookInput.value.trim();

              if (!newName)
              {
                isValid = false;
                nameInput.classList.add('input-error');
                if (!firstInvalid) firstInvalid = nameInput;
              }
              
              if (newName.length > 100)
              {
                showToast('Nome do artista deve ter no máximo 100 caracteres.', 'error');
                nameInput.classList.add('input-error');
                nameInput.focus();
                return;
              }
              
              if (!newLocation)
              {
                isValid = false;
                locationInput.classList.add('input-error');
                if (!firstInvalid) firstInvalid = locationInput;
              }
              
              if (newLocation.length > 30)
              {
                showToast('Localização deve ter no máximo 30 caracteres.', 'error');
                locationInput.classList.add('input-error');
                locationInput.focus();
                return;
              }
              
              if (!newAbout)
              {
                isValid = false;
                aboutInput.classList.add('input-error');
                if (!firstInvalid) firstInvalid = aboutInput;
              }
              
              if (newAbout.length > 500)
              {
                showToast('Descrição deve ter no máximo 500 caracteres.', 'error');
                aboutInput.classList.add('input-error');
                aboutInput.focus();
                return;
              }
              if (!isValid)
              {
                showToast('Por favor, corrija os campos inválidos.', 'error');
                firstInvalid?.focus();
                return;
              }

              const selectedTags = tagsSelect && window.$ ? $(tagsSelect).val() || [] : [];

              try
              {
                // Fazer upload da imagem se houver uma pendente
                if (profileUploader && profileUploader.hasPendingUpload()) {
                  console.log('Fazendo upload da imagem de perfil...');
                  const uploadResult = await profileUploader.uploadPendingImage();
                  if (!uploadResult.success) {
                    throw new Error('Erro ao fazer upload da imagem: ' + uploadResult.message);
                  }
                }

                const response = await fetch('/profile/alterar-perfil', {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    name: newName,
                    city: newLocation,
                    description: newAbout,
                    linkedin: newLinkedin,
                    instagram: newInstagram,
                    facebook: newFacebook,
                    tags: selectedTags
                  })
                });
                
                if (!response.ok) {
                  if (response.status === 401) {
                    showToast('Sua sessão expirou. Redirecionando...', 'error');
                    setTimeout(() => window.location.href = '/login', 2000);
                    return;
                  }
                  
                  let errorMessage = 'Erro ao atualizar perfil';
                  try {
                    const errorData = await response.json();
                    errorMessage = errorData.message || errorMessage;
                  } catch (e) {
                    // Se não conseguir fazer parse do JSON, usa mensagem padrão
                  }
                  
                  throw new Error(errorMessage);
                }
                
                const res = await response.json();

                if (Selectors.profileName) Selectors.profileName.textContent = newName;
                if (Selectors.profileLocation) Selectors.profileLocation.innerText = newLocation;
                if (Selectors.profileAbout) Selectors.profileAbout.textContent = newAbout;

                showToast('Perfil atualizado com sucesso!', 'success');
                closeModal(modalElement.closest('.modal-overlay'));
              }
              catch (error)
              {
                console.error('Erro ao atualizar perfil:', error);
                showToast(`Erro ao atualizar perfil: ${error.message}`, 'error');
              }
            });
            allInputs.forEach(input => input?.addEventListener('input', () => input.classList.remove('input-error')));
          } catch (error)
          {
            console.error('Erro ao carregar dados do usuário:', error);
            showToast('Erro ao carregar dados do usuário', 'error');
          }
        });
      } else
      {
        console.warn("Botão 'Editar Perfil' não encontrado.");
      }
    }

    document.addEventListener('keydown', (e) =>
    {
      if (e.key === 'Escape')
      {
        const openModalOverlay = document.querySelector('.modal-overlay.is-visible');
        if (openModalOverlay)
        {
          closeModal(openModalOverlay);
        }
      }
    });

    async function initialize()
    {
      console.log("Initializing page script...");

      const response = await fetch('/profile/tags')
      const res = await response.json()

      res.tags.forEach(tag =>
      {
        availableTags.push({ id: tag.id, name: tag.name })
      })

      setupAlbumCardListeners();

      if (Selectors.musicContainer)
      {
        setupPlayButtons(Selectors.musicContainer);
      }

      setupAddMusicModal();
      setupAddAlbumModal();
      setupEditProfileModal();
      setupReportModal();

      console.log("Initialization complete.");
    }

    document.getElementById('create-chat-btn')?.addEventListener('click', async function ()
    {
      const userId = this.dataset.userId;
      try
      {
        const response = await fetch(`/chat/create/${ userId }`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include'
        });

        if (response.redirected)
        {
          window.location.href = response.url;
        } else
        {
          const data = await response.json();
          if (response.ok)
          {
            window.location.href = `/chat/${ data.chatId }`;
          } else
          {
            showToast(data.message || 'Erro ao criar chat', 'error');
          }
        }
      } catch (error)
      {
        console.error('Erro ao criar chat:', error);
        showToast('Erro ao criar chat', 'error');
      }
    });

    initialize();
  });
</script>
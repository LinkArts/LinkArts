<main class="container-profile main-content">
  <section class="profile-info">
    <div class="profile-left">
      <div class="profile-img">
        <img id="profile-main-image" src="/img/default.jpg" alt="{{artist.profile.imageAlt}}">
      </div>
      <div class="profile-details">
        <h1 id="profile-name">{{values.name}}</h1>
        {{#if values.tags}}
        {{#each values.tags}}
        <p id="profile-tag" class="profile-tag">{{values.tag}}</p>
        {{/each}}
        {{else}}
        <p id="profile-tag" class="profile-tag">Sem Tags</p>
        {{/if}}
        <p id="profile-location" class="profile-location">{{values.city}}</p>
        <div class="profile-rating"
          aria-label="Avaliação: {{artist.profile.rating}} de 5 estrelas (baseado em {{artist.profile.reviewCount}} avaliações)">
          <div class="stars" aria-hidden="true">
          </div>
          <span class="rating">{{artist.profile.rating}}</span>
          <span class="reviews">({{artist.profile.reviewCount}} reviews)</span>
        </div>
      </div>
    </div>
    <div class="profile-actions">
      <a href="{{artist.profile.socialMediaUrl}}" class="btn btn-outline" target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
        </svg>
        Social Media & Links
      </a>
      <a href="/agenda/{{values.id}}" class="btn btn-outline">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect width="18" height="18" x="3" y="4" rx="2"></rect>
          <line x1="16" x2="16" y1="2" y2="6"></line>
          <line x1="8" x2="8" y1="2" y2="6"></line>
          <line x1="3" x2="21" y1="10" y2="10"></line>
        </svg>
        Agenda
      </a>
      {{!-- {{#if user.isOwner}} --}}
      <button id="edit-profile-btn" class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
        </svg>
        Editar Perfil
      </button>
      {{!-- {{/if}} --}}
    </div>
  </section>

  <section class="about-section">
    <h2>Sobre {{artist.name}}</h2>
    <p id="profile-about">{{artist.about}}</p>
    <div class="tags">
      {{#each artist.tags}}
      <span class="tag">{{this}}</span>
      {{/each}}
    </div>
  </section>

  <section class="albums-section">
    <div class="section-header">
      <h2>Álbuns</h2>
      <button id="add-album-action-button" class="btn btn-outline btn-purple">Adicionar Álbum</button>
    </div>
    <div class="scroll-container albums-container">
      <div class="album-card" data-album-name="Álbum Padrão">
        <div class="album-img">
          <img src="/img/default.jpg" alt="Álbum Padrão">
        </div>
        <h3>Álbum Padrão</h3>
      </div>

      <div class="album-card" data-album-name="Rock Essencial">
        <div class="album-img">
          <img src="/img/rock_album_cover.jpg" alt="Rock Essencial">
        </div>
        <h3>Rock Essencial</h3>
      </div>

    </div>
  </section>

  <section class="music-section">
    <div class="section-header">
      <h2>Portfólio de Músicas</h2>
      {{!-- {{#if user.isOwner}} --}}
      <button id="add-music-action-button" class="btn btn-outline btn-purple">Adicionar Música</button>
      {{!-- {{/if}} --}}
    </div>
    <div class="scroll-container music-container">
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <div class="play-button" aria-label="Tocar {{this.title}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </div>
        </div>
        <div class="song-info">
          <h3>TTT</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <button onclick="console.log(" Teste");">
            <div class="play-button" aria-label="Tocar {{this.title}}">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
              </svg>
            </div>
          </button>
        </div>
        <div class="song-info">
          <h3>{{this.title}}</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      {{#each artist.songs}}
      <div class="song-card" data-album="{{this.album}}">
        <div class="song-icon">
          <div class="play-button" aria-label="Tocar {{this.title}}">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </div>
        </div>
        <div class="song-info">
          <h3>{{this.title}}</h3>
          <p>Gênero: {{this.genre}}</p>
          {{#if this.album}}<p class="song-card-album">Álbum: {{this.album}}</p>{{/if}}
        </div>
      </div>
      {{else}}
      <p>Nenhuma música no portfólio no momento.</p>
      {{/each}}
    </div>
  </section>

  <section class="reviews-section">
    <div class="section-header">
      <h2>Reviews</h2>
      <a href="{{artist.allReviewsUrl}}" class="btn-link">Ver Todas</a>
    </div>
    {{#each artist.reviews}}
    <div class="review-card">
      <div class="review-header">
        <h3>{{this.reviewerName}}</h3>
        <div class="review-stars" aria-label="Avaliação: {{this.rating}} de 5 estrelas">
          {{!-- {{{renderStars this.rating}}} --}}
        </div>
      </div>
      <p class="review-text">"{{{this.text}}}"</p>
    </div>
    {{else}}
    <p>Ainda não há reviews.</p>
    {{/each}}
  </section>
</main>

<script>
  document.addEventListener('DOMContentLoaded', () =>
  {
    let availableAlbums = [];
    let lastFocusedElement = null;

    const mockAllSongs = [
      { title: "Samba da Gafieira", genre: "Samba", album: "Álbum Padrão" },
      { title: "Choro do Violão", genre: "Choro", album: "Álbum Padrão" },
      { title: "Bossa Nova Alegre", genre: "Bossa Nova", album: "Álbum Padrão" },
      { title: "Rock na Noite", genre: "Rock", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Eletrônica Pulsante", genre: "Eletrônica", album: "Sons do Futuro" },
      { title: "Pop Chiclete", genre: "Pop", album: "Pop Essencial" },
      { title: "Forró Quentinho", genre: "Forró", album: "Ritmos do Brasil" },
      { title: "Sertanejo Raiz", genre: "Sertanejo", album: "Ritmos do Brasil" },
      { title: "Jazz Suave", genre: "Jazz", album: "Clássicos do Jazz" },
      { title: "Balada Romântica", genre: "Pop", album: "Canções de Amor" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
      { title: "Blues da Solidão", genre: "Blues", album: "Rock Essencial" },
    ];

    // Ajustes nos Seletores
    const Selectors = {
      profileName: document.getElementById('profile-name') ?? document.querySelector('.profile-details h1'),
      profileTag: document.getElementById('profile-tag') ?? document.querySelector('.profile-tag'),
      profileLocation: document.getElementById('profile-location') ?? document.querySelector('.profile-location'),
      profileAbout: document.getElementById('profile-about') ?? document.querySelector('.about-section p'),
      profileImage: document.getElementById('profile-main-image') ?? document.querySelector('.profile-img img'),

      // Ajustado para usar o ID, que é mais específico
      addMusicBtn: document.getElementById('add-music-action-button'),
      addAlbumBtn: document.getElementById('add-album-action-button'),
      editProfileBtn: document.getElementById('edit-profile-btn'),
      addEventBtn: document.getElementById('add-event-btn'), // Se houver um ID para este

      musicContainer: document.querySelector('.music-container'),
      albumContainer: document.querySelector('.albums-container'),
      eventsContainer: document.querySelector('.events-container'),
    };

    // --- Funções Auxiliares (mantidas as mesmas, mas garantindo que estejam disponíveis) ---
    function showToast(message, type = 'success', duration = 3500)
    {
      document.querySelectorAll('.toast.show').forEach(t => t.remove());
      const toast = document.createElement('div');
      toast.className = `toast ${ type }`;
      let iconSvg = '';
      if (type === 'success') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z" /></svg>';
      else if (type === 'warning') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8.22 1.754a.25.25 0 0 0-.44 0L1.698 13.939a.25.25 0 0 0 .22.361h12.164a.25.25 0 0 0 .22-.361L8.22 1.754ZM8 11.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5ZM8.25 6v3.5a.25.25 0 0 1-.5 0V6a.25.25 0 0 1 .5 0Z" /></svg>';
      else if (type === 'error') iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M4.47 4.47a.75.75 0 0 1 1.06 0L8 6.94l2.47-2.47a.75.75 0 1 1 1.06 1.06L9.06 8l2.47 2.47a.75.75 0 1 1-1.06 1.06L8 9.06l-2.47 2.47a.75.75 0 0 1-1.06-1.06L6.94 8 4.47 5.53a.75.75 0 0 1 0-1.06Z" /></svg>';
      toast.innerHTML = `${ iconSvg } <span>${ message }</span>`;
      document.body.appendChild(toast);
      toast.getBoundingClientRect();
      toast.classList.add('show');
      setTimeout(() =>
      {
        toast.classList.remove('show');
        toast.addEventListener('transitionend', () => toast.remove(), { once: true });
      }, duration);
    }

    function trapFocus(modalElement, overlayElement)
    {
      const focusableElements = Array.from(
        modalElement.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')
      ).filter(el => el.offsetParent !== null);
      if (focusableElements.length === 0) return { destroy: () => { } };
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      let isTrapActive = true;
      setTimeout(() =>
      {
        if (isTrapActive && overlayElement.classList.contains('is-visible')) firstElement.focus();
      }, 100);
      const handleKeydown = (e) =>
      {
        if (!isTrapActive || !overlayElement.classList.contains('is-visible')) return;
        if (e.key === 'Tab')
        {
          if (e.shiftKey)
          {
            if (document.activeElement === firstElement)
            {
              lastElement.focus();
              e.preventDefault();
            }
          } else
          {
            if (document.activeElement === lastElement)
            {
              firstElement.focus();
              e.preventDefault();
            }
          }
        } else if (e.key === 'Escape')
        {
          closeModal(overlayElement);
        }
      };
      overlayElement.addEventListener('keydown', handleKeydown);
      const destroy = () =>
      {
        if (isTrapActive)
        {
          overlayElement.removeEventListener('keydown', handleKeydown);
          isTrapActive = false;
        }
      };
      return { destroy };
    }

    function closeModal(modalOverlay)
    {
      if (!modalOverlay || !document.body.contains(modalOverlay))
      {
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        return;
      }
      const modalId = modalOverlay.dataset.modalId;
      const destroyerKey = `focusTrapDestroy_${ modalId }`;
      if (modalId && typeof window[destroyerKey] === 'function')
      {
        try
        {
          window[destroyerKey]();
          delete window[destroyerKey];
        } catch (e)
        {
          console.error("Error destroying focus trap:", e);
        }
      }
      if (modalOverlay.classList.contains('is-visible'))
      {
        modalOverlay.classList.remove('is-visible');
        const onTransitionEnd = (event) =>
        {
          if (event && event.target !== modalOverlay) return;
          modalOverlay.remove();
          if (!document.querySelector('.modal-overlay.is-visible'))
          {
            document.body.classList.remove('modal-open');
          }
          if (lastFocusedElement && typeof lastFocusedElement.focus === 'function')
          {
            try
            {
              lastFocusedElement.focus();
            } catch (e)
            {
              console.warn("Error restoring focus:", e);
            }
            lastFocusedElement = null;
          }
        };
        modalOverlay.addEventListener('transitionend', onTransitionEnd, { once: true });
        setTimeout(() =>
        {
          if (document.body.contains(modalOverlay) && !modalOverlay.classList.contains('is-visible')) onTransitionEnd(null);
        }, 500);
      } else
      {
        modalOverlay.remove();
        if (!document.querySelector('.modal-overlay.is-visible'))
        {
          document.body.classList.remove('modal-open');
        }
        if (lastFocusedElement)
        {
          try
          {
            lastFocusedElement.focus();
          } catch (e) { }
        }
        lastFocusedElement = null;
      }
    }

    function openModal(overlaySelector, modalClass, modalHTMLContent, triggerButton = null)
    {
      if (!overlaySelector || !modalClass) return null;
      const existingOverlay = document.querySelector(overlaySelector);
      if (existingOverlay) closeModal(existingOverlay);
      lastFocusedElement = triggerButton || document.activeElement;
      const modalOverlay = document.createElement('div');
      const overlayClassName = overlaySelector.startsWith('.') ? overlaySelector.substring(1) : overlaySelector.replace('#', '');
      modalOverlay.className = `modal-overlay ${ overlayClassName }`;
      modalOverlay.setAttribute('role', 'dialog');
      modalOverlay.setAttribute('aria-modal', 'true');
      const modalId = `${ modalClass }-${ Date.now() }`;
      modalOverlay.dataset.modalId = modalId;
      const modal = document.createElement('div');
      modal.className = modalClass;
      modal.innerHTML = modalHTMLContent;
      modalOverlay.appendChild(modal);
      const titleElement = modal.querySelector('h2');
      if (titleElement)
      {
        const titleId = titleElement.id || `${ modalId }-heading`;
        titleElement.id = titleId;
        modalOverlay.setAttribute('aria-labelledby', titleId);
      } else
      {
        modalOverlay.setAttribute('aria-label', `Modal ${ modalClass }`);
      }
      document.body.appendChild(modalOverlay);
      document.body.classList.add('modal-open');
      modal.querySelector('.modal-close-btn')?.addEventListener('click', () => closeModal(modalOverlay));
      modal.querySelector('.btn-cancel')?.addEventListener('click', () => closeModal(modalOverlay));
      modalOverlay.addEventListener('click', (e) =>
      {
        if (e.target === modalOverlay) closeModal(modalOverlay);
      });
      const focusTrapInstance = trapFocus(modal, modalOverlay);
      window[`focusTrapDestroy_${ modalId }`] = focusTrapInstance.destroy;
      modalOverlay.getBoundingClientRect();
      modalOverlay.classList.add('is-visible');
      return modal;
    }

    function populateAlbumDropdown(selectElementId)
    {
      const selectEl = document.getElementById(selectElementId);
      if (!selectEl) return;
      const currentVal = selectEl.value;
      selectEl.innerHTML = '';
      if (availableAlbums.length === 0)
      {
        selectEl.innerHTML = '<option value="" disabled>Nenhum álbum disponível</option>';
        selectEl.disabled = true;
      } else
      {
        selectEl.disabled = false;
        selectEl.innerHTML = '<option value="">Selecione um Álbum</option>';
        availableAlbums.forEach(album =>
        {
          const option = document.createElement('option');
          option.value = album;
          option.textContent = album;
          selectEl.appendChild(option);
        });
        selectEl.value = availableAlbums.includes(currentVal) ? currentVal : "";
      }
    }

    function loadInitialAlbums()
    {
      document.querySelectorAll('.album-card[data-album-name]').forEach(albumCard =>
      {
        const albumName = albumCard.dataset.albumName;
        if (albumName && !availableAlbums.some(a => a.toLowerCase() === albumName.toLowerCase()))
        {
          availableAlbums.push(albumName);
        }
      });

      if (availableAlbums.length === 0 && Selectors.albumContainer)
      {
        const noAlbumsMessage = Selectors.albumContainer.querySelector('.modal-empty-state');
        // Adiciona o álbum padrão APENAS se não houver outros álbuns e não houver uma mensagem de "nenhum álbum" já exibida
        if (!noAlbumsMessage || noAlbumsMessage.tagName !== 'P')
        { // Verifica se não é a mensagem ou se não é um P para evitar duplicar
          availableAlbums.push("Álbum Padrão");
          renderAlbumCard("Álbum Padrão"); // Renderiza o álbum padrão imediatamente
        }
      }
      availableAlbums.sort((a, b) => a.localeCompare(b));
      console.log("Initial albums loaded:", availableAlbums);

      // Garante que os álbuns dos mockAllSongs estejam em availableAlbums
      mockAllSongs.forEach(song =>
      {
        if (song.album && !availableAlbums.some(a => a.toLowerCase() === song.album.toLowerCase()))
        {
          availableAlbums.push(song.album);
        }
      });

      // Removi a parte de adicionar "Álbum Padrão" se não houver álbuns,
      // pois agora estamos usando mockAllSongs para popular.
      // Se você ainda quiser que "Álbum Padrão" apareça mesmo sem músicas,
      // pode adicioná-lo manualmente aqui:
      // if (!availableAlbums.includes("Álbum Padrão")) {
      //     availableAlbums.push("Álbum Padrão");
      // }

      availableAlbums.sort((a, b) => a.localeCompare(b));
      console.log("Initial albums loaded:", availableAlbums);
    }

    function getCreateAlbumModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="create-album-heading">Criar Novo Álbum</h2>
          <form id="create-album-form" novalidate>
            <div class="form-group"><label for="new-album-name">Nome do Álbum</label><input type="text" id="new-album-name" required></div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Criar Álbum</button>
            </div>
          </form>
        `;
    }

    function getEditProfileModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="edit-profile-heading">Editar Perfil</h2>
          <form id="edit-profile-form" novalidate>
            <div class="form-group"><label for="edit-profile-name">Nome</label><input type="text" id="edit-profile-name" required></div>
            <div class="form-group"><label for="edit-profile-tag">Tagline/Tipo</label><input type="text" id="edit-profile-tag" required></div>
            <div class="form-group"><label for="edit-profile-location">Localização</label><input type="text" id="edit-profile-location" required></div>
            <div class="form-group"><label for="edit-profile-about">Sobre</label><textarea id="edit-profile-about" rows="4" required></textarea></div>
            <div class="form-group"><label for="edit-profile-image-url">URL Imagem Perfil</label><input type="url" id="edit-profile-image-url" placeholder="https://..."></div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
        `;
    }

    function getAddMusicModalHTML()
    {
      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="add-music-heading">Adicionar Nova Música</h2>
          <form id="add-music-form" novalidate>
            <div class="form-group"><label for="song-title">Título</label><input type="text" id="song-title" required></div>
            <div class="form-group"><label for="song-genre">Gênero</label><input type="text" id="song-genre" required></div>
            <div class="form-group">
              <label for="song-album">Álbum</label>
              <div class="album-select-group">
                <select id="song-album" required><option value="">Carregando...</option></select>
                <button type="button" id="create-album-inline-btn" class="btn btn-link">Criar Novo Álbum</button>
              </div>
            </div>
            <div class="button-group">
              <button type="button" class="btn btn-cancel">Cancelar</button>
              <button type="submit" class="btn btn-primary">Adicionar Música</button>
            </div>
          </form>
        `;
    }

    function getAlbumContentModalHTML(albumName, songsInAlbum)
    {
      let songsHTML = '';
      if (songsInAlbum && songsInAlbum.length > 0)
      {
        songsHTML = songsInAlbum.map(song => `
      <div class="song-card" data-album="${ song.album }">
        <div class="song-icon">
          <div class="play-button" aria-label="Tocar ${ song.title }">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </div>
        </div>
        <div class="song-info">
          <h3>${ song.title }</h3>
          <p>Gênero: ${ song.genre }</p>
          ${ song.album ? `<p class="song-card-album">Álbum: ${ song.album }</p>` : '' }
        </div>
      </div>
    `).join('');
      } else
      {
        songsHTML = '<p class="modal-empty-state">Nenhuma música encontrada neste álbum.</p>';
      }

      return `
          <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
          <h2 id="album-content-heading">Músicas do Álbum: "${ albumName }"</h2>
          <div class="modal-body-scrollable">
            ${ songsHTML }
          </div>
          <div class="button-group">
            <button type="button" class="btn btn-cancel">Fechar</button>
          </div>
        `;
    }

    function getEditMusicModalHTML(song)
    {
      return `
        <button type="button" class="modal-close-btn" aria-label="Fechar modal">×</button>
        <h2 id="edit-music-heading">Editar Música: ${ song.title }</h2>
        <form id="edit-music-form" novalidate>
          <input type="hidden" id="edit-music-original-title" value="${ song.title }">
          <input type="hidden" id="edit-music-original-album" value="${ song.album }">

          <div class="form-group"><label for="edit-song-title">Título</label><input type="text" id="edit-song-title" value="${ song.title }" required></div>
          <div class="form-group"><label for="edit-song-genre">Gênero</label><input type="text" id="edit-song-genre" value="${ song.genre }" required></div>
          <div class="form-group">
            <label for="edit-song-album">Álbum</label>
            <select id="edit-song-album" required><option value="">Carregando...</option></select>
          </div>
          <div class="button-group">
            <button type="button" class="btn btn-danger" id="delete-music-btn">Excluir Música</button>
            <button type="button" class="btn btn-cancel">Cancelar</button>
            <button type="submit" class="btn btn-primary">Salvar Alterações</button>
          </div>
        </form>
      `;
    }

    // --- Fim das Funções de Geração de HTML ---

    // --- Funções de Abertura de Modals e Lógica Relacionada ---

    function openEditMusicModal(songData, triggerElement = null)
    {
      const modalElement = openModal('.edit-music-overlay', 'edit-music-modal', getEditMusicModalHTML(songData), triggerElement);
      if (!modalElement) return;

      const form = modalElement.querySelector('#edit-music-form');
      const originalTitleInput = modalElement.querySelector('#edit-music-original-title');
      const originalAlbumInput = modalElement.querySelector('#edit-music-original-album');
      const titleInput = modalElement.querySelector('#edit-song-title');
      const genreInput = modalElement.querySelector('#edit-song-genre');
      const albumSelect = modalElement.querySelector('#edit-song-album');
      const deleteBtn = modalElement.querySelector('#delete-music-btn');

      // Popula o dropdown de álbuns no modal de edição
      populateAlbumDropdown('edit-song-album');
      albumSelect.value = songData.album || ""; // Seleciona o álbum atual da música

      setTimeout(() => titleInput?.focus(), 100); // Foca no campo de título

      const allInputs = [titleInput, genreInput, albumSelect];

      // Lógica de Submissão do Formulário (Salvar)
      form?.addEventListener('submit', (e) =>
      {
        e.preventDefault();
        allInputs.forEach(inp => inp.classList.remove('input-error'));

        let isValid = true;
        let firstInvalid = null;

        const newTitle = titleInput.value.trim();
        const newGenre = genreInput.value.trim();
        const newAlbum = albumSelect.value;

        if (!newTitle)
        {
          isValid = false;
          titleInput.classList.add('input-error');
          if (!firstInvalid) firstInvalid = titleInput;
        }
        if (!newGenre)
        {
          isValid = false;
          genreInput.classList.add('input-error');
          if (!firstInvalid) firstInvalid = genreInput;
        }
        if (!newAlbum)
        {
          isValid = false;
          albumSelect.classList.add('input-error');
          if (!firstInvalid) firstInvalid = albumSelect;
        }

        if (!isValid)
        {
          showToast('Por favor, preencha todos os campos obrigatórios.', 'warning');
          firstInvalid?.focus();
          return;
        }

        // Lógica para encontrar e atualizar a música no mockAllSongs
        const originalTitle = originalTitleInput.value;
        const originalAlbum = originalAlbumInput.value;

        const songIndex = mockAllSongs.findIndex(
          s => s.title === originalTitle && s.album === originalAlbum
        );

        if (songIndex > -1)
        {
          mockAllSongs[songIndex] = {
            title: newTitle,
            genre: newGenre,
            album: newAlbum
          };
          console.log("Música atualizada no mockAllSongs:", mockAllSongs[songIndex]);
          showToast(`Música "${ newTitle }" atualizada!`, 'success');

          // Atualizar o card da música no DOM se estiver visível (apenas na seção de Músicas)
          // Melhoria: Encontrar o card original e atualizar o seu conteúdo
          const existingSongCard = Selectors.musicContainer?.querySelector(`.song-card[data-album="${ originalAlbum }"] > .song-info > h3`)
            ?.closest('.song-card');

          if (existingSongCard)
          {
            existingSongCard.dataset.album = newAlbum; // Atualiza o data-album
            existingSongCard.querySelector('h3').textContent = newTitle;
            existingSongCard.querySelector('p:not(.song-card-album)').textContent = `Gênero: ${ newGenre }`;
            const albumP = existingSongCard.querySelector('.song-card-album');
            if (albumP) albumP.textContent = `Álbum: ${ newAlbum }`;
          }

        } else
        {
          showToast('Erro: Música original não encontrada para atualização.', 'error');
          console.error("Música original não encontrada para atualização:", songData);
        }

        closeModal(modalElement.closest('.modal-overlay'));
        // O foco retornará automaticamente ao elemento que abriu o modal
      });

      // Lógica de Exclusão da Música
      deleteBtn?.addEventListener('click', () =>
      {
        if (!confirm(`Tem certeza que deseja excluir a música "${ songData.title }"?`))
        {
          return;
        }

        const originalTitle = originalTitleInput.value;
        const originalAlbum = originalAlbumInput.value;

        const initialLength = mockAllSongs.length;
        mockAllSongs = mockAllSongs.filter(
          s => !(s.title === originalTitle && s.album === originalAlbum)
        );

        if (mockAllSongs.length < initialLength)
        {
          showToast(`Música "${ originalTitle }" excluída!`, 'success');
          console.log("Música excluída do mockAllSongs.");

          // Remover o card da música do DOM
          const songCardToRemove = Selectors.musicContainer?.querySelector(`.song-card[data-album="${ originalAlbum }"] > .song-info > h3`)
            ?.closest('.song-card');
          if (songCardToRemove)
          {
            songCardToRemove.remove();
            console.log("Música removida do DOM.");
          } else
          {
            console.warn("Card da música para remover não encontrado no DOM.");
          }

          // Opcional: Se o álbum ficar vazio, talvez mostrar uma mensagem ou remover o card do álbum.
          // Por enquanto, vamos deixar a lógica básica.

        } else
        {
          showToast('Erro: Música não encontrada para exclusão.', 'error');
          console.error("Música não encontrada para exclusão:", songData);
        }

        closeModal(modalElement.closest('.modal-overlay'));
        // O foco retornará automaticamente ao elemento que abriu o modal
      });

      // Remove classes de erro ao digitar
      allInputs.forEach(input =>
      {
        const eventType = input.tagName === 'SELECT' ? 'change' : 'input';
        input?.addEventListener(eventType, () => input.classList.remove('input-error'));
      });
    }

    function openCreateAlbumModal(triggerButton = null)
    {
      const modalElement = openModal('.create-album-overlay', 'create-album-modal', getCreateAlbumModalHTML(), triggerButton);
      if (!modalElement) return;

      const form = modalElement.querySelector('#create-album-form');
      const nameInput = modalElement.querySelector('#new-album-name');

      setTimeout(() => nameInput?.focus(), 100);

      form?.addEventListener('submit', (e) =>
      {
        e.preventDefault();
        const newName = nameInput.value.trim();
        const nameLower = newName.toLowerCase();

        if (!newName)
        {
          showToast('Nome do álbum é obrigatório.', 'error');
          nameInput.classList.add('input-error');
          nameInput.focus();
          return;
        }
        if (availableAlbums.some(a => a.toLowerCase() === nameLower))
        {
          showToast(`Álbum "${ newName }" já existe.`, 'warning');
          nameInput.classList.add('input-error');
          nameInput.focus();
          return;
        }

        availableAlbums.push(newName);
        availableAlbums.sort((a, b) => a.localeCompare(b));
        console.log("Album created:", newName);

        renderAlbumCard(newName); // Adiciona o álbum à interface

        const addMusicSelect = document.getElementById('song-album');
        if (addMusicSelect && document.body.contains(addMusicSelect))
        {
          populateAlbumDropdown('song-album');
          addMusicSelect.value = newName; // Seleciona o álbum recém-criado
        }

        showToast(`Álbum "${ newName }" criado!`, 'success');
        closeModal(modalElement.closest('.modal-overlay'));
        triggerButton?.focus();
      });

      nameInput?.addEventListener('input', () => nameInput.classList.remove('input-error'));
    }

    function openAlbumContentModal(albumName, triggerButton = null)
    {
      // Converte o nome do álbum do HTML para minúsculas para comparação
      const albumNameLower = albumName.toLowerCase();
      let songsForAlbum = [];

      // Filtra as músicas do mockAllSongs, comparando os nomes dos álbuns em minúsculas
      songsForAlbum = mockAllSongs.filter(song => song.album.toLowerCase() === albumNameLower);

      // Se você ainda quiser que ele tente pegar do DOM caso o mockAllSongs não seja suficiente,
      // ou para músicas adicionadas dinamicamente via "Adicionar Música"
      if (songsForAlbum.length === 0 && Selectors.musicContainer)
      {
        const allSongsElements = Array.from(Selectors.musicContainer.querySelectorAll('.song-card'));
        songsForAlbum = allSongsElements
          .filter(songCard => songCard.dataset.album.toLowerCase() === albumNameLower) // MUDANÇA AQUI TAMBÉM
          .map(songCard => ({
            title: songCard.querySelector('h3')?.textContent || 'Título Desconhecido',
            genre: songCard.querySelector('p:not(.song-card-album)')?.textContent.replace('Gênero: ', '').trim() || 'Gênero Desconhecido',
            album: songCard.dataset.album
          }));
      }

      const modalElement = openModal('.album-content-overlay', 'album-content-modal', getAlbumContentModalHTML(albumName, songsForAlbum), triggerButton);
      if (modalElement)
      {
        setupPlayButtons(modalElement);
      }
    }

    // --- Funções Auxiliares de Setup ---

    function renderAlbumCard(albumName)
    {
      if (Selectors.albumContainer)
      {
        const noAlbumsMessage = Selectors.albumContainer.querySelector('p.modal-empty-state');
        if (noAlbumsMessage)
        {
          noAlbumsMessage.remove();
        }

        const newAlbumCard = document.createElement('div');
        newAlbumCard.className = 'album-card';
        newAlbumCard.dataset.albumName = albumName;
        newAlbumCard.innerHTML = `
        <div class="album-img">
          <img src="/img/default.jpg" alt="${ albumName }">
        </div>
        <h3>${ albumName }</h3>
      `;

        newAlbumCard.addEventListener('click', handleAlbumCardClick);
        Selectors.albumContainer.appendChild(newAlbumCard);
      }
    }

    function setupPlayButtons(containerElement)
    {
      containerElement.querySelectorAll('.song-card').forEach(songCard =>
      {
        // Remover listeners anteriores para evitar duplicações
        songCard.removeEventListener('click', handleSongCardClick); // NOVO: Remover o listener de clique no card
        songCard.querySelector('.play-button')?.removeEventListener('click', handlePlayButtonClick); // NOVO: Remover listener do play button

        // Adicionar listener para o clique em qualquer lugar do card (para editar/excluir)
        songCard.addEventListener('click', handleSongCardClick);

        // Adicionar listener para o botão de play (impedindo a propagação)
        const playBtn = songCard.querySelector('.play-button');
        if (playBtn)
        {
          playBtn.addEventListener('click', handlePlayButtonClick);
        }
      });
    }

    // NOVO: Função para lidar com o clique no play button
    function handlePlayButtonClick(e)
    {
      e.stopPropagation(); // MUITO IMPORTANTE: Impede que o clique no play button ative o clique no song-card
      const songTitle = e.currentTarget.closest('.song-card').querySelector('h3')?.textContent;
      if (songTitle)
      {
        showToast(`Reproduzindo: ${ songTitle }`, 'info', 2000);
      }
    }

    // NOVO: Função para lidar com o clique em qualquer parte do song-card (para abrir o modal de edição)
    function handleSongCardClick(e)
    {
      const songCard = e.currentTarget;
      const title = songCard.querySelector('h3')?.textContent;
      const genre = songCard.querySelector('p:not(.song-card-album)')?.textContent.replace('Gênero: ', '').trim();
      const album = songCard.dataset.album;

      // Se as informações estiverem completas, abre o modal de edição
      if (title && genre && album)
      {
        openEditMusicModal({ title, genre, album }, songCard);
      } else
      {
        showToast('Não foi possível obter os detalhes da música.', 'error');
        console.error("Detalhes da música ausentes para o card:", songCard);
      }
    }

    function handleAlbumCardClick(event)
    {
      const albumCard = event.currentTarget;
      const albumName = albumCard.dataset.albumName;
      if (albumName)
      {
        openAlbumContentModal(albumName, albumCard);
      } else
      {
        showToast('Nome do álbum não encontrado.', 'error');
      }
    }

    function setupAlbumCardListeners()
    {
      document.querySelectorAll('.album-card[data-album-name]').forEach(albumCard =>
      {
        albumCard.removeEventListener('click', handleAlbumCardClick); // Evita duplicidade
        albumCard.addEventListener('click', handleAlbumCardClick);
      });
    }

    // Função para configurar o botão de adicionar álbum
    function setupAddAlbumModal()
    {
      if (Selectors.addAlbumBtn)
      { // Verifica se o botão existe antes de adicionar o listener
        Selectors.addAlbumBtn.addEventListener('click', () =>
        {
          openCreateAlbumModal(Selectors.addAlbumBtn);
        });
      } else
      {
        console.warn("Botão 'Adicionar Álbum' não encontrado.");
      }
    }

    // Função para configurar o botão de adicionar música
    function setupAddMusicModal()
    {
      if (Selectors.addMusicBtn)
      { // Verifica se o botão existe
        Selectors.addMusicBtn.addEventListener('click', () =>
        {
          const modalElement = openModal('.add-music-overlay', 'add-music-modal', getAddMusicModalHTML(), Selectors.addMusicBtn);
          if (!modalElement) return;
          const form = modalElement.querySelector('#add-music-form');
          const titleInput = modalElement.querySelector('#song-title');
          const genreInput = modalElement.querySelector('#song-genre');
          const albumSelect = modalElement.querySelector('#song-album');
          const createAlbumBtn = modalElement.querySelector('#create-album-inline-btn');
          const allInputs = [titleInput, genreInput, albumSelect];
          populateAlbumDropdown('song-album');
          createAlbumBtn?.addEventListener('click', () => openCreateAlbumModal(createAlbumBtn));
          form?.addEventListener('submit', (e) =>
          {
            e.preventDefault();
            allInputs.forEach(inp => inp.classList.remove('input-error'));
            let isValid = true;
            let firstInvalid = null;
            const title = titleInput.value.trim();
            const genre = genreInput.value.trim();
            const album = albumSelect.value;
            if (!title)
            {
              isValid = false;
              titleInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = titleInput;
            }
            if (!genre)
            {
              isValid = false;
              genreInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = genreInput;
            }
            if (!album)
            {
              isValid = false;
              albumSelect.classList.add('input-error');
              if (!firstInvalid) firstInvalid = albumSelect;
            }
            if (!isValid)
            {
              showToast('Por favor, preencha todos os campos.', 'warning');
              firstInvalid?.focus();
              return;
            }
            console.log("Adding music:", {
              title,
              genre,
              album
            });
            const songCard = document.createElement('div');
            songCard.className = 'song-card';
            songCard.dataset.album = album;
            songCard.innerHTML = `
                  <div class="song-icon"><div class="play-button"><svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg></div></div>
                  <div class="song-info"><h3>${ title }</h3><p>Gênero: ${ genre }</p><p class="song-card-album">Álbum: ${ album }</p></div>`;
            const playBtn = songCard.querySelector('.play-button');
            playBtn?.addEventListener('click', () => showToast(`Play: ${ title }`, 'success', 1500));
            Selectors.musicContainer.appendChild(songCard);
            const newPlayBtn = songCard.querySelector('.play-button');
            if (newPlayBtn)
            {
              newPlayBtn.addEventListener('click', handlePlayButtonClick);
            }
            songCard.addEventListener('click', handleSongCardClick);
            showToast(`Música "${ title }" adicionada!`, 'success');
            closeModal(modalElement.closest('.modal-overlay'));
          });
          allInputs.forEach(input =>
          {
            const eventType = input.tagName === 'SELECT' ? 'change' : 'input';
            input?.addEventListener(eventType, () => input.classList.remove('input-error'));
          });
        });
      } else
      {
        console.warn("Botão 'Adicionar Música' não encontrado.");
      }
    }

    // Função para configurar o botão de editar perfil
    function setupEditProfileModal()
    {
      if (Selectors.editProfileBtn)
      { // Verifica se o botão existe
        Selectors.editProfileBtn.addEventListener('click', () =>
        {
          const requiredElements = [Selectors.profileName, Selectors.profileTag, Selectors.profileLocation, Selectors.profileAbout, Selectors.profileImage];
          if (requiredElements.some(el => !el))
          {
            showToast("Erro: Elementos do perfil não encontrados na página.", 'error');
            return;
          }
          const modalElement = openModal('.edit-profile-overlay', 'edit-profile-modal', getEditProfileModalHTML(), Selectors.editProfileBtn);
          if (!modalElement) return;
          const form = modalElement.querySelector('#edit-profile-form');
          const nameInput = modalElement.querySelector('#edit-profile-name');
          const tagInput = modalElement.querySelector('#edit-profile-tag');
          const locationInput = modalElement.querySelector('#edit-profile-location');
          const aboutInput = modalElement.querySelector('#edit-profile-about');
          const imageUrlInput = modalElement.querySelector('#edit-profile-image-url');
          const allInputs = [nameInput, tagInput, locationInput, aboutInput, imageUrlInput];
          if (Selectors.profileName) nameInput.value = Selectors.profileName.textContent.trim();
          if (Selectors.profileTag) tagInput.value = Selectors.profileTag.textContent.trim();
          if (Selectors.profileLocation) locationInput.value = Selectors.profileLocation.innerText?.trim() || Selectors.profileLocation.textContent.trim();
          if (Selectors.profileAbout) aboutInput.value = Selectors.profileAbout.textContent.trim();
          if (Selectors.profileImage) imageUrlInput.value = Selectors.profileImage.src;
          form?.addEventListener('submit', (e) =>
          {
            e.preventDefault();
            allInputs.forEach(inp => inp?.classList.remove('input-error'));
            let isValid = true;
            let firstInvalid = null;
            const newName = nameInput.value.trim();
            const newTag = tagInput.value.trim();
            const newLocation = locationInput.value.trim();
            const newAbout = aboutInput.value.trim();
            const newImageUrl = imageUrlInput.value.trim();

            if (!newName)
            {
              isValid = false;
              nameInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = nameInput;
            }
            if (!newTag)
            {
              isValid = false;
              tagInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = tagInput;
            }
            if (!newLocation)
            {
              isValid = false;
              locationInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = locationInput;
            }
            if (!newAbout)
            {
              isValid = false;
              aboutInput.classList.add('input-error');
              if (!firstInvalid) firstInvalid = aboutInput;
            }
            if (newImageUrl)
            {
              try
              {
                new URL(newImageUrl);
              } catch
              {
                isValid = false;
                imageUrlInput.classList.add('input-error');
                showToast('URL da imagem inválida.', 'warning');
                if (!firstInvalid) firstInvalid = imageUrlInput;
              }
            }
            if (!isValid)
            {
              showToast('Por favor, corrija os campos inválidos.', 'error');
              firstInvalid?.focus();
              return;
            }
            if (Selectors.profileName) Selectors.profileName.textContent = newName;
            if (Selectors.profileTag) Selectors.profileTag.textContent = newTag;
            if (Selectors.profileLocation) Selectors.profileLocation.innerText = newLocation;
            if (Selectors.profileAbout) Selectors.profileAbout.textContent = newAbout;
            const oldImageUrl = Selectors.profileImage ? Selectors.profileImage.src : null;
            if (Selectors.profileImage && newImageUrl && newImageUrl !== oldImageUrl)
            {
              Selectors.profileImage.src = newImageUrl;
              Selectors.profileImage.alt = `Foto de ${ newName }`;
              Selectors.profileImage.onerror = () =>
              {
                if (oldImageUrl) Selectors.profileImage.src = oldImageUrl;
                Selectors.profileImage.onerror = null;
              };
              Selectors.profileImage.onload = () =>
              {
                Selectors.profileImage.onerror = null;
              };
            } else if (Selectors.profileImage && !newImageUrl && oldImageUrl)
            {
              console.log("Profile image URL cleared.");
            }
            showToast('Perfil atualizado com sucesso!', 'success');
            closeModal(modalElement.closest('.modal-overlay'));
          });
          allInputs.forEach(input => input?.addEventListener('input', () => input.classList.remove('input-error')));
        });
      } else
      {
        console.warn("Botão 'Editar Perfil' não encontrado.");
      }
    }
    // --- Fim das Funções de Abertura de Modals e Lógica Relacionada ---

    // --- Inicialização ---
    document.addEventListener('keydown', (e) =>
    {
      if (e.key === 'Escape')
      {
        const openModalOverlay = document.querySelector('.modal-overlay.is-visible');
        if (openModalOverlay)
        {
          closeModal(openModalOverlay);
        }
      }
    });

    function initialize()
    {
      console.log("Initializing page script...");

      // 1. Carrega os álbuns iniciais do DOM e preenche 'availableAlbums'
      // Esta deve ser a primeira chamada relacionada a álbuns para preencher o array
      loadInitialAlbums();

      // 2. Configura os listeners para os cards de álbum (padrões e novos)
      // Isso deve ser feito APÓS loadInitialAlbums, pois pode adicionar um álbum padrão
      setupAlbumCardListeners();

      if (Selectors.musicContainer)
      {
        setupPlayButtons(Selectors.musicContainer); // Chame para as músicas já no DOM
      }

      // 3. Configura os listeners dos botões de adicionar música/álbum e editar perfil
      // Agora que Selectors são mais robustos, eles devem ser encontrados.
      setupAddMusicModal();
      setupAddAlbumModal();
      setupEditProfileModal();

      // Listener para o botão Adicionar Evento (funcionalidade ainda não implementada)
      if (Selectors.addEventBtn && Selectors.eventsContainer)
      {
        Selectors.addEventBtn.addEventListener('click', () =>
        {
          showToast('Funcionalidade "Adicionar Evento" ainda não implementada.', 'warning');
        });
      } else
      {
        console.warn("Botão 'Adicionar Evento' ou 'eventsContainer' não encontrados.");
      }
      console.log("Initialization complete.");
    }

    // Chama a função de inicialização quando o DOM estiver pronto
    initialize();
  });
</script>